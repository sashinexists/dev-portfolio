(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.1/optimize for better performance and smaller assets.');


var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	const die = function() {
        managers = null
        model = null
        stepper = null
        ports = null
      }

      return ports ? { ports: ports, die: die } : { die: die };
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return $elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return $elm$core$Maybe$Nothing;
	}
}



// HELPERS


function _Debugger_unsafeCoerce(value)
{
	return value;
}



// PROGRAMS


var _Debugger_element = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			var currNode = _VirtualDom_virtualize(domNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			var cornerNode = _VirtualDom_doc.createElement('div');
			domNode.parentNode.insertBefore(cornerNode, domNode.nextSibling);
			var cornerCurr = _VirtualDom_virtualize(cornerNode);

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = A2(_VirtualDom_map, $elm$browser$Debugger$Main$UserMsg, view($elm$browser$Debugger$Main$getUserModel(model)));
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view corner

				var cornerNext = $elm$browser$Debugger$Main$cornerView(model);
				var cornerPatches = _VirtualDom_diff(cornerCurr, cornerNext);
				cornerNode = _VirtualDom_applyPatches(cornerNode, cornerCurr, cornerPatches, sendToApp);
				cornerCurr = cornerNext;

				if (!model.popout.b)
				{
					currPopout = undefined;
					return;
				}

				// view popout

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


var _Debugger_document = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		A3($elm$browser$Debugger$Main$wrapInit, _Json_wrap(debugMetadata), _Debugger_popout(), impl.init),
		$elm$browser$Debugger$Main$wrapUpdate(impl.update),
		$elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
		function(sendToApp, initialModel)
		{
			var divertHrefToApp = impl.setup && impl.setup(function(x) { return sendToApp($elm$browser$Debugger$Main$UserMsg(x)); });
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			var currBlocker = $elm$browser$Debugger$Main$toBlockerType(initialModel);
			var currPopout;

			initialModel.popout.a = sendToApp;

			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view($elm$browser$Debugger$Main$getUserModel(model));
				var nextNode = _VirtualDom_node('body')(_List_Nil)(
					_Utils_ap(
						A2($elm$core$List$map, _VirtualDom_map($elm$browser$Debugger$Main$UserMsg), doc.body),
						_List_Cons($elm$browser$Debugger$Main$cornerView(model), _List_Nil)
					)
				);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);

				// update blocker

				var nextBlocker = $elm$browser$Debugger$Main$toBlockerType(model);
				_Debugger_updateBlocker(currBlocker, nextBlocker);
				currBlocker = nextBlocker;

				// view popout

				if (!model.popout.b) { currPopout = undefined; return; }

				_VirtualDom_doc = model.popout.b; // SWITCH TO POPOUT DOC
				currPopout || (currPopout = _VirtualDom_virtualize(model.popout.b));
				var nextPopout = $elm$browser$Debugger$Main$popoutView(model);
				var popoutPatches = _VirtualDom_diff(currPopout, nextPopout);
				_VirtualDom_applyPatches(model.popout.b.body, currPopout, popoutPatches, sendToApp);
				currPopout = nextPopout;
				_VirtualDom_doc = document; // SWITCH BACK TO NORMAL DOC
			});
		}
	);
});


function _Debugger_popout()
{
	return {
		b: undefined,
		a: undefined
	};
}

function _Debugger_isOpen(popout)
{
	return !!popout.b;
}

function _Debugger_open(popout)
{
	return _Scheduler_binding(function(callback)
	{
		_Debugger_openWindow(popout);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}

function _Debugger_openWindow(popout)
{
	var w = $elm$browser$Debugger$Main$initialWindowWidth,
		h = $elm$browser$Debugger$Main$initialWindowHeight,
	 	x = screen.width - w,
		y = screen.height - h;

	var debuggerWindow = window.open('', '', 'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y);
	var doc = debuggerWindow.document;
	doc.title = 'Elm Debugger';

	// handle arrow keys
	doc.addEventListener('keydown', function(event) {
		event.metaKey && event.which === 82 && window.location.reload();
		event.key === 'ArrowUp'   && (popout.a($elm$browser$Debugger$Main$Up  ), event.preventDefault());
		event.key === 'ArrowDown' && (popout.a($elm$browser$Debugger$Main$Down), event.preventDefault());
	});

	// handle window close
	window.addEventListener('unload', close);
	debuggerWindow.addEventListener('unload', function() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		window.removeEventListener('unload', close);
	});

	function close() {
		popout.b = undefined;
		popout.a($elm$browser$Debugger$Main$NoOp);
		debuggerWindow.close();
	}

	// register new window
	popout.b = doc;
}



// SCROLL


function _Debugger_scroll(popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msgs = popout.b.getElementById('elm-debugger-sidebar');
			if (msgs && msgs.scrollTop !== 0)
			{
				msgs.scrollTop = 0;
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


var _Debugger_scrollTo = F2(function(id, popout)
{
	return _Scheduler_binding(function(callback)
	{
		if (popout.b)
		{
			var msg = popout.b.getElementById(id);
			if (msg)
			{
				msg.scrollIntoView(false);
			}
		}
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});



// UPLOAD


function _Debugger_upload(popout)
{
	return _Scheduler_binding(function(callback)
	{
		var doc = popout.b || document;
		var element = doc.createElement('input');
		element.setAttribute('type', 'file');
		element.setAttribute('accept', 'text/json');
		element.style.display = 'none';
		element.addEventListener('change', function(event)
		{
			var fileReader = new FileReader();
			fileReader.onload = function(e)
			{
				callback(_Scheduler_succeed(e.target.result));
			};
			fileReader.readAsText(event.target.files[0]);
			doc.body.removeChild(element);
		});
		doc.body.appendChild(element);
		element.click();
	});
}



// DOWNLOAD


var _Debugger_download = F2(function(historyLength, json)
{
	return _Scheduler_binding(function(callback)
	{
		var fileName = 'history-' + historyLength + '.txt';
		var jsonString = JSON.stringify(json);
		var mime = 'text/plain;charset=utf-8';
		var done = _Scheduler_succeed(_Utils_Tuple0);

		// for IE10+
		if (navigator.msSaveBlob)
		{
			navigator.msSaveBlob(new Blob([jsonString], {type: mime}), fileName);
			return callback(done);
		}

		// for HTML5
		var element = document.createElement('a');
		element.setAttribute('href', 'data:' + mime + ',' + encodeURIComponent(jsonString));
		element.setAttribute('download', fileName);
		element.style.display = 'none';
		document.body.appendChild(element);
		element.click();
		document.body.removeChild(element);
		callback(done);
	});
});



// POPOUT CONTENT


function _Debugger_messageToString(value)
{
	if (typeof value === 'boolean')
	{
		return value ? 'True' : 'False';
	}

	if (typeof value === 'number')
	{
		return value + '';
	}

	if (typeof value === 'string')
	{
		return '"' + _Debugger_addSlashes(value, false) + '"';
	}

	if (value instanceof String)
	{
		return "'" + _Debugger_addSlashes(value, true) + "'";
	}

	if (typeof value !== 'object' || value === null || !('$' in value))
	{
		return '…';
	}

	if (typeof value.$ === 'number')
	{
		return '…';
	}

	var code = value.$.charCodeAt(0);
	if (code === 0x23 /* # */ || /* a */ 0x61 <= code && code <= 0x7A /* z */)
	{
		return '…';
	}

	if (['Array_elm_builtin', 'Set_elm_builtin', 'RBNode_elm_builtin', 'RBEmpty_elm_builtin'].indexOf(value.$) >= 0)
	{
		return '…';
	}

	var keys = Object.keys(value);
	switch (keys.length)
	{
		case 1:
			return value.$;
		case 2:
			return value.$ + ' ' + _Debugger_messageToString(value.a);
		default:
			return value.$ + ' … ' + _Debugger_messageToString(value[keys[keys.length - 1]]);
	}
}


function _Debugger_init(value)
{
	if (typeof value === 'boolean')
	{
		return A3($elm$browser$Debugger$Expando$Constructor, $elm$core$Maybe$Just(value ? 'True' : 'False'), true, _List_Nil);
	}

	if (typeof value === 'number')
	{
		return $elm$browser$Debugger$Expando$Primitive(value + '');
	}

	if (typeof value === 'string')
	{
		return $elm$browser$Debugger$Expando$S('"' + _Debugger_addSlashes(value, false) + '"');
	}

	if (value instanceof String)
	{
		return $elm$browser$Debugger$Expando$S("'" + _Debugger_addSlashes(value, true) + "'");
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (tag === '::' || tag === '[]')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ListSeq, true,
				A2($elm$core$List$map, _Debugger_init, value)
			);
		}

		if (tag === 'Set_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$SetSeq, true,
				A3($elm$core$Set$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (tag === 'RBNode_elm_builtin' || tag == 'RBEmpty_elm_builtin')
		{
			return A2($elm$browser$Debugger$Expando$Dictionary, true,
				A3($elm$core$Dict$foldr, _Debugger_initKeyValueCons, _List_Nil, value)
			);
		}

		if (tag === 'Array_elm_builtin')
		{
			return A3($elm$browser$Debugger$Expando$Sequence, $elm$browser$Debugger$Expando$ArraySeq, true,
				A3($elm$core$Array$foldr, _Debugger_initCons, _List_Nil, value)
			);
		}

		if (typeof tag === 'number')
		{
			return $elm$browser$Debugger$Expando$Primitive('<internals>');
		}

		var char = tag.charCodeAt(0);
		if (char === 35 || 65 <= char && char <= 90)
		{
			var list = _List_Nil;
			for (var i in value)
			{
				if (i === '$') continue;
				list = _List_Cons(_Debugger_init(value[i]), list);
			}
			return A3($elm$browser$Debugger$Expando$Constructor, char === 35 ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(tag), true, $elm$core$List$reverse(list));
		}

		return $elm$browser$Debugger$Expando$Primitive('<internals>');
	}

	if (typeof value === 'object')
	{
		var dict = $elm$core$Dict$empty;
		for (var i in value)
		{
			dict = A3($elm$core$Dict$insert, i, _Debugger_init(value[i]), dict);
		}
		return A2($elm$browser$Debugger$Expando$Record, true, dict);
	}

	return $elm$browser$Debugger$Expando$Primitive('<internals>');
}

var _Debugger_initCons = F2(function initConsHelp(value, list)
{
	return _List_Cons(_Debugger_init(value), list);
});

var _Debugger_initKeyValueCons = F3(function(key, value, list)
{
	return _List_Cons(
		_Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
		list
	);
});

function _Debugger_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}



// BLOCK EVENTS


function _Debugger_updateBlocker(oldBlocker, newBlocker)
{
	if (oldBlocker === newBlocker) return;

	var oldEvents = _Debugger_blockerToEvents(oldBlocker);
	var newEvents = _Debugger_blockerToEvents(newBlocker);

	// remove old blockers
	for (var i = 0; i < oldEvents.length; i++)
	{
		document.removeEventListener(oldEvents[i], _Debugger_blocker, true);
	}

	// add new blockers
	for (var i = 0; i < newEvents.length; i++)
	{
		document.addEventListener(newEvents[i], _Debugger_blocker, true);
	}
}


function _Debugger_blocker(event)
{
	if (event.type === 'keydown' && event.metaKey && event.which === 82)
	{
		return;
	}

	var isScroll = event.type === 'scroll' || event.type === 'wheel';
	for (var node = event.target; node; node = node.parentNode)
	{
		if (isScroll ? node.id === 'elm-debugger-details' : node.id === 'elm-debugger-overlay')
		{
			return;
		}
	}

	event.stopPropagation();
	event.preventDefault();
}

function _Debugger_blockerToEvents(blocker)
{
	return blocker === $elm$browser$Debugger$Overlay$BlockNone
		? []
		: blocker === $elm$browser$Debugger$Overlay$BlockMost
			? _Debugger_mostEvents
			: _Debugger_allEvents;
}

var _Debugger_mostEvents = [
	'click', 'dblclick', 'mousemove',
	'mouseup', 'mousedown', 'mouseenter', 'mouseleave',
	'touchstart', 'touchend', 'touchcancel', 'touchmove',
	'pointerdown', 'pointerup', 'pointerover', 'pointerout',
	'pointerenter', 'pointerleave', 'pointermove', 'pointercancel',
	'dragstart', 'drag', 'dragend', 'dragenter', 'dragover', 'dragleave', 'drop',
	'keyup', 'keydown', 'keypress',
	'input', 'change',
	'focus', 'blur'
];

var _Debugger_allEvents = _Debugger_mostEvents.concat('wheel', 'scroll');




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = {$: 'EQ'};
var $elm$core$Basics$GT = {$: 'GT'};
var $elm$core$Basics$LT = {$: 'LT'};
var $elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var $author$project$TemplateModulesBeta$MsgGlobal = function (a) {
	return {$: 'MsgGlobal', a: a};
};
var $elm$core$Maybe$Nothing = {$: 'Nothing'};
var $author$project$TemplateModulesBeta$OnPageChange = function (a) {
	return {$: 'OnPageChange', a: a};
};
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var $elm$core$Basics$False = {$: 'False'};
var $elm$core$Basics$add = _Basics_add;
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 'Nothing') {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / $elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = {$: 'True'};
var $elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$Continue = {$: 'Continue'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$GotBuildError = function (a) {
	return {$: 'GotBuildError', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$GotDataBatch = function (a) {
	return {$: 'GotDataBatch', a: a};
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $dillonkearns$elm_pages$RenderRequest$HtmlAndJson = {$: 'HtmlAndJson'};
var $dillonkearns$elm_pages$RenderRequest$OnlyJson = {$: 'OnlyJson'};
var $dillonkearns$elm_pages$RenderRequest$SinglePage = F3(
	function (a, b, c) {
		return {$: 'SinglePage', a: a, b: b, c: c};
	});
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map3 = _Json_map3;
var $dillonkearns$elm_pages$RenderRequest$Api = function (a) {
	return {$: 'Api', a: a};
};
var $dillonkearns$elm_pages$RenderRequest$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $dillonkearns$elm_pages$RenderRequest$Page = function (a) {
	return {$: 'Page', a: a};
};
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var $elm$regex$Regex$never = _Regex_never;
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $dillonkearns$elm_pages$RenderRequest$dropTrailingIndexHtml = A2(
	$elm$regex$Regex$replace,
	A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString('/index\\.html$')),
	function (_v0) {
		return '';
	});
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $dillonkearns$elm_pages$Internal$ApiRoute$ApiRoute = function (a) {
	return {$: 'ApiRoute', a: a};
};
var $elm$regex$Regex$contains = _Regex_contains;
var $dillonkearns$elm_pages$Internal$ApiRoute$tryMatchDone = F2(
	function (path, _v0) {
		var handler = _v0.a;
		return A2($elm$regex$Regex$contains, handler.regex, path) ? $elm$core$Maybe$Just(
			$dillonkearns$elm_pages$Internal$ApiRoute$ApiRoute(handler)) : $elm$core$Maybe$Nothing;
	});
var $dillonkearns$elm_pages$Internal$ApiRoute$firstMatch = F2(
	function (path, handlers) {
		firstMatch:
		while (true) {
			if (!handlers.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = handlers.a;
				var rest = handlers.b;
				var _v1 = A2($dillonkearns$elm_pages$Internal$ApiRoute$tryMatchDone, path, first);
				if (_v1.$ === 'Just') {
					var response = _v1.a;
					return $elm$core$Maybe$Just(response);
				} else {
					var $temp$path = path,
						$temp$handlers = rest;
					path = $temp$path;
					handlers = $temp$handlers;
					continue firstMatch;
				}
			}
		}
	});
var $dillonkearns$elm_pages$Path$Path = function (a) {
	return {$: 'Path', a: a};
};
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$core$String$endsWith = _String_endsWith;
var $dillonkearns$elm_pages$Pages$Internal$String$chopEnd = F2(
	function (needle, string) {
		chopEnd:
		while (true) {
			if (A2($elm$core$String$endsWith, needle, string)) {
				var $temp$needle = needle,
					$temp$string = A2(
					$elm$core$String$dropRight,
					$elm$core$String$length(needle),
					string);
				needle = $temp$needle;
				string = $temp$string;
				continue chopEnd;
			} else {
				return string;
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $dillonkearns$elm_pages$Pages$Internal$String$chopStart = F2(
	function (needle, string) {
		chopStart:
		while (true) {
			if (A2($elm$core$String$startsWith, needle, string)) {
				var $temp$needle = needle,
					$temp$string = A2(
					$elm$core$String$dropLeft,
					$elm$core$String$length(needle),
					string);
				needle = $temp$needle;
				string = $temp$string;
				continue chopStart;
			} else {
				return string;
			}
		}
	});
var $dillonkearns$elm_pages$Path$normalize = function (pathPart) {
	return A2(
		$dillonkearns$elm_pages$Pages$Internal$String$chopStart,
		'/',
		A2($dillonkearns$elm_pages$Pages$Internal$String$chopEnd, '/', pathPart));
};
var $dillonkearns$elm_pages$Path$fromString = function (path) {
	return $dillonkearns$elm_pages$Path$Path(
		$dillonkearns$elm_pages$Path$normalize(path));
};
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $dillonkearns$elm_pages$HtmlPrinter$asJsonView = function (x) {
	return _Json_wrap(x);
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$HtmlContext = F2(
	function (a, b) {
		return {$: 'HtmlContext', a: a, b: b};
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NodeEntry = function (a) {
	return {$: 'NodeEntry', a: a};
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NodeRecord = F4(
	function (tag, children, facts, descendantsCount) {
		return {children: children, descendantsCount: descendantsCount, facts: facts, tag: tag};
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$TextTag = function (a) {
	return {$: 'TextTag', a: a};
};
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$CustomNode = function (a) {
	return {$: 'CustomNode', a: a};
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$MarkdownNode = function (a) {
	return {$: 'MarkdownNode', a: a};
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$CustomNodeRecord = F2(
	function (facts, model) {
		return {facts: facts, model: model};
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$Facts = F5(
	function (styles, events, attributeNamespace, stringAttributes, boolAttributes) {
		return {attributeNamespace: attributeNamespace, boolAttributes: boolAttributes, events: events, stringAttributes: stringAttributes, styles: styles};
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$attributeNamespaceKey = 'a4';
var $elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Dict$Black = {$: 'Black'};
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = {$: 'Red'};
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Red,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1.$) {
				case 'LT':
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs;
var $elm$json$Json$Decode$dict = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		$elm$core$Dict$fromList,
		$elm$json$Json$Decode$keyValuePairs(decoder));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$eventKey = 'a0';
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeEvents = function (taggedEventDecoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$field,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$eventKey,
				$elm$json$Json$Decode$dict(
					A2($elm$json$Json$Decode$map, taggedEventDecoder, $elm$json$Json$Decode$value))),
				$elm$json$Json$Decode$succeed($elm$core$Dict$empty)
			]));
};
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$attributeKey = 'a3';
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (_v0.$ === 'Just') {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeDictFilterMap = function (decoder) {
	return A2(
		$elm$json$Json$Decode$map,
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Dict$toList,
			A2(
				$elm$core$Basics$composeR,
				$elm$core$List$filterMap(
					function (_v0) {
						var key = _v0.a;
						var value = _v0.b;
						var _v1 = A2($elm$json$Json$Decode$decodeValue, decoder, value);
						if (_v1.$ === 'Err') {
							return $elm$core$Maybe$Nothing;
						} else {
							var v = _v1.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(key, v));
						}
					}),
				$elm$core$Dict$fromList)),
		$elm$json$Json$Decode$dict($elm$json$Json$Decode$value));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeAttributes = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$field,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$attributeKey,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeDictFilterMap(decoder)),
				$elm$json$Json$Decode$succeed($elm$core$Dict$empty)
			]));
};
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$filter = F2(
	function (isGood, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, d) {
					return A2(isGood, k, v) ? A3($elm$core$Dict$insert, k, v, d) : d;
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$styleKey = 'a1';
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$knownKeys = _List_fromArray(
	[$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$styleKey, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$eventKey, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$attributeKey, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$attributeNamespaceKey]);
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $elm$core$Basics$not = _Basics_not;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Helpers$filterKnownKeys = $elm$core$Dict$filter(
	F2(
		function (key, _v0) {
			return !A2($elm$core$List$member, key, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$knownKeys);
		}));
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeOthers = function (otherDecoder) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (attributes) {
			return A2(
				$elm$json$Json$Decode$map,
				A2(
					$elm$core$Basics$composeR,
					$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Helpers$filterKnownKeys,
					$elm$core$Dict$union(attributes)),
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeDictFilterMap(otherDecoder));
		},
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeAttributes(otherDecoder));
};
var $elm$json$Json$Decode$string = _Json_decodeString;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeStyles = $elm$json$Json$Decode$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$styleKey,
			$elm$json$Json$Decode$dict($elm$json$Json$Decode$string)),
			$elm$json$Json$Decode$succeed($elm$core$Dict$empty)
		]));
var $elm$json$Json$Decode$map5 = _Json_map5;
var $elm$json$Json$Decode$maybe = function (decoder) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, decoder),
				$elm$json$Json$Decode$succeed($elm$core$Maybe$Nothing)
			]));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeFacts = function (_v0) {
	var taggers = _v0.a;
	var eventDecoder = _v0.b;
	return A6(
		$elm$json$Json$Decode$map5,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$Facts,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeStyles,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeEvents(
			eventDecoder(taggers)),
		$elm$json$Json$Decode$maybe(
			A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Constants$attributeNamespaceKey, $elm$json$Json$Decode$value)),
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeOthers($elm$json$Json$Decode$string),
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeOthers($elm$json$Json$Decode$bool));
};
var $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants = {
	markdown: {markdown: 'b', options: 'a'},
	virtualDom: {descendantsCount: 'b', facts: 'd', kids: 'e', model: 'g', node: 'k', nodeType: '$', nodeTypeCustom: 3, nodeTypeKeyedNode: 2, nodeTypeNode: 1, nodeTypeTagger: 4, nodeTypeText: 0, nodeTypeThunk: 5, refs: 'l', tag: 'c', tagger: 'j', text: 'a'}
};
var $elm$json$Json$Decode$map2 = _Json_map2;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeCustomNodeRecord = function (context) {
	return A3(
		$elm$json$Json$Decode$map2,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$CustomNodeRecord,
		A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.facts,
			$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeFacts(context)),
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.model, $elm$json$Json$Decode$value));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$MarkdownNodeRecord = F2(
	function (facts, model) {
		return {facts: facts, model: model};
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Markdown$MarkdownModel = F2(
	function (options, markdown) {
		return {markdown: markdown, options: options};
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Markdown$baseMarkdownModel = {
	markdown: '',
	options: {
		defaultHighlighting: $elm$core$Maybe$Nothing,
		githubFlavored: $elm$core$Maybe$Just(
			{breaks: false, tables: false}),
		sanitize: false,
		smartypants: false
	}
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Markdown$decodeMarkdownModel = A2(
	$elm$json$Json$Decode$map,
	$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Markdown$MarkdownModel($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Markdown$baseMarkdownModel.options),
	A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.markdown.markdown, $elm$json$Json$Decode$string));
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeMarkdownNodeRecord = function (context) {
	return A3(
		$elm$json$Json$Decode$map2,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$MarkdownNodeRecord,
		A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.facts,
			$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeFacts(context)),
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.model, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$Markdown$decodeMarkdownModel));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeCustomNode = function (context) {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$map,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$MarkdownNode,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeMarkdownNodeRecord(context)),
				A2(
				$elm$json$Json$Decode$map,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$CustomNode,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeCustomNodeRecord(context))
			]));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeTextTag = A2(
	$elm$json$Json$Decode$field,
	$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.text,
	A2(
		$elm$json$Json$Decode$andThen,
		function (text) {
			return $elm$json$Json$Decode$succeed(
				{text: text});
		},
		$elm$json$Json$Decode$string));
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $elm$json$Json$Decode$list = _Json_decodeList;
var $elm$json$Json$Decode$map4 = _Json_map4;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$contextDecodeElmHtml = function (context) {
	return A2(
		$elm$json$Json$Decode$andThen,
		function (nodeType) {
			return _Utils_eq(nodeType, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeTypeText) ? A2($elm$json$Json$Decode$map, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$TextTag, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeTextTag) : (_Utils_eq(nodeType, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeTypeKeyedNode) ? A2(
				$elm$json$Json$Decode$map,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NodeEntry,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeKeyedNode(context)) : (_Utils_eq(nodeType, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeTypeNode) ? A2(
				$elm$json$Json$Decode$map,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NodeEntry,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeNode(context)) : (_Utils_eq(nodeType, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeTypeCustom) ? $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeCustomNode(context) : (_Utils_eq(nodeType, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeTypeTagger) ? $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeTagger(context) : (_Utils_eq(nodeType, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeTypeThunk) ? A2(
				$elm$json$Json$Decode$field,
				$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.node,
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$contextDecodeElmHtml(context)) : $elm$json$Json$Decode$fail(
				'No such type as ' + $elm$core$String$fromInt(nodeType)))))));
		},
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.nodeType, $elm$json$Json$Decode$int));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeKeyedNode = function (context) {
	var decodeSecondNode = A2(
		$elm$json$Json$Decode$field,
		'b',
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$contextDecodeElmHtml(context));
	return A5(
		$elm$json$Json$Decode$map4,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NodeRecord,
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.tag, $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.kids,
			$elm$json$Json$Decode$list(decodeSecondNode)),
		A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.facts,
			$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeFacts(context)),
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.descendantsCount, $elm$json$Json$Decode$int));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeNode = function (context) {
	return A5(
		$elm$json$Json$Decode$map4,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NodeRecord,
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.tag, $elm$json$Json$Decode$string),
		A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.kids,
			$elm$json$Json$Decode$list(
				$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$contextDecodeElmHtml(context))),
		A2(
			$elm$json$Json$Decode$field,
			$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.facts,
			$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeFacts(context)),
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.descendantsCount, $elm$json$Json$Decode$int));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeTagger = function (_v0) {
	var taggers = _v0.a;
	var eventDecoder = _v0.b;
	return A2(
		$elm$json$Json$Decode$andThen,
		function (tagger) {
			var nodeDecoder = $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$contextDecodeElmHtml(
				A2(
					$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$HtmlContext,
					_Utils_ap(
						taggers,
						_List_fromArray(
							[tagger])),
					eventDecoder));
			return A2(
				$elm$json$Json$Decode$at,
				_List_fromArray(
					[$dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.node]),
				nodeDecoder);
		},
		A2($elm$json$Json$Decode$field, $dillonkearns$elm_pages$Test$Internal$KernelConstants$kernelConstants.virtualDom.tagger, $elm$json$Json$Decode$value));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeElmHtml = function (eventDecoder) {
	return $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$contextDecodeElmHtml(
		A2($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$HtmlContext, _List_Nil, eventDecoder));
};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$defaultFormatOptions = {indent: 0, newLines: false};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$RawTextElements = {$: 'RawTextElements'};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$escapeRawText = F2(
	function (kind, rawText) {
		switch (kind.$) {
			case 'VoidElements':
				return rawText;
			case 'RawTextElements':
				return rawText;
			default:
				return A3(
					$elm$core$String$replace,
					'\'',
					'&#039;',
					A3(
						$elm$core$String$replace,
						'\"',
						'&quot;',
						A3(
							$elm$core$String$replace,
							'>',
							'&gt;',
							A3(
								$elm$core$String$replace,
								'<',
								'&lt;',
								A3($elm$core$String$replace, '&', '&amp;', rawText)))));
		}
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$Basics$neq = _Utils_notEqual;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$propertyToAttributeName = function (propertyName) {
	switch (propertyName) {
		case 'className':
			return 'class';
		case 'htmlFor':
			return 'for';
		case 'httpEquiv':
			return 'http-equiv';
		case 'acceptCharset':
			return 'accept-charset';
		default:
			return propertyName;
	}
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$EscapableRawTextElements = {$: 'EscapableRawTextElements'};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NormalElements = {$: 'NormalElements'};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$VoidElements = {$: 'VoidElements'};
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$escapableRawTextElements = _List_fromArray(
	['textarea', 'title']);
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$rawTextElements = _List_fromArray(
	['script', 'style']);
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$voidElements = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'param', 'source', 'track', 'wbr']);
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$toElementKind = function (element) {
	return A2($elm$core$List$member, element, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$voidElements) ? $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$VoidElements : (A2($elm$core$List$member, element, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$rawTextElements) ? $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$RawTextElements : (A2($elm$core$List$member, element, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$escapableRawTextElements) ? $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$EscapableRawTextElements : $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$NormalElements));
};
var $elm$core$String$toLower = _String_toLower;
var $elm$core$String$trim = _String_trim;
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeRecordToString = F2(
	function (options, _v1) {
		var tag = _v1.tag;
		var children = _v1.children;
		var facts = _v1.facts;
		var styles = function () {
			var _v7 = $elm$core$Dict$toList(facts.styles);
			if (!_v7.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var styleValues = _v7;
				return $elm$core$Maybe$Just(
					function (styleString) {
						return 'style=\"' + (styleString + '\"');
					}(
						A2(
							$elm$core$String$join,
							'',
							A2(
								$elm$core$List$map,
								function (_v8) {
									var key = _v8.a;
									var value = _v8.b;
									return key + (':' + (value + ';'));
								},
								styleValues))));
			}
		}();
		var stringAttributes = $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (_v6) {
						var k = _v6.a;
						var v = _v6.b;
						return k + ('=\"' + (v + '\"'));
					},
					A2(
						$elm$core$List$map,
						$elm$core$Tuple$mapFirst($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$propertyToAttributeName),
						$elm$core$Dict$toList(
							A2(
								$elm$core$Dict$filter,
								F2(
									function (k, v) {
										return k !== 'className';
									}),
								facts.stringAttributes))))));
		var openTag = function (extras) {
			var trimmedExtras = A2(
				$elm$core$List$filter,
				$elm$core$Basics$neq(''),
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					A2(
						$elm$core$List$filterMap,
						function (x) {
							return x;
						},
						extras)));
			var filling = function () {
				if (!trimmedExtras.b) {
					return '';
				} else {
					var more = trimmedExtras;
					return ' ' + A2($elm$core$String$join, ' ', more);
				}
			}();
			return '<' + (tag + (filling + '>'));
		};
		var closeTag = '</' + (tag + '>');
		var classes = A2(
			$elm$core$Maybe$map,
			function (name) {
				return 'class=\"' + (name + '\"');
			},
			A2($elm$core$Dict$get, 'className', facts.stringAttributes));
		var childrenStrings = A2(
			$elm$core$List$map,
			$elm$core$Basics$append(
				A2($elm$core$String$repeat, options.indent, ' ')),
			$elm$core$List$concat(
				A2(
					$elm$core$List$map,
					A2(
						$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeToLines,
						$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$toElementKind(tag),
						options),
					children)));
		var boolToString = function (b) {
			if (b) {
				return 'True';
			} else {
				return 'False';
			}
		};
		var boolAttributes = $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (_v3) {
						var k = _v3.a;
						var v = _v3.b;
						return k + ('=' + $elm$core$String$toLower(
							boolToString(v)));
					},
					$elm$core$Dict$toList(facts.boolAttributes))));
		var _v2 = $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$toElementKind(tag);
		if (_v2.$ === 'VoidElements') {
			return _List_fromArray(
				[
					openTag(
					_List_fromArray(
						[classes, styles, stringAttributes, boolAttributes]))
				]);
		} else {
			return _Utils_ap(
				_List_fromArray(
					[
						openTag(
						_List_fromArray(
							[classes, styles, stringAttributes, boolAttributes]))
					]),
				_Utils_ap(
					childrenStrings,
					_List_fromArray(
						[closeTag])));
		}
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeToLines = F3(
	function (kind, options, nodeType) {
		switch (nodeType.$) {
			case 'TextTag':
				var text = nodeType.a.text;
				return _List_fromArray(
					[
						A2($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$escapeRawText, kind, text)
					]);
			case 'NodeEntry':
				var record = nodeType.a;
				return A2($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeRecordToString, options, record);
			case 'CustomNode':
				var record = nodeType.a;
				return _List_Nil;
			case 'MarkdownNode':
				var record = nodeType.a;
				return _List_fromArray(
					[record.model.markdown]);
			default:
				return _List_Nil;
		}
	});
var $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeToStringWithOptions = function (options) {
	return A2(
		$elm$core$Basics$composeR,
		A2($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeToLines, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$RawTextElements, options),
		$elm$core$String$join(
			options.newLines ? '\n' : ''));
};
var $dillonkearns$elm_pages$HtmlPrinter$htmlToString = function (viewHtml) {
	var _v0 = A2(
		$elm$json$Json$Decode$decodeValue,
		$dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$InternalTypes$decodeElmHtml(
			F2(
				function (_v1, _v2) {
					return $elm$virtual_dom$VirtualDom$Normal(
						$elm$json$Json$Decode$succeed(_Utils_Tuple0));
				})),
		$dillonkearns$elm_pages$HtmlPrinter$asJsonView(viewHtml));
	if (_v0.$ === 'Ok') {
		var str = _v0.a;
		return A2($dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$nodeToStringWithOptions, $dillonkearns$elm_pages$Test$Html$Internal$ElmHtml$ToString$defaultFormatOptions, str);
	} else {
		var err = _v0.a;
		return 'Error: ' + $elm$json$Json$Decode$errorToString(err);
	}
};
var $elm$core$String$contains = _String_contains;
var $dillonkearns$elm_pages$RenderRequest$isFile = function (rawPath) {
	return A2($elm$core$String$contains, '.', rawPath);
};
var $dillonkearns$elm_pages$Path$join = function (parts) {
	return $dillonkearns$elm_pages$Path$Path(
		A2(
			$elm$core$String$join,
			'/',
			A2($elm$core$List$map, $dillonkearns$elm_pages$Path$normalize, parts)));
};
var $elm$url$Url$Https = {$: 'Https'};
var $dillonkearns$elm_pages$RenderRequest$pathToUrl = function (path) {
	return {fragment: $elm$core$Maybe$Nothing, host: 'TODO', path: path, port_: $elm$core$Maybe$Nothing, protocol: $elm$url$Url$Https, query: $elm$core$Maybe$Nothing};
};
var $dillonkearns$elm_pages$RenderRequest$requestPayloadDecoder = function (config) {
	return A2(
		$elm$json$Json$Decode$field,
		'payload',
		A2(
			$elm$json$Json$Decode$field,
			'path',
			A2(
				$elm$json$Json$Decode$map,
				function (rawPath) {
					var path = $dillonkearns$elm_pages$RenderRequest$dropTrailingIndexHtml(rawPath);
					var route = config.urlToRoute(
						$dillonkearns$elm_pages$RenderRequest$pathToUrl(path));
					var apiRoute = A2(
						$dillonkearns$elm_pages$Internal$ApiRoute$firstMatch,
						A2($elm$core$String$dropLeft, 1, path),
						config.apiRoutes($dillonkearns$elm_pages$HtmlPrinter$htmlToString));
					if (route.$ === 'Just') {
						if ($dillonkearns$elm_pages$RenderRequest$isFile(rawPath)) {
							if (apiRoute.$ === 'Just') {
								var justApi = apiRoute.a;
								return $dillonkearns$elm_pages$RenderRequest$Api(
									_Utils_Tuple2(path, justApi));
							} else {
								return $dillonkearns$elm_pages$RenderRequest$NotFound(
									$dillonkearns$elm_pages$Path$fromString(path));
							}
						} else {
							return $dillonkearns$elm_pages$RenderRequest$Page(
								{
									frontmatter: route,
									path: $dillonkearns$elm_pages$Path$join(
										config.routeToPath(route))
								});
						}
					} else {
						if (apiRoute.$ === 'Just') {
							var justApi = apiRoute.a;
							return $dillonkearns$elm_pages$RenderRequest$Api(
								_Utils_Tuple2(path, justApi));
						} else {
							return $dillonkearns$elm_pages$RenderRequest$NotFound(
								$dillonkearns$elm_pages$Path$fromString(path));
						}
					}
				},
				$elm$json$Json$Decode$string)));
};
var $dillonkearns$elm_pages$RenderRequest$decoder = function (config) {
	return A2(
		$elm$json$Json$Decode$field,
		'request',
		A4(
			$elm$json$Json$Decode$map3,
			F3(
				function (includeHtml, requestThing, payload) {
					return A3($dillonkearns$elm_pages$RenderRequest$SinglePage, includeHtml, requestThing, payload);
				}),
			A2(
				$elm$json$Json$Decode$andThen,
				function (kind) {
					if (kind === 'single-page') {
						return A2(
							$elm$json$Json$Decode$map,
							function (jsonOnly) {
								return jsonOnly ? $dillonkearns$elm_pages$RenderRequest$OnlyJson : $dillonkearns$elm_pages$RenderRequest$HtmlAndJson;
							},
							A2($elm$json$Json$Decode$field, 'jsonOnly', $elm$json$Json$Decode$bool));
					} else {
						return $elm$json$Json$Decode$fail('Unhandled');
					}
				},
				A2($elm$json$Json$Decode$field, 'kind', $elm$json$Json$Decode$string)),
			$dillonkearns$elm_pages$RenderRequest$requestPayloadDecoder(config),
			A2($elm$json$Json$Decode$field, 'payload', $elm$json$Json$Decode$value)));
};
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $dillonkearns$elm_pages$RenderRequest$default = A3(
	$dillonkearns$elm_pages$RenderRequest$SinglePage,
	$dillonkearns$elm_pages$RenderRequest$HtmlAndJson,
	$dillonkearns$elm_pages$RenderRequest$NotFound(
		$dillonkearns$elm_pages$Path$fromString('/error')),
	$elm$json$Json$Encode$null);
var $dillonkearns$elm_pages$TerminalText$blankStyle = {bold: false, color: $elm$core$Maybe$Nothing, underline: false};
var $vito$elm_ansi$Ansi$Print = function (a) {
	return {$: 'Print', a: a};
};
var $vito$elm_ansi$Ansi$Remainder = function (a) {
	return {$: 'Remainder', a: a};
};
var $vito$elm_ansi$Ansi$encodeCode = function (code) {
	if (code.$ === 'Nothing') {
		return '';
	} else {
		var num = code.a;
		return $elm$core$String$fromInt(num);
	}
};
var $vito$elm_ansi$Ansi$encodeCodes = function (codes) {
	return A2(
		$elm$core$String$join,
		';',
		A2($elm$core$List$map, $vito$elm_ansi$Ansi$encodeCode, codes));
};
var $vito$elm_ansi$Ansi$completeParsing = function (parser) {
	switch (parser.a.$) {
		case 'Escaped':
			var _v1 = parser.a;
			var model = parser.b;
			var update = parser.c;
			return A2(
				update,
				$vito$elm_ansi$Ansi$Remainder('\u001B'),
				model);
		case 'CSI':
			var _v2 = parser.a;
			var codes = _v2.a;
			var currentCode = _v2.b;
			var model = parser.b;
			var update = parser.c;
			return A2(
				update,
				$vito$elm_ansi$Ansi$Remainder(
					'\u001B[' + $vito$elm_ansi$Ansi$encodeCodes(
						_Utils_ap(
							codes,
							_List_fromArray(
								[currentCode])))),
				model);
		default:
			if (parser.a.a === '') {
				var model = parser.b;
				return model;
			} else {
				var str = parser.a.a;
				var model = parser.b;
				var update = parser.c;
				return A2(
					update,
					$vito$elm_ansi$Ansi$Print(str),
					model);
			}
	}
};
var $vito$elm_ansi$Ansi$Parser = F3(
	function (a, b, c) {
		return {$: 'Parser', a: a, b: b, c: c};
	});
var $vito$elm_ansi$Ansi$Unescaped = function (a) {
	return {$: 'Unescaped', a: a};
};
var $vito$elm_ansi$Ansi$emptyParser = $vito$elm_ansi$Ansi$Parser(
	$vito$elm_ansi$Ansi$Unescaped(''));
var $vito$elm_ansi$Ansi$CSI = F2(
	function (a, b) {
		return {$: 'CSI', a: a, b: b};
	});
var $vito$elm_ansi$Ansi$CarriageReturn = {$: 'CarriageReturn'};
var $vito$elm_ansi$Ansi$CursorBack = function (a) {
	return {$: 'CursorBack', a: a};
};
var $vito$elm_ansi$Ansi$CursorColumn = function (a) {
	return {$: 'CursorColumn', a: a};
};
var $vito$elm_ansi$Ansi$CursorDown = function (a) {
	return {$: 'CursorDown', a: a};
};
var $vito$elm_ansi$Ansi$CursorForward = function (a) {
	return {$: 'CursorForward', a: a};
};
var $vito$elm_ansi$Ansi$CursorUp = function (a) {
	return {$: 'CursorUp', a: a};
};
var $vito$elm_ansi$Ansi$EraseDisplay = function (a) {
	return {$: 'EraseDisplay', a: a};
};
var $vito$elm_ansi$Ansi$EraseLine = function (a) {
	return {$: 'EraseLine', a: a};
};
var $vito$elm_ansi$Ansi$Escaped = {$: 'Escaped'};
var $vito$elm_ansi$Ansi$Linebreak = {$: 'Linebreak'};
var $vito$elm_ansi$Ansi$RestoreCursorPosition = {$: 'RestoreCursorPosition'};
var $vito$elm_ansi$Ansi$SaveCursorPosition = {$: 'SaveCursorPosition'};
var $vito$elm_ansi$Ansi$Custom = F3(
	function (a, b, c) {
		return {$: 'Custom', a: a, b: b, c: c};
	});
var $vito$elm_ansi$Ansi$SetBackground = function (a) {
	return {$: 'SetBackground', a: a};
};
var $vito$elm_ansi$Ansi$SetForeground = function (a) {
	return {$: 'SetForeground', a: a};
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $vito$elm_ansi$Ansi$Black = {$: 'Black'};
var $vito$elm_ansi$Ansi$Blue = {$: 'Blue'};
var $vito$elm_ansi$Ansi$BrightBlack = {$: 'BrightBlack'};
var $vito$elm_ansi$Ansi$BrightBlue = {$: 'BrightBlue'};
var $vito$elm_ansi$Ansi$BrightCyan = {$: 'BrightCyan'};
var $vito$elm_ansi$Ansi$BrightGreen = {$: 'BrightGreen'};
var $vito$elm_ansi$Ansi$BrightMagenta = {$: 'BrightMagenta'};
var $vito$elm_ansi$Ansi$BrightRed = {$: 'BrightRed'};
var $vito$elm_ansi$Ansi$BrightWhite = {$: 'BrightWhite'};
var $vito$elm_ansi$Ansi$BrightYellow = {$: 'BrightYellow'};
var $vito$elm_ansi$Ansi$Cyan = {$: 'Cyan'};
var $vito$elm_ansi$Ansi$Green = {$: 'Green'};
var $vito$elm_ansi$Ansi$Magenta = {$: 'Magenta'};
var $vito$elm_ansi$Ansi$Red = {$: 'Red'};
var $vito$elm_ansi$Ansi$SetBlink = function (a) {
	return {$: 'SetBlink', a: a};
};
var $vito$elm_ansi$Ansi$SetBold = function (a) {
	return {$: 'SetBold', a: a};
};
var $vito$elm_ansi$Ansi$SetFaint = function (a) {
	return {$: 'SetFaint', a: a};
};
var $vito$elm_ansi$Ansi$SetFraktur = function (a) {
	return {$: 'SetFraktur', a: a};
};
var $vito$elm_ansi$Ansi$SetFramed = function (a) {
	return {$: 'SetFramed', a: a};
};
var $vito$elm_ansi$Ansi$SetInverted = function (a) {
	return {$: 'SetInverted', a: a};
};
var $vito$elm_ansi$Ansi$SetItalic = function (a) {
	return {$: 'SetItalic', a: a};
};
var $vito$elm_ansi$Ansi$SetUnderline = function (a) {
	return {$: 'SetUnderline', a: a};
};
var $vito$elm_ansi$Ansi$White = {$: 'White'};
var $vito$elm_ansi$Ansi$Yellow = {$: 'Yellow'};
var $vito$elm_ansi$Ansi$reset = _List_fromArray(
	[
		$vito$elm_ansi$Ansi$SetForeground($elm$core$Maybe$Nothing),
		$vito$elm_ansi$Ansi$SetBackground($elm$core$Maybe$Nothing),
		$vito$elm_ansi$Ansi$SetBold(false),
		$vito$elm_ansi$Ansi$SetFaint(false),
		$vito$elm_ansi$Ansi$SetItalic(false),
		$vito$elm_ansi$Ansi$SetUnderline(false),
		$vito$elm_ansi$Ansi$SetBlink(false),
		$vito$elm_ansi$Ansi$SetInverted(false),
		$vito$elm_ansi$Ansi$SetFraktur(false),
		$vito$elm_ansi$Ansi$SetFramed(false)
	]);
var $vito$elm_ansi$Ansi$codeActions = function (code) {
	switch (code) {
		case 0:
			return $vito$elm_ansi$Ansi$reset;
		case 1:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBold(true)
				]);
		case 2:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetFaint(true)
				]);
		case 3:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetItalic(true)
				]);
		case 4:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetUnderline(true)
				]);
		case 5:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBlink(true)
				]);
		case 7:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetInverted(true)
				]);
		case 20:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetFraktur(true)
				]);
		case 21:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBold(false)
				]);
		case 22:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetFaint(false),
					$vito$elm_ansi$Ansi$SetBold(false)
				]);
		case 23:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetItalic(false),
					$vito$elm_ansi$Ansi$SetFraktur(false)
				]);
		case 24:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetUnderline(false)
				]);
		case 25:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBlink(false)
				]);
		case 27:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetInverted(false)
				]);
		case 30:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Black))
				]);
		case 31:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Red))
				]);
		case 32:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Green))
				]);
		case 33:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Yellow))
				]);
		case 34:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Blue))
				]);
		case 35:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Magenta))
				]);
		case 36:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Cyan))
				]);
		case 37:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$White))
				]);
		case 39:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground($elm$core$Maybe$Nothing)
				]);
		case 40:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Black))
				]);
		case 41:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Red))
				]);
		case 42:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Green))
				]);
		case 43:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Yellow))
				]);
		case 44:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Blue))
				]);
		case 45:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Magenta))
				]);
		case 46:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$Cyan))
				]);
		case 47:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$White))
				]);
		case 49:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground($elm$core$Maybe$Nothing)
				]);
		case 51:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetFramed(true)
				]);
		case 54:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetFramed(false)
				]);
		case 90:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightBlack))
				]);
		case 91:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightRed))
				]);
		case 92:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightGreen))
				]);
		case 93:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightYellow))
				]);
		case 94:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightBlue))
				]);
		case 95:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightMagenta))
				]);
		case 96:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightCyan))
				]);
		case 97:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetForeground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightWhite))
				]);
		case 100:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightBlack))
				]);
		case 101:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightRed))
				]);
		case 102:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightGreen))
				]);
		case 103:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightYellow))
				]);
		case 104:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightBlue))
				]);
		case 105:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightMagenta))
				]);
		case 106:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightCyan))
				]);
		case 107:
			return _List_fromArray(
				[
					$vito$elm_ansi$Ansi$SetBackground(
					$elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightWhite))
				]);
		default:
			return _List_Nil;
	}
};
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Basics$modBy = _Basics_modBy;
var $vito$elm_ansi$Ansi$colorCode = function (code) {
	switch (code) {
		case 0:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Black);
		case 1:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Red);
		case 2:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Green);
		case 3:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Yellow);
		case 4:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Blue);
		case 5:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Magenta);
		case 6:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Cyan);
		case 7:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$White);
		case 8:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightBlack);
		case 9:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightRed);
		case 10:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightGreen);
		case 11:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightYellow);
		case 12:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightBlue);
		case 13:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightMagenta);
		case 14:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightCyan);
		case 15:
			return $elm$core$Maybe$Just($vito$elm_ansi$Ansi$BrightWhite);
		default:
			if ((code >= 16) && (code < 232)) {
				var scale = function (n) {
					return (!n) ? 0 : (55 + (n * 40));
				};
				var c = code - 16;
				var g = A2($elm$core$Basics$modBy, 6, (c / 6) | 0);
				var r = A2($elm$core$Basics$modBy, 6, (((c / 6) | 0) / 6) | 0);
				var b = A2($elm$core$Basics$modBy, 6, c);
				return $elm$core$Maybe$Just(
					A3(
						$vito$elm_ansi$Ansi$Custom,
						scale(r),
						scale(g),
						scale(b)));
			} else {
				if ((code >= 232) && (code < 256)) {
					var c = ((code - 232) * 10) + 8;
					return $elm$core$Maybe$Just(
						A3($vito$elm_ansi$Ansi$Custom, c, c, c));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
	}
};
var $vito$elm_ansi$Ansi$captureArguments = function (list) {
	_v0$4:
	while (true) {
		if (list.b) {
			if (list.b.b && list.b.b.b) {
				switch (list.a) {
					case 38:
						switch (list.b.a) {
							case 5:
								var _v1 = list.b;
								var _v2 = _v1.b;
								var n = _v2.a;
								var xs = _v2.b;
								return A2(
									$elm$core$List$cons,
									$vito$elm_ansi$Ansi$SetForeground(
										$vito$elm_ansi$Ansi$colorCode(n)),
									$vito$elm_ansi$Ansi$captureArguments(xs));
							case 2:
								if (list.b.b.b.b && list.b.b.b.b.b) {
									var _v5 = list.b;
									var _v6 = _v5.b;
									var r = _v6.a;
									var _v7 = _v6.b;
									var g = _v7.a;
									var _v8 = _v7.b;
									var b = _v8.a;
									var xs = _v8.b;
									var c = A2($elm$core$Basics$clamp, 0, 255);
									return A2(
										$elm$core$List$cons,
										$vito$elm_ansi$Ansi$SetForeground(
											$elm$core$Maybe$Just(
												A3(
													$vito$elm_ansi$Ansi$Custom,
													c(r),
													c(g),
													c(b)))),
										$vito$elm_ansi$Ansi$captureArguments(xs));
								} else {
									break _v0$4;
								}
							default:
								break _v0$4;
						}
					case 48:
						switch (list.b.a) {
							case 5:
								var _v3 = list.b;
								var _v4 = _v3.b;
								var n = _v4.a;
								var xs = _v4.b;
								return A2(
									$elm$core$List$cons,
									$vito$elm_ansi$Ansi$SetBackground(
										$vito$elm_ansi$Ansi$colorCode(n)),
									$vito$elm_ansi$Ansi$captureArguments(xs));
							case 2:
								if (list.b.b.b.b && list.b.b.b.b.b) {
									var _v9 = list.b;
									var _v10 = _v9.b;
									var r = _v10.a;
									var _v11 = _v10.b;
									var g = _v11.a;
									var _v12 = _v11.b;
									var b = _v12.a;
									var xs = _v12.b;
									var c = A2($elm$core$Basics$clamp, 0, 255);
									return A2(
										$elm$core$List$cons,
										$vito$elm_ansi$Ansi$SetBackground(
											$elm$core$Maybe$Just(
												A3(
													$vito$elm_ansi$Ansi$Custom,
													c(r),
													c(g),
													c(b)))),
										$vito$elm_ansi$Ansi$captureArguments(xs));
								} else {
									break _v0$4;
								}
							default:
								break _v0$4;
						}
					default:
						break _v0$4;
				}
			} else {
				break _v0$4;
			}
		} else {
			return _List_Nil;
		}
	}
	var n = list.a;
	var xs = list.b;
	return _Utils_ap(
		$vito$elm_ansi$Ansi$codeActions(n),
		$vito$elm_ansi$Ansi$captureArguments(xs));
};
var $vito$elm_ansi$Ansi$completeBracketed = F2(
	function (_v0, actions) {
		var model = _v0.b;
		var update = _v0.c;
		return A3(
			$vito$elm_ansi$Ansi$Parser,
			$vito$elm_ansi$Ansi$Unescaped(''),
			A3($elm$core$List$foldl, update, model, actions),
			update);
	});
var $vito$elm_ansi$Ansi$completeUnescaped = function (parser) {
	if (parser.a.$ === 'Unescaped') {
		if (parser.a.a === '') {
			var model = parser.b;
			var update = parser.c;
			return model;
		} else {
			var str = parser.a.a;
			var model = parser.b;
			var update = parser.c;
			return A2(
				update,
				$vito$elm_ansi$Ansi$Print(str),
				model);
		}
	} else {
		var model = parser.b;
		return model;
	}
};
var $vito$elm_ansi$Ansi$CursorPosition = F2(
	function (a, b) {
		return {$: 'CursorPosition', a: a, b: b};
	});
var $vito$elm_ansi$Ansi$cursorPosition = function (codes) {
	_v0$5:
	while (true) {
		if (codes.b) {
			if (codes.a.$ === 'Nothing') {
				if (!codes.b.b) {
					var _v4 = codes.a;
					return _List_fromArray(
						[
							A2($vito$elm_ansi$Ansi$CursorPosition, 1, 1)
						]);
				} else {
					if (codes.b.a.$ === 'Nothing') {
						if (!codes.b.b.b) {
							var _v1 = codes.a;
							var _v2 = codes.b;
							var _v3 = _v2.a;
							return _List_fromArray(
								[
									A2($vito$elm_ansi$Ansi$CursorPosition, 1, 1)
								]);
						} else {
							break _v0$5;
						}
					} else {
						if (!codes.b.b.b) {
							var _v7 = codes.a;
							var _v8 = codes.b;
							var col = _v8.a.a;
							return _List_fromArray(
								[
									A2($vito$elm_ansi$Ansi$CursorPosition, 1, col)
								]);
						} else {
							break _v0$5;
						}
					}
				}
			} else {
				if (codes.b.b) {
					if (codes.b.a.$ === 'Nothing') {
						if (!codes.b.b.b) {
							var row = codes.a.a;
							var _v5 = codes.b;
							var _v6 = _v5.a;
							return _List_fromArray(
								[
									A2($vito$elm_ansi$Ansi$CursorPosition, row, 1)
								]);
						} else {
							break _v0$5;
						}
					} else {
						if (!codes.b.b.b) {
							var row = codes.a.a;
							var _v9 = codes.b;
							var col = _v9.a.a;
							return _List_fromArray(
								[
									A2($vito$elm_ansi$Ansi$CursorPosition, row, col)
								]);
						} else {
							break _v0$5;
						}
					}
				} else {
					break _v0$5;
				}
			}
		} else {
			break _v0$5;
		}
	}
	return _List_Nil;
};
var $vito$elm_ansi$Ansi$EraseAll = {$: 'EraseAll'};
var $vito$elm_ansi$Ansi$EraseToBeginning = {$: 'EraseToBeginning'};
var $vito$elm_ansi$Ansi$EraseToEnd = {$: 'EraseToEnd'};
var $vito$elm_ansi$Ansi$eraseMode = function (code) {
	switch (code) {
		case 0:
			return $vito$elm_ansi$Ansi$EraseToEnd;
		case 1:
			return $vito$elm_ansi$Ansi$EraseToBeginning;
		default:
			return $vito$elm_ansi$Ansi$EraseAll;
	}
};
var $elm$core$String$toInt = _String_toInt;
var $vito$elm_ansi$Ansi$parseChar = F2(
	function (_char, parser) {
		switch (parser.a.$) {
			case 'Unescaped':
				var str = parser.a.a;
				var model = parser.b;
				var update = parser.c;
				switch (_char) {
					case '\u000D':
						return A3(
							$vito$elm_ansi$Ansi$Parser,
							$vito$elm_ansi$Ansi$Unescaped(''),
							A2(
								update,
								$vito$elm_ansi$Ansi$CarriageReturn,
								$vito$elm_ansi$Ansi$completeUnescaped(parser)),
							update);
					case '\n':
						return A3(
							$vito$elm_ansi$Ansi$Parser,
							$vito$elm_ansi$Ansi$Unescaped(''),
							A2(
								update,
								$vito$elm_ansi$Ansi$Linebreak,
								$vito$elm_ansi$Ansi$completeUnescaped(parser)),
							update);
					case '\u001B':
						return A3(
							$vito$elm_ansi$Ansi$Parser,
							$vito$elm_ansi$Ansi$Escaped,
							$vito$elm_ansi$Ansi$completeUnescaped(parser),
							update);
					default:
						return A3(
							$vito$elm_ansi$Ansi$Parser,
							$vito$elm_ansi$Ansi$Unescaped(
								_Utils_ap(str, _char)),
							model,
							update);
				}
			case 'Escaped':
				var _v2 = parser.a;
				var model = parser.b;
				var update = parser.c;
				if (_char === '[') {
					return A3(
						$vito$elm_ansi$Ansi$Parser,
						A2($vito$elm_ansi$Ansi$CSI, _List_Nil, $elm$core$Maybe$Nothing),
						model,
						update);
				} else {
					return A3(
						$vito$elm_ansi$Ansi$Parser,
						$vito$elm_ansi$Ansi$Unescaped(_char),
						model,
						update);
				}
			default:
				var _v4 = parser.a;
				var codes = _v4.a;
				var currentCode = _v4.b;
				var model = parser.b;
				var update = parser.c;
				switch (_char) {
					case 'm':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							$vito$elm_ansi$Ansi$captureArguments(
								A2(
									$elm$core$List$map,
									$elm$core$Maybe$withDefault(0),
									_Utils_ap(
										codes,
										_List_fromArray(
											[currentCode])))));
					case 'A':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorUp(
									A2($elm$core$Maybe$withDefault, 1, currentCode))
								]));
					case 'B':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorDown(
									A2($elm$core$Maybe$withDefault, 1, currentCode))
								]));
					case 'C':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorForward(
									A2($elm$core$Maybe$withDefault, 1, currentCode))
								]));
					case 'D':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorBack(
									A2($elm$core$Maybe$withDefault, 1, currentCode))
								]));
					case 'E':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorDown(
									A2($elm$core$Maybe$withDefault, 1, currentCode)),
									$vito$elm_ansi$Ansi$CursorColumn(0)
								]));
					case 'F':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorUp(
									A2($elm$core$Maybe$withDefault, 1, currentCode)),
									$vito$elm_ansi$Ansi$CursorColumn(0)
								]));
					case 'G':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$CursorColumn(
									A2($elm$core$Maybe$withDefault, 0, currentCode))
								]));
					case 'H':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							$vito$elm_ansi$Ansi$cursorPosition(
								_Utils_ap(
									codes,
									_List_fromArray(
										[currentCode]))));
					case 'J':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$EraseDisplay(
									$vito$elm_ansi$Ansi$eraseMode(
										A2($elm$core$Maybe$withDefault, 0, currentCode)))
								]));
					case 'K':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[
									$vito$elm_ansi$Ansi$EraseLine(
									$vito$elm_ansi$Ansi$eraseMode(
										A2($elm$core$Maybe$withDefault, 0, currentCode)))
								]));
					case 'f':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							$vito$elm_ansi$Ansi$cursorPosition(
								_Utils_ap(
									codes,
									_List_fromArray(
										[currentCode]))));
					case 's':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[$vito$elm_ansi$Ansi$SaveCursorPosition]));
					case 'u':
						return A2(
							$vito$elm_ansi$Ansi$completeBracketed,
							parser,
							_List_fromArray(
								[$vito$elm_ansi$Ansi$RestoreCursorPosition]));
					case ';':
						return A3(
							$vito$elm_ansi$Ansi$Parser,
							A2(
								$vito$elm_ansi$Ansi$CSI,
								_Utils_ap(
									codes,
									_List_fromArray(
										[currentCode])),
								$elm$core$Maybe$Nothing),
							model,
							update);
					default:
						var c = _char;
						var _v6 = $elm$core$String$toInt(c);
						if (_v6.$ === 'Just') {
							var num = _v6.a;
							return A3(
								$vito$elm_ansi$Ansi$Parser,
								A2(
									$vito$elm_ansi$Ansi$CSI,
									codes,
									$elm$core$Maybe$Just(
										(A2($elm$core$Maybe$withDefault, 0, currentCode) * 10) + num)),
								model,
								update);
						} else {
							return A2($vito$elm_ansi$Ansi$completeBracketed, parser, _List_Nil);
						}
				}
		}
	});
var $vito$elm_ansi$Ansi$parseInto = F3(
	function (model, update, ansi) {
		return $vito$elm_ansi$Ansi$completeParsing(
			A3(
				$elm$core$List$foldl,
				$vito$elm_ansi$Ansi$parseChar,
				A2($vito$elm_ansi$Ansi$emptyParser, model, update),
				A2($elm$core$String$split, '', ansi)));
	});
var $dillonkearns$elm_pages$TerminalText$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $dillonkearns$elm_pages$TerminalText$parseInto = F2(
	function (action, _v0) {
		var pendingStyle = _v0.a;
		var soFar = _v0.b;
		switch (action.$) {
			case 'Print':
				var string = action.a;
				return _Utils_Tuple2(
					$dillonkearns$elm_pages$TerminalText$blankStyle,
					A2(
						$elm$core$List$cons,
						A2($dillonkearns$elm_pages$TerminalText$Style, pendingStyle, string),
						soFar));
			case 'Remainder':
				return _Utils_Tuple2(pendingStyle, soFar);
			case 'SetForeground':
				var maybeColor = action.a;
				if (maybeColor.$ === 'Just') {
					var newColor = maybeColor.a;
					return _Utils_Tuple2(
						_Utils_update(
							pendingStyle,
							{
								color: $elm$core$Maybe$Just(newColor)
							}),
						soFar);
				} else {
					return _Utils_Tuple2($dillonkearns$elm_pages$TerminalText$blankStyle, soFar);
				}
			case 'SetBold':
				var bool = action.a;
				return _Utils_Tuple2(
					_Utils_update(
						pendingStyle,
						{bold: bool}),
					soFar);
			case 'SetFaint':
				return _Utils_Tuple2(pendingStyle, soFar);
			case 'SetItalic':
				return _Utils_Tuple2(pendingStyle, soFar);
			case 'SetUnderline':
				var bool = action.a;
				return _Utils_Tuple2(
					_Utils_update(
						pendingStyle,
						{underline: bool}),
					soFar);
			case 'SetBackground':
				return _Utils_Tuple2(pendingStyle, soFar);
			case 'Linebreak':
				if (soFar.b) {
					var next = soFar.a;
					var rest = soFar.b;
					return _Utils_Tuple2(
						pendingStyle,
						A2(
							$elm$core$List$cons,
							A2($dillonkearns$elm_pages$TerminalText$Style, $dillonkearns$elm_pages$TerminalText$blankStyle, '\n'),
							A2($elm$core$List$cons, next, rest)));
				} else {
					return _Utils_Tuple2(pendingStyle, soFar);
				}
			default:
				return _Utils_Tuple2(pendingStyle, soFar);
		}
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $dillonkearns$elm_pages$TerminalText$fromAnsiString = function (ansiString) {
	return $elm$core$List$reverse(
		A3(
			$vito$elm_ansi$Ansi$parseInto,
			_Utils_Tuple2($dillonkearns$elm_pages$TerminalText$blankStyle, _List_Nil),
			$dillonkearns$elm_pages$TerminalText$parseInto,
			ansiString).b);
};
var $dillonkearns$elm_pages$Pages$ContentCache$Parsed = function (a) {
	return {$: 'Parsed', a: a};
};
var $elm$core$Dict$singleton = F2(
	function (key, value) {
		return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
	});
var $dillonkearns$elm_pages$Pages$ContentCache$init = function (maybeInitialPageContent) {
	if (maybeInitialPageContent.$ === 'Nothing') {
		return $elm$core$Dict$empty;
	} else {
		var _v1 = maybeInitialPageContent.a;
		var urls = _v1.a;
		var contentJson = _v1.b;
		return A2(
			$elm$core$Dict$singleton,
			urls,
			$dillonkearns$elm_pages$Pages$ContentCache$Parsed(contentJson));
	}
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$StaticResponses = function (a) {
	return {$: 'StaticResponses', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$error = $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$StaticResponses($elm$core$Dict$empty);
var $dillonkearns$elm_pages$SecretsDict$Unmasked = function (a) {
	return {$: 'Unmasked', a: a};
};
var $dillonkearns$elm_pages$SecretsDict$decoder = A2(
	$elm$json$Json$Decode$map,
	$dillonkearns$elm_pages$SecretsDict$Unmasked,
	$elm$json$Json$Decode$dict($elm$json$Json$Decode$string));
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$flagsDecoder = A4(
	$elm$json$Json$Decode$map3,
	F3(
		function (secrets, staticHttpCache, isDevServer) {
			return {isDevServer: isDevServer, secrets: secrets, staticHttpCache: staticHttpCache};
		}),
	A2($elm$json$Json$Decode$field, 'secrets', $dillonkearns$elm_pages$SecretsDict$decoder),
	A2(
		$elm$json$Json$Decode$field,
		'staticHttpCache',
		$elm$json$Json$Decode$dict(
			A2($elm$json$Json$Decode$map, $elm$core$Maybe$Just, $elm$json$Json$Decode$string))),
	A2(
		$elm$json$Json$Decode$map,
		function (mode) {
			return mode === 'dev-server';
		},
		A2($elm$json$Json$Decode$field, 'mode', $elm$json$Json$Decode$string)));
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute = F2(
	function (a, b) {
		return {$: 'ApiRoute', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Request = F2(
	function (a, b) {
		return {$: 'Request', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError = function (a) {
	return {$: 'RequestError', a: a};
};
var $elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2($elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var $elm$core$Dict$size = function (dict) {
	return A2($elm$core$Dict$sizeHelp, 0, dict);
};
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				$elm$core$Dict$Red,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr.$ === 'Black') {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					$elm$core$Dict$Black,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === 'RBNode_elm_builtin') {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === 'RBNode_elm_builtin') {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === 'RBNode_elm_builtin') {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === 'RBNode_elm_builtin') && (_v0.a.$ === 'Red')) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, $elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (_v0.$ === 'Just') {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm_community$dict_extra$Dict$Extra$insertDedupe = F4(
	function (combine, key, value, dict) {
		var _with = function (mbValue) {
			if (mbValue.$ === 'Just') {
				var oldValue = mbValue.a;
				return $elm$core$Maybe$Just(
					A2(combine, oldValue, value));
			} else {
				return $elm$core$Maybe$Just(value);
			}
		};
		return A3($elm$core$Dict$update, key, _with, dict);
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse = function (a) {
	return {$: 'DistilledResponse', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error = function (a) {
	return {$: 'Error', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse = function (a) {
	return {$: 'StripResponse', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse = {$: 'UseRawResponse'};
var $dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder = F2(
	function (a, b) {
		return {$: 'OptimizedDecoder', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder = function (a) {
	return {$: 'Decoder', a: a};
};
var $mgold$elm_nonempty_list$List$Nonempty$Nonempty = F2(
	function (a, b) {
		return {$: 'Nonempty', a: a, b: b};
	});
var $mgold$elm_nonempty_list$List$Nonempty$append = F2(
	function (_v0, _v1) {
		var x = _v0.a;
		var xs = _v0.b;
		var y = _v1.a;
		var ys = _v1.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			x,
			_Utils_ap(
				xs,
				A2($elm$core$List$cons, y, ys)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$map2 = F3(
	function (f, _v0, _v1) {
		var decoderFnA = _v0.a;
		var decoderFnB = _v1.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				var _v2 = decoderFnA(json);
				if (_v2.b.$ === 'Ok') {
					var annVal = _v2.a;
					var accA = _v2.b.a;
					var _v3 = decoderFnB(annVal);
					if (_v3.b.$ === 'Ok') {
						var annValB = _v3.a;
						var accB = _v3.b.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Ok(
								{
									value: A2(f, accA.value, accB.value),
									warnings: _Utils_ap(accA.warnings, accB.warnings)
								}));
					} else {
						var annValB = _v3.a;
						var e = _v3.b.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Err(e));
					}
				} else {
					var annVal = _v2.a;
					var e = _v2.b.a;
					var _v4 = decoderFnB(annVal);
					if (_v4.b.$ === 'Ok') {
						var annValB = _v4.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Err(e));
					} else {
						var annValB = _v4.a;
						var e2 = _v4.b.a;
						return _Utils_Tuple2(
							annValB,
							$elm$core$Result$Err(
								A2($mgold$elm_nonempty_list$List$Nonempty$append, e, e2)));
					}
				}
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map2 = F3(
	function (f, _v0, _v1) {
		var jdA = _v0.a;
		var jdeA = _v0.b;
		var jdB = _v1.a;
		var jdeB = _v1.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A3($elm$json$Json$Decode$map2, f, jdA, jdB),
			A3($zwilias$json_decode_exploration$Json$Decode$Exploration$map2, f, jdeA, jdeB));
	});
var $dillonkearns$elm_pages$TerminalText$red = function (inner) {
	return A2(
		$dillonkearns$elm_pages$TerminalText$Style,
		_Utils_update(
			$dillonkearns$elm_pages$TerminalText$blankStyle,
			{
				color: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Red)
			}),
		inner);
};
var $dillonkearns$elm_pages$TerminalText$text = function (value) {
	return A2($dillonkearns$elm_pages$TerminalText$Style, $dillonkearns$elm_pages$TerminalText$blankStyle, value);
};
var $dillonkearns$elm_pages$TerminalText$yellow = function (inner) {
	return A2(
		$dillonkearns$elm_pages$TerminalText$Style,
		_Utils_update(
			$dillonkearns$elm_pages$TerminalText$blankStyle,
			{
				color: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Yellow)
			}),
		inner);
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$merge = F3(
	function (key, whatToDo1, whatToDo2) {
		var _v0 = _Utils_Tuple2(whatToDo1, whatToDo2);
		_v0$1:
		while (true) {
			_v0$2:
			while (true) {
				_v0$4:
				while (true) {
					_v0$5:
					while (true) {
						_v0$6:
						while (true) {
							_v0$7:
							while (true) {
								switch (_v0.a.$) {
									case 'Error':
										switch (_v0.b.$) {
											case 'Error':
												var buildErrors1 = _v0.a.a;
												var buildErrors2 = _v0.b.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(
													_Utils_ap(buildErrors1, buildErrors2));
											case 'StripResponse':
												break _v0$1;
											case 'CliOnly':
												break _v0$1;
											case 'DistilledResponse':
												break _v0$1;
											default:
												break _v0$1;
										}
									case 'StripResponse':
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												var strip1 = _v0.a.a;
												var strip2 = _v0.b.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(
													A3(
														$dillonkearns$elm_pages$OptimizedDecoder$map2,
														F2(
															function (_v1, _v2) {
																return _Utils_Tuple0;
															}),
														strip1,
														strip2));
											case 'CliOnly':
												break _v0$4;
											case 'DistilledResponse':
												break _v0$4;
											default:
												break _v0$4;
										}
									case 'CliOnly':
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												break _v0$5;
											case 'CliOnly':
												break _v0$6;
											case 'DistilledResponse':
												break _v0$7;
											default:
												break _v0$7;
										}
									case 'DistilledResponse':
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												break _v0$5;
											case 'CliOnly':
												break _v0$6;
											case 'DistilledResponse':
												var distilled1 = _v0.a.a;
												var distilled2 = _v0.b.a;
												return _Utils_eq(
													A2($elm$json$Json$Encode$encode, 0, distilled1),
													A2($elm$json$Json$Encode$encode, 0, distilled2)) ? $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(distilled1) : $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(
													_List_fromArray(
														[
															{
															fatal: true,
															message: _List_fromArray(
																[
																	$dillonkearns$elm_pages$TerminalText$text('I encountered DataSource.distill with two matching keys that had differing encoded values.\n\n'),
																	$dillonkearns$elm_pages$TerminalText$text('Look for '),
																	$dillonkearns$elm_pages$TerminalText$red('DataSource.distill'),
																	$dillonkearns$elm_pages$TerminalText$text(' with the key '),
																	$dillonkearns$elm_pages$TerminalText$red('\"' + (key + '\"')),
																	$dillonkearns$elm_pages$TerminalText$text('\n\n'),
																	$dillonkearns$elm_pages$TerminalText$yellow('The first encoded value was:\n'),
																	$dillonkearns$elm_pages$TerminalText$text(
																	A2($elm$json$Json$Encode$encode, 2, distilled1)),
																	$dillonkearns$elm_pages$TerminalText$text('\n\n-------------------------------\n\n'),
																	$dillonkearns$elm_pages$TerminalText$yellow('The second encoded value was:\n'),
																	$dillonkearns$elm_pages$TerminalText$text(
																	A2($elm$json$Json$Encode$encode, 2, distilled2))
																]),
															path: '',
															title: 'Non-Unique Distill Keys'
														}
														]));
											default:
												var distilled1 = _v0.a.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(distilled1);
										}
									default:
										switch (_v0.b.$) {
											case 'Error':
												break _v0$2;
											case 'StripResponse':
												break _v0$5;
											case 'CliOnly':
												break _v0$6;
											case 'DistilledResponse':
												var distilled1 = _v0.b.a;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$DistilledResponse(distilled1);
											default:
												var _v5 = _v0.a;
												var _v6 = _v0.b;
												return $dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse;
										}
								}
							}
							var _v4 = _v0.a;
							return whatToDo2;
						}
						var _v3 = _v0.b;
						return whatToDo1;
					}
					var strip1 = _v0.b.a;
					return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(strip1);
				}
				var strip1 = _v0.a.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(strip1);
			}
			var buildErrors1 = _v0.b.a;
			return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(buildErrors1);
		}
		var buildErrors1 = _v0.a.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Error(buildErrors1);
	});
var $dillonkearns$elm_pages$DataSource$uniqueInsertAll = F2(
	function (dictToDedupeMerge, startingDict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, value, acc) {
					return A4(
						$elm_community$dict_extra$Dict$Extra$insertDedupe,
						$dillonkearns$elm_pages$Pages$StaticHttpRequest$merge(key),
						key,
						value,
						acc);
				}),
			startingDict,
			dictToDedupeMerge);
	});
var $dillonkearns$elm_pages$DataSource$combineReducedDicts = F2(
	function (dict1, dict2) {
		return (_Utils_cmp(
			$elm$core$Dict$size(dict1),
			$elm$core$Dict$size(dict2)) > 0) ? A2($dillonkearns$elm_pages$DataSource$uniqueInsertAll, dict2, dict1) : A2($dillonkearns$elm_pages$DataSource$uniqueInsertAll, dict1, dict2);
	});
var $dillonkearns$elm_pages$DataSource$map2 = F3(
	function (fn, request1, request2) {
		var _v0 = _Utils_Tuple2(request1, request2);
		_v0$1:
		while (true) {
			switch (_v0.a.$) {
				case 'RequestError':
					var error = _v0.a.a;
					return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
				case 'Request':
					switch (_v0.b.$) {
						case 'RequestError':
							break _v0$1;
						case 'Request':
							var _v1 = _v0.a;
							var newDict1 = _v1.a;
							var _v2 = _v1.b;
							var urls1 = _v2.a;
							var lookupFn1 = _v2.b;
							var _v3 = _v0.b;
							var newDict2 = _v3.a;
							var _v4 = _v3.b;
							var urls2 = _v4.a;
							var lookupFn2 = _v4.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
								A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, newDict1, newDict2),
								_Utils_Tuple2(
									_Utils_ap(urls1, urls2),
									F3(
										function (keepOrDiscard, appType, rawResponses) {
											return A3(
												$dillonkearns$elm_pages$DataSource$map2,
												fn,
												A3(lookupFn1, keepOrDiscard, appType, rawResponses),
												A3(lookupFn2, keepOrDiscard, appType, rawResponses));
										})));
						default:
							var _v5 = _v0.a;
							var dict1 = _v5.a;
							var _v6 = _v5.b;
							var urls1 = _v6.a;
							var lookupFn1 = _v6.b;
							var _v7 = _v0.b;
							var stripped2 = _v7.a;
							var value2 = _v7.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
								dict1,
								_Utils_Tuple2(
									urls1,
									F3(
										function (keepOrDiscard, appType, rawResponses) {
											return A3(
												$dillonkearns$elm_pages$DataSource$map2,
												fn,
												A3(lookupFn1, keepOrDiscard, appType, rawResponses),
												A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped2, value2));
										})));
					}
				default:
					switch (_v0.b.$) {
						case 'RequestError':
							break _v0$1;
						case 'Request':
							var _v8 = _v0.a;
							var stripped2 = _v8.a;
							var value2 = _v8.b;
							var _v9 = _v0.b;
							var dict1 = _v9.a;
							var _v10 = _v9.b;
							var urls1 = _v10.a;
							var lookupFn1 = _v10.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
								dict1,
								_Utils_Tuple2(
									urls1,
									F3(
										function (keepOrDiscard, appType, rawResponses) {
											return A3(
												$dillonkearns$elm_pages$DataSource$map2,
												fn,
												A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped2, value2),
												A3(lookupFn1, keepOrDiscard, appType, rawResponses));
										})));
						default:
							var _v11 = _v0.a;
							var stripped1 = _v11.a;
							var value1 = _v11.b;
							var _v12 = _v0.b;
							var stripped2 = _v12.a;
							var value2 = _v12.b;
							return A2(
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute,
								A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, stripped1, stripped2),
								A2(fn, value1, value2));
					}
			}
		}
		var error = _v0.b.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$ApiResponse = {$: 'ApiResponse'};
var $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli = {$: 'Cli'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Continue = F3(
	function (a, b, c) {
		return {$: 'Continue', a: a, b: b, c: c};
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Errors = function (a) {
	return {$: 'Errors', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish = function (a) {
	return {$: 'Finish', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Page = function (a) {
	return {$: 'Page', a: a};
};
var $elm_community$dict_extra$Dict$Extra$any = F2(
	function (predicate, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, acc) {
					return acc ? acc : (A2(predicate, k, v) ? true : false);
				}),
			false,
			dict);
	});
var $dillonkearns$elm_pages$DataSource$addUrls = F2(
	function (urlsToAdd, requestInfo) {
		switch (requestInfo.$) {
			case 'RequestError':
				var error = requestInfo.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
			case 'Request':
				var stripped = requestInfo.a;
				var _v1 = requestInfo.b;
				var initialUrls = _v1.a;
				var _function = _v1.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					stripped,
					_Utils_Tuple2(
						_Utils_ap(initialUrls, urlsToAdd),
						_function));
			default:
				var stripped = requestInfo.a;
				var value = requestInfo.b;
				return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped, value);
		}
	});
var $dillonkearns$elm_pages$DataSource$lookupHelp = F5(
	function (strippedSoFar, keepOrDiscard, appType, requestInfo, rawResponses) {
		lookupHelp:
		while (true) {
			switch (requestInfo.$) {
				case 'RequestError':
					var error = requestInfo.a;
					return $elm$core$Result$Err(error);
				case 'Request':
					var strippedResponses = requestInfo.a;
					var _v1 = requestInfo.b;
					var urls = _v1.a;
					var lookupFn = _v1.b;
					var $temp$strippedSoFar = A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, strippedResponses, strippedSoFar),
						$temp$keepOrDiscard = keepOrDiscard,
						$temp$appType = appType,
						$temp$requestInfo = A2(
						$dillonkearns$elm_pages$DataSource$addUrls,
						urls,
						A3(lookupFn, keepOrDiscard, appType, rawResponses)),
						$temp$rawResponses = rawResponses;
					strippedSoFar = $temp$strippedSoFar;
					keepOrDiscard = $temp$keepOrDiscard;
					appType = $temp$appType;
					requestInfo = $temp$requestInfo;
					rawResponses = $temp$rawResponses;
					continue lookupHelp;
				default:
					var stripped = requestInfo.a;
					var value = requestInfo.b;
					return $elm$core$Result$Ok(
						_Utils_Tuple2(
							A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, stripped, strippedSoFar),
							value));
			}
		}
	});
var $dillonkearns$elm_pages$DataSource$lookup = $dillonkearns$elm_pages$DataSource$lookupHelp($elm$core$Dict$empty);
var $dillonkearns$elm_pages$DataSource$lookupUrls = function (requestInfo) {
	switch (requestInfo.$) {
		case 'RequestError':
			return _List_Nil;
		case 'Request':
			var _v1 = requestInfo.b;
			var urls = _v1.a;
			return urls;
		default:
			return _List_Nil;
	}
};
var $dillonkearns$elm_pages$DataSource$andThen = F2(
	function (fn, requestInfo) {
		return A2(
			$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
			$elm$core$Dict$empty,
			_Utils_Tuple2(
				$dillonkearns$elm_pages$DataSource$lookupUrls(requestInfo),
				F3(
					function (keepOrDiscard, appType, rawResponses) {
						return function (result) {
							if (result.$ === 'Err') {
								var error = result.a;
								return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
							} else {
								var _v1 = result.a;
								var strippedResponses = _v1.a;
								var value = _v1.b;
								var _v2 = fn(value);
								switch (_v2.$) {
									case 'Request':
										var dict = _v2.a;
										var _v3 = _v2.b;
										var values = _v3.a;
										var _function = _v3.b;
										return A2(
											$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
											A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, strippedResponses, dict),
											_Utils_Tuple2(values, _function));
									case 'RequestError':
										var error = _v2.a;
										return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
									default:
										var dict = _v2.a;
										var finalValue = _v2.b;
										return A2(
											$dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute,
											A2($dillonkearns$elm_pages$DataSource$combineReducedDicts, strippedResponses, dict),
											finalValue);
								}
							}
						}(
							A4($dillonkearns$elm_pages$DataSource$lookup, keepOrDiscard, appType, requestInfo, rawResponses));
					})));
	});
var $dillonkearns$elm_pages$DataSource$succeed = function (value) {
	return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, $elm$core$Dict$empty, value);
};
var $dillonkearns$elm_pages$DataSource$combine = A2(
	$elm$core$List$foldr,
	$dillonkearns$elm_pages$DataSource$map2($elm$core$List$cons),
	$dillonkearns$elm_pages$DataSource$succeed(_List_Nil));
var $dillonkearns$elm_pages$DataSource$map = F2(
	function (fn, requestInfo) {
		switch (requestInfo.$) {
			case 'RequestError':
				var error = requestInfo.a;
				return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
			case 'Request':
				var partiallyStripped = requestInfo.a;
				var _v1 = requestInfo.b;
				var urls = _v1.a;
				var lookupFn = _v1.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					partiallyStripped,
					_Utils_Tuple2(
						urls,
						F3(
							function (keepOrDiscard, appType, rawResponses) {
								return A2(
									$dillonkearns$elm_pages$DataSource$map,
									fn,
									A3(lookupFn, keepOrDiscard, appType, rawResponses));
							})));
			default:
				var stripped = requestInfo.a;
				var value = requestInfo.b;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute,
					stripped,
					fn(value));
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$buildTimeFilesRequest = function (config) {
	return A2(
		$dillonkearns$elm_pages$DataSource$map,
		$elm$core$List$concat,
		$dillonkearns$elm_pages$DataSource$combine(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var handler = _v0.a;
					return A2(
						$dillonkearns$elm_pages$DataSource$andThen,
						function (paths) {
							return $dillonkearns$elm_pages$DataSource$combine(
								A2(
									$elm$core$List$map,
									function (path) {
										return A2(
											$dillonkearns$elm_pages$DataSource$map,
											function (maybeResponse) {
												if (maybeResponse.$ === 'Nothing') {
													return $elm$core$Result$Err('');
												} else {
													var response = maybeResponse.a;
													return $elm$core$Result$Ok(
														{
															content: response.body,
															path: A2($elm$core$String$split, '/', path)
														});
												}
											},
											handler.matchesToResponse(path));
									},
									paths));
						},
						handler.buildTimeRoutes);
				},
				config.apiRoutes($dillonkearns$elm_pages$HtmlPrinter$htmlToString))));
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Complete = {$: 'Complete'};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$HasPermanentError = function (a) {
	return {$: 'HasPermanentError', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$Incomplete = function (a) {
	return {$: 'Incomplete', a: a};
};
var $dillonkearns$elm_pages$KeepOrDiscard$Keep = {$: 'Keep'};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$cacheRequestResolutionHelp = F4(
	function (foundUrls, appType, rawResponses, request) {
		cacheRequestResolutionHelp:
		while (true) {
			switch (request.$) {
				case 'RequestError':
					var error = request.a;
					switch (error.$) {
						case 'MissingHttpResponse':
							return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Incomplete(foundUrls);
						case 'DecoderError':
							return $dillonkearns$elm_pages$Pages$StaticHttpRequest$HasPermanentError(error);
						default:
							return $dillonkearns$elm_pages$Pages$StaticHttpRequest$HasPermanentError(error);
					}
				case 'Request':
					var _v2 = request.b;
					var urlList = _v2.a;
					var lookupFn = _v2.b;
					var $temp$foundUrls = urlList,
						$temp$appType = appType,
						$temp$rawResponses = rawResponses,
						$temp$request = A3(lookupFn, $dillonkearns$elm_pages$KeepOrDiscard$Keep, appType, rawResponses);
					foundUrls = $temp$foundUrls;
					appType = $temp$appType;
					rawResponses = $temp$rawResponses;
					request = $temp$request;
					continue cacheRequestResolutionHelp;
				default:
					return $dillonkearns$elm_pages$Pages$StaticHttpRequest$Complete;
			}
		}
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$cacheRequestResolution = F3(
	function (appType, request, rawResponses) {
		return A4($dillonkearns$elm_pages$Pages$StaticHttpRequest$cacheRequestResolutionHelp, _List_Nil, appType, rawResponses, request);
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$cliDictKey = '////elm-pages-CLI////';
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var $elm$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2($elm$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});
var $elm$core$Set$diff = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$diff, dict1, dict2));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$combineMultipleErrors = function (results) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (result, soFarResult) {
				if (soFarResult.$ === 'Ok') {
					var soFarOk = soFarResult.a;
					if (result.$ === 'Ok') {
						var value = result.a;
						return $elm$core$Result$Ok(
							A2($elm$core$List$cons, value, soFarOk));
					} else {
						var error_ = result.a;
						return $elm$core$Result$Err(
							_List_fromArray(
								[error_]));
					}
				} else {
					var errorsSoFar = soFarResult.a;
					if (result.$ === 'Ok') {
						return $elm$core$Result$Err(errorsSoFar);
					} else {
						var error_ = result.a;
						return $elm$core$Result$Err(
							A2($elm$core$List$cons, error_, errorsSoFar));
					}
				}
			}),
		$elm$core$Result$Ok(_List_Nil),
		results);
};
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (ra.$ === 'Ok') {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (result.$ === 'Ok') {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$combineMultipleErrors = function (results) {
	return A3(
		$elm$core$List$foldr,
		F2(
			function (result, soFarResult) {
				if (soFarResult.$ === 'Ok') {
					var soFarOk = soFarResult.a;
					if (result.$ === 'Ok') {
						var value = result.a;
						return $elm$core$Result$Ok(
							A2($elm$core$List$cons, value, soFarOk));
					} else {
						var error_ = result.a;
						return $elm$core$Result$Err(error_);
					}
				} else {
					var errorsSoFar = soFarResult.a;
					if (result.$ === 'Ok') {
						return $elm$core$Result$Err(errorsSoFar);
					} else {
						var error_ = result.a;
						return $elm$core$Result$Err(
							_Utils_ap(error_, errorsSoFar));
					}
				}
			}),
		$elm$core$Result$Ok(_List_Nil),
		results);
};
var $dillonkearns$elm_pages$Internal$OptimizedDecoder$jde = function (_v0) {
	var jde_ = _v0.b;
	return jde_;
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here = function (a) {
	return {$: 'Here', a: a};
};
var $elm$json$Json$Decode$decodeString = _Json_runOnString;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Array = F2(
	function (a, b) {
		return {$: 'Array', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Bool = F2(
	function (a, b) {
		return {$: 'Bool', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Null = function (a) {
	return {$: 'Null', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Number = F2(
	function (a, b) {
		return {$: 'Number', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Object = F2(
	function (a, b) {
		return {$: 'Object', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$String = F2(
	function (a, b) {
		return {$: 'String', a: a, b: b};
	});
var $elm$json$Json$Decode$float = _Json_decodeFloat;
var $elm$json$Json$Decode$lazy = function (thunk) {
	return A2(
		$elm$json$Json$Decode$andThen,
		thunk,
		$elm$json$Json$Decode$succeed(_Utils_Tuple0));
};
var $elm$json$Json$Decode$null = _Json_decodeNull;
function $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder() {
	return $elm$json$Json$Decode$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$String(false),
				$elm$json$Json$Decode$string),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Number(false),
				$elm$json$Json$Decode$float),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Bool(false),
				$elm$json$Json$Decode$bool),
				$elm$json$Json$Decode$null(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Null(false)),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Array(false),
				$elm$json$Json$Decode$list(
					A2(
						$elm$json$Json$Decode$map,
						$elm$core$Tuple$pair(false),
						$elm$json$Json$Decode$lazy(
							function (_v0) {
								return $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
							})))),
				A2(
				$elm$json$Json$Decode$map,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Object(false),
				A2(
					$elm$json$Json$Decode$map,
					$elm$core$List$map(
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple3(false, k, v);
						}),
					$elm$json$Json$Decode$keyValuePairs(
						$elm$json$Json$Decode$lazy(
							function (_v2) {
								return $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
							}))))
			]));
}
try {
	var $zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder = $zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder();
	$zwilias$json_decode_exploration$Json$Decode$Exploration$cyclic$annotatedDecoder = function () {
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder;
	};
} catch ($) {
	throw 'Some top-level definitions from `Json.Decode.Exploration` are causing infinite recursion:\n\n  ┌─────┐\n  │    annotatedDecoder\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decode = $elm$json$Json$Decode$decodeValue($zwilias$json_decode_exploration$Json$Decode$Exploration$annotatedDecoder);
var $elm$json$Json$Encode$bool = _Json_wrap;
var $elm$json$Json$Encode$float = _Json_wrap;
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(_Utils_Tuple0),
				entries));
	});
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(_Utils_Tuple0),
			pairs));
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$minifyArray = function (entries) {
	return A2(
		$elm$json$Json$Encode$list,
		$elm$core$Basics$identity,
		A2(
			$elm$core$List$filterMap,
			function (_v2) {
				var used = _v2.a;
				var entry = _v2.b;
				return used ? $elm$core$Maybe$Just(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$stripAnnotatedValue(entry)) : $elm$core$Maybe$Nothing;
			},
			entries));
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$minifyObject = function (entries) {
	return $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$filterMap,
			function (_v1) {
				var used = _v1.a;
				var f = _v1.b;
				var entry = _v1.c;
				return used ? $elm$core$Maybe$Just(
					_Utils_Tuple2(
						f,
						$zwilias$json_decode_exploration$Json$Decode$Exploration$stripAnnotatedValue(entry))) : $elm$core$Maybe$Nothing;
			},
			entries));
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$stripAnnotatedValue = function (annVal) {
	switch (annVal.$) {
		case 'String':
			if (annVal.a) {
				var v = annVal.b;
				return $elm$json$Json$Encode$string(v);
			} else {
				return $elm$json$Json$Encode$string('');
			}
		case 'Number':
			if (annVal.a) {
				var v = annVal.b;
				return $elm$json$Json$Encode$float(v);
			} else {
				return $elm$json$Json$Encode$float(0);
			}
		case 'Bool':
			var v = annVal.b;
			return $elm$json$Json$Encode$bool(v);
		case 'Null':
			return $elm$json$Json$Encode$null;
		case 'Array':
			if (annVal.a) {
				var entries = annVal.b;
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$minifyArray(entries);
			} else {
				return A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, _List_Nil);
			}
		default:
			if (annVal.a) {
				var entries = annVal.b;
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$minifyObject(entries);
			} else {
				return $elm$json$Json$Encode$object(_List_Nil);
			}
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$stripValue = F2(
	function (_v0, val) {
		var decoderFn = _v0.a;
		var _v1 = $zwilias$json_decode_exploration$Json$Decode$Exploration$decode(val);
		if (_v1.$ === 'Err') {
			return $elm$core$Result$Err(
				A2(
					$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Failure, 'Bad json', $elm$core$Maybe$Nothing)),
					_List_Nil));
		} else {
			var json = _v1.a;
			var _v2 = decoderFn(json);
			if (_v2.b.$ === 'Ok') {
				var annVal = _v2.a;
				return $elm$core$Result$Ok(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$stripAnnotatedValue(annVal));
			} else {
				var e = _v2.b.a;
				return $elm$core$Result$Err(e);
			}
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$stripString = F2(
	function (decoder, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$json$Json$Decode$value, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err(
				A2(
					$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Failure, 'Bad json', $elm$core$Maybe$Nothing)),
					_List_Nil));
		} else {
			var v = _v0.a;
			return A2(
				$elm$core$Result$map,
				$elm$json$Json$Encode$encode(0),
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$stripValue, decoder, v));
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$strippedResponsesHelp = F4(
	function (usedSoFar, appType, request, rawResponses) {
		strippedResponsesHelp:
		while (true) {
			switch (request.$) {
				case 'RequestError':
					return usedSoFar;
				case 'Request':
					var partiallyStrippedResponses = request.a;
					var _v1 = request.b;
					var lookupFn = _v1.b;
					var _v2 = A3(lookupFn, $dillonkearns$elm_pages$KeepOrDiscard$Keep, appType, rawResponses);
					var followupRequest = _v2;
					var $temp$usedSoFar = A6(
						$elm$core$Dict$merge,
						F2(
							function (key, a) {
								return A2($elm$core$Dict$insert, key, a);
							}),
						F3(
							function (key, a, b) {
								return A2(
									$elm$core$Dict$insert,
									key,
									A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$merge, key, a, b));
							}),
						F2(
							function (key, b) {
								return A2($elm$core$Dict$insert, key, b);
							}),
						usedSoFar,
						partiallyStrippedResponses,
						$elm$core$Dict$empty),
						$temp$appType = appType,
						$temp$request = followupRequest,
						$temp$rawResponses = rawResponses;
					usedSoFar = $temp$usedSoFar;
					appType = $temp$appType;
					request = $temp$request;
					rawResponses = $temp$rawResponses;
					continue strippedResponsesHelp;
				default:
					var partiallyStrippedResponses = request.a;
					return A6(
						$elm$core$Dict$merge,
						F2(
							function (key, a) {
								return A2($elm$core$Dict$insert, key, a);
							}),
						F3(
							function (key, a, b) {
								return A2(
									$elm$core$Dict$insert,
									key,
									A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$merge, key, a, b));
							}),
						F2(
							function (key, b) {
								return A2($elm$core$Dict$insert, key, b);
							}),
						usedSoFar,
						partiallyStrippedResponses,
						$elm$core$Dict$empty);
			}
		}
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$strippedResponses = $dillonkearns$elm_pages$Pages$StaticHttpRequest$strippedResponsesHelp($elm$core$Dict$empty);
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (result.$ === 'Ok') {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$strippedResponsesEncode = F3(
	function (appType, rawRequest, requestsAndPending) {
		return A2(
			$elm$core$Result$map,
			$elm$core$Dict$fromList,
			A2(
				$elm$core$Result$map,
				$elm$core$List$filterMap($elm$core$Basics$identity),
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$combineMultipleErrors(
					A2(
						$elm$core$List$map,
						function (_v0) {
							var k = _v0.a;
							var whatToDo = _v0.b;
							return A2(
								$elm$core$Result$map,
								$elm$core$Maybe$map(
									$elm$core$Tuple$pair(k)),
								function () {
									switch (whatToDo.$) {
										case 'UseRawResponse':
											return $elm$core$Result$Ok(
												$elm$core$Maybe$Just(
													A2(
														$elm$core$Maybe$withDefault,
														'',
														A2(
															$elm$core$Maybe$withDefault,
															$elm$core$Maybe$Nothing,
															A2($elm$core$Dict$get, k, requestsAndPending)))));
										case 'StripResponse':
											var decoder = whatToDo.a;
											return $elm$core$Result$Ok(
												$elm$core$Maybe$Just(
													A2(
														$elm$core$Result$withDefault,
														'ERROR',
														A2(
															$zwilias$json_decode_exploration$Json$Decode$Exploration$stripString,
															$dillonkearns$elm_pages$Internal$OptimizedDecoder$jde(decoder),
															A2(
																$elm$core$Maybe$withDefault,
																'',
																A2(
																	$elm$core$Maybe$withDefault,
																	$elm$core$Maybe$Nothing,
																	A2($elm$core$Dict$get, k, requestsAndPending)))))));
										case 'CliOnly':
											return $elm$core$Result$Ok($elm$core$Maybe$Nothing);
										case 'DistilledResponse':
											var value = whatToDo.a;
											return $elm$core$Result$Ok(
												$elm$core$Maybe$Just(
													A2($elm$json$Json$Encode$encode, 0, value)));
										default:
											var buildError = whatToDo.a;
											return $elm$core$Result$Err(buildError);
									}
								}());
						},
						$elm$core$Dict$toList(
							A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$strippedResponses, appType, rawRequest, requestsAndPending))))));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$encode = F2(
	function (requestsAndPending, staticResponses) {
		return A2(
			$elm$core$Result$map,
			$elm$core$Dict$fromList,
			A2(
				$elm$core$Result$mapError,
				$elm$core$List$concat,
				$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$combineMultipleErrors(
					A2(
						$elm$core$List$map,
						function (_v1) {
							var key = _v1.a;
							var _v2 = _v1.b;
							var request = _v2.a;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(key),
								A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$strippedResponsesEncode, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli, request, requestsAndPending));
						},
						$elm$core$Dict$toList(
							A2(
								$elm$core$Dict$filter,
								F2(
									function (key, _v0) {
										return !_Utils_eq(key, $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$cliDictKey);
									}),
								staticResponses))))));
	});
var $elm_community$dict_extra$Dict$Extra$filterMap = F2(
	function (f, dict) {
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (k, v, acc) {
					var _v0 = A2(f, k, v);
					if (_v0.$ === 'Just') {
						var newVal = _v0.a;
						return A3($elm$core$Dict$insert, k, newVal, acc);
					} else {
						return acc;
					}
				}),
			$elm$core$Dict$empty,
			dict);
	});
var $elm$core$Set$empty = $elm$core$Set$Set_elm_builtin($elm$core$Dict$empty);
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return $elm$core$Set$Set_elm_builtin(
			A3($elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType = F2(
	function (typeName, otherFields) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					'type',
					$elm$json$Json$Encode$string(typeName)),
				otherFields));
	});
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode = function (body) {
	switch (body.$) {
		case 'EmptyBody':
			return A2($dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType, 'empty', _List_Nil);
		case 'StringBody':
			var content = body.b;
			return A2(
				$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType,
				'string',
				_List_fromArray(
					[
						_Utils_Tuple2(
						'content',
						$elm$json$Json$Encode$string(content))
					]));
		default:
			var content = body.a;
			return A2(
				$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encodeWithType,
				'json',
				_List_fromArray(
					[
						_Utils_Tuple2('content', content)
					]));
	}
};
var $dillonkearns$elm_pages$Pages$StaticHttp$Request$hashHeader = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return $elm$json$Json$Encode$string(name + (': ' + value));
};
var $robinheghan$murmur3$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};
	});
var $robinheghan$murmur3$Murmur3$c1 = 3432918353;
var $robinheghan$murmur3$Murmur3$c2 = 461845907;
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $robinheghan$murmur3$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var $elm$core$Bitwise$or = _Bitwise_or;
var $robinheghan$murmur3$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $robinheghan$murmur3$Murmur3$finalize = function (data) {
	var acc = (!(!data.hash)) ? (data.seed ^ A2(
		$robinheghan$murmur3$Murmur3$multiplyBy,
		$robinheghan$murmur3$Murmur3$c2,
		A2(
			$robinheghan$murmur3$Murmur3$rotlBy,
			15,
			A2($robinheghan$murmur3$Murmur3$multiplyBy, $robinheghan$murmur3$Murmur3$c1, data.hash)))) : data.seed;
	var h0 = acc ^ data.charsProcessed;
	var h1 = A2($robinheghan$murmur3$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2($robinheghan$murmur3$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var $elm$core$String$foldl = _String_foldl;
var $robinheghan$murmur3$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			$robinheghan$murmur3$Murmur3$multiplyBy,
			5,
			A2(
				$robinheghan$murmur3$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					$robinheghan$murmur3$Murmur3$multiplyBy,
					$robinheghan$murmur3$Murmur3$c2,
					A2(
						$robinheghan$murmur3$Murmur3$rotlBy,
						15,
						A2($robinheghan$murmur3$Murmur3$multiplyBy, $robinheghan$murmur3$Murmur3$c1, k1))))) + 3864292196;
	});
var $robinheghan$murmur3$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | ((255 & $elm$core$Char$toCode(c)) << data.shift);
		var _v0 = data.shift;
		if (_v0 === 24) {
			return {
				charsProcessed: data.charsProcessed + 1,
				hash: 0,
				seed: A2($robinheghan$murmur3$Murmur3$mix, data.seed, res),
				shift: 0
			};
		} else {
			return {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};
		}
	});
var $robinheghan$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return $robinheghan$murmur3$Murmur3$finalize(
			A3(
				$elm$core$String$foldl,
				$robinheghan$murmur3$Murmur3$hashFold,
				A4($robinheghan$murmur3$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var $dillonkearns$elm_pages$Pages$StaticHttp$Request$hash = function (requestDetails) {
	return $elm$core$String$fromInt(
		A2(
			$robinheghan$murmur3$Murmur3$hashString,
			0,
			A2(
				$elm$json$Json$Encode$encode,
				0,
				$elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'method',
							$elm$json$Json$Encode$string(requestDetails.method)),
							_Utils_Tuple2(
							'url',
							$elm$json$Json$Encode$string(requestDetails.url)),
							_Utils_Tuple2(
							'headers',
							A2($elm$json$Json$Encode$list, $dillonkearns$elm_pages$Pages$StaticHttp$Request$hashHeader, requestDetails.headers)),
							_Utils_Tuple2(
							'body',
							$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode(requestDetails.body))
						])))));
};
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Dict$isEmpty = function (dict) {
	if (dict.$ === 'RBEmpty_elm_builtin') {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Set$isEmpty = function (_v0) {
	var dict = _v0.a;
	return $elm$core$Dict$isEmpty(dict);
};
var $dillonkearns$elm_pages$Secrets$Value = function (a) {
	return {$: 'Value', a: a};
};
var $dillonkearns$elm_pages$SecretsDict$Masked = {$: 'Masked'};
var $dillonkearns$elm_pages$SecretsDict$masked = $dillonkearns$elm_pages$SecretsDict$Masked;
var $dillonkearns$elm_pages$Secrets$maskedLookup = function (_v0) {
	maskedLookup:
	while (true) {
		var lookupSecrets = _v0.a;
		var _v1 = lookupSecrets($dillonkearns$elm_pages$SecretsDict$masked);
		if (_v1.$ === 'Ok') {
			var value = _v1.a;
			return value;
		} else {
			var $temp$_v0 = $dillonkearns$elm_pages$Secrets$Value(lookupSecrets);
			_v0 = $temp$_v0;
			continue maskedLookup;
		}
	}
};
var $dillonkearns$elm_pages$Secrets$lookup = F2(
	function (secrets, _v0) {
		var lookupSecrets = _v0.a;
		return lookupSecrets(secrets);
	});
var $elm_community$list_extra$List$Extra$uniqueHelp = F4(
	function (f, existing, remaining, accumulator) {
		uniqueHelp:
		while (true) {
			if (!remaining.b) {
				return $elm$core$List$reverse(accumulator);
			} else {
				var first = remaining.a;
				var rest = remaining.b;
				var computedFirst = f(first);
				if (A2($elm$core$List$member, computedFirst, existing)) {
					var $temp$f = f,
						$temp$existing = existing,
						$temp$remaining = rest,
						$temp$accumulator = accumulator;
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				} else {
					var $temp$f = f,
						$temp$existing = A2($elm$core$List$cons, computedFirst, existing),
						$temp$remaining = rest,
						$temp$accumulator = A2($elm$core$List$cons, first, accumulator);
					f = $temp$f;
					existing = $temp$existing;
					remaining = $temp$remaining;
					accumulator = $temp$accumulator;
					continue uniqueHelp;
				}
			}
		}
	});
var $elm_community$list_extra$List$Extra$uniqueBy = F2(
	function (f, list) {
		return A4($elm_community$list_extra$List$Extra$uniqueHelp, f, _List_Nil, list, _List_Nil);
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$resolveUrlsHelp = F4(
	function (appType, rawResponses, soFar, request) {
		resolveUrlsHelp:
		while (true) {
			switch (request.$) {
				case 'RequestError':
					var error = request.a;
					if (error.$ === 'MissingHttpResponse') {
						var next = error.b;
						return A2(
							$elm_community$list_extra$List$Extra$uniqueBy,
							A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$Secrets$maskedLookup, $dillonkearns$elm_pages$Pages$StaticHttp$Request$hash),
							_Utils_ap(soFar, next));
					} else {
						return soFar;
					}
				case 'Request':
					var _v2 = request.b;
					var urlList = _v2.a;
					var lookupFn = _v2.b;
					var $temp$appType = appType,
						$temp$rawResponses = rawResponses,
						$temp$soFar = _Utils_ap(soFar, urlList),
						$temp$request = A3(lookupFn, $dillonkearns$elm_pages$KeepOrDiscard$Keep, appType, rawResponses);
					appType = $temp$appType;
					rawResponses = $temp$rawResponses;
					soFar = $temp$soFar;
					request = $temp$request;
					continue resolveUrlsHelp;
				default:
					return soFar;
			}
		}
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$resolveUrls = F3(
	function (appType, request, rawResponses) {
		return A4($dillonkearns$elm_pages$Pages$StaticHttpRequest$resolveUrlsHelp, appType, rawResponses, _List_Nil, request);
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$performStaticHttpRequests = F3(
	function (allRawResponses, secrets, staticRequests) {
		return A2(
			$elm$core$Result$mapError,
			$elm$core$List$concat,
			$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$combineMultipleErrors(
				A2(
					$elm$core$List$map,
					function (urlBuilder) {
						return A2(
							$elm$core$Result$map,
							function (unmasked) {
								return {
									masked: $dillonkearns$elm_pages$Secrets$maskedLookup(urlBuilder),
									unmasked: unmasked
								};
							},
							A2($dillonkearns$elm_pages$Secrets$lookup, secrets, urlBuilder));
					},
					$elm$core$List$concat(
						A2(
							$elm$core$List$map,
							function (_v0) {
								var request = _v0.b;
								return A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$resolveUrls, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli, request, allRawResponses);
							},
							staticRequests)))));
	});
var $elm$core$Set$foldl = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldl,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm_community$dict_extra$Dict$Extra$removeMany = F2(
	function (set, dict) {
		return A3($elm$core$Set$foldl, $elm$core$Dict$remove, dict, set);
	});
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve = F3(
	function (appType, request, rawResponses) {
		resolve:
		while (true) {
			switch (request.$) {
				case 'RequestError':
					var error = request.a;
					return $elm$core$Result$Err(error);
				case 'Request':
					var _v1 = request.b;
					var lookupFn = _v1.b;
					var _v2 = A3(lookupFn, $dillonkearns$elm_pages$KeepOrDiscard$Keep, appType, rawResponses);
					var nextRequest = _v2;
					var $temp$appType = appType,
						$temp$request = nextRequest,
						$temp$rawResponses = rawResponses;
					appType = $temp$appType;
					request = $temp$request;
					rawResponses = $temp$rawResponses;
					continue resolve;
				default:
					var value = request.b;
					return $elm$core$Result$Ok(value);
			}
		}
	});
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError = F2(
	function (path, error) {
		switch (error.$) {
			case 'MissingHttpResponse':
				var missingKey = error.a;
				return {
					fatal: true,
					message: _List_fromArray(
						[
							$dillonkearns$elm_pages$TerminalText$text(missingKey)
						]),
					path: path,
					title: 'Missing Http Response'
				};
			case 'DecoderError':
				var decodeErrorMessage = error.a;
				return {
					fatal: true,
					message: _List_fromArray(
						[
							$dillonkearns$elm_pages$TerminalText$text(decodeErrorMessage)
						]),
					path: path,
					title: 'Static Http Decoding Error'
				};
			default:
				var decodeErrorMessage = error.a;
				return {
					fatal: true,
					message: _List_fromArray(
						[
							$dillonkearns$elm_pages$TerminalText$text('I ran into a call to `DataSource.fail` with message: ' + decodeErrorMessage)
						]),
					path: path,
					title: 'Called Static Http Fail'
				};
		}
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0.a;
		var dict2 = _v1.a;
		return $elm$core$Set$Set_elm_builtin(
			A2($elm$core$Dict$union, dict1, dict2));
	});
var $elm$core$Dict$values = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2($elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep = F3(
	function (config, model, maybeRoutes) {
		nextStep:
		while (true) {
			var secrets = model.secrets;
			var allRawResponses = model.allRawResponses;
			var errors = model.errors;
			var staticResponses = function () {
				var _v20 = model.staticResponses;
				switch (_v20.$) {
					case 'StaticResponses':
						var s = _v20.a;
						return s;
					case 'ApiRequest':
						var staticHttpResult = _v20.a;
						return A2($elm$core$Dict$singleton, $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$cliDictKey, staticHttpResult);
					default:
						var staticHttpResult = _v20.b;
						return A2($elm$core$Dict$singleton, $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$cliDictKey, staticHttpResult);
				}
			}();
			var resolvedGenerateFilesResult = A3(
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
				$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli,
				$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$buildTimeFilesRequest(config),
				A2(
					$elm_community$dict_extra$Dict$Extra$filterMap,
					F2(
						function (_v19, value) {
							return $elm$core$Maybe$Just(value);
						}),
					allRawResponses));
			var pendingRequests = A2(
				$elm_community$dict_extra$Dict$Extra$any,
				F2(
					function (_v14, entry) {
						var request = entry.a;
						var rawResponses = entry.b;
						var staticRequestsStatus = A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$cacheRequestResolution, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli, request, allRawResponses);
						var hasPermanentHttpError = !$elm$core$List$isEmpty(errors);
						var hasPermanentError = function () {
							if (staticRequestsStatus.$ === 'HasPermanentError') {
								return true;
							} else {
								return false;
							}
						}();
						var _v16 = function () {
							if (staticRequestsStatus.$ === 'Incomplete') {
								var newUrlsToFetch = staticRequestsStatus.a;
								return _Utils_Tuple2(false, newUrlsToFetch);
							} else {
								return _Utils_Tuple2(true, _List_Nil);
							}
						}();
						var allUrlsKnown = _v16.a;
						var knownUrlsToFetch = _v16.b;
						var fetchedAllKnownUrls = $elm$core$Set$isEmpty(
							A2(
								$elm$core$Set$diff,
								$elm$core$Set$fromList(
									A2(
										$elm$core$List$map,
										$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash,
										A2($elm$core$List$map, $dillonkearns$elm_pages$Secrets$maskedLookup, knownUrlsToFetch))),
								A2(
									$elm$core$Set$union,
									$elm$core$Set$fromList(
										$elm$core$Dict$keys(allRawResponses)),
									$elm$core$Set$fromList(
										$elm$core$Dict$keys(rawResponses)))));
						return (hasPermanentHttpError || (hasPermanentError || (allUrlsKnown && fetchedAllKnownUrls))) ? false : true;
					}),
				staticResponses);
			var generatedFiles = A2($elm$core$Result$withDefault, _List_Nil, resolvedGenerateFilesResult);
			var generatedFileErrors = A2(
				$elm$core$List$filterMap,
				function (result) {
					if (result.$ === 'Ok') {
						return $elm$core$Maybe$Nothing;
					} else {
						var error_ = result.a;
						return $elm$core$Maybe$Just(
							{
								fatal: true,
								message: _List_fromArray(
									[
										$dillonkearns$elm_pages$TerminalText$text('I encountered an Err from your generateFiles function. Message:\n'),
										$dillonkearns$elm_pages$TerminalText$text('Error: ' + error_)
									]),
								path: 'Site.elm',
								title: 'Generate Files Error'
							});
					}
				},
				generatedFiles);
			var failedRequests = A2(
				$elm$core$List$concatMap,
				function (_v10) {
					var path = _v10.a;
					var _v11 = _v10.b;
					var request = _v11.a;
					var usableRawResponses = allRawResponses;
					var staticRequestsStatus = A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$cacheRequestResolution, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli, request, usableRawResponses);
					var maybePermanentError = function () {
						if (staticRequestsStatus.$ === 'HasPermanentError') {
							var theError = staticRequestsStatus.a;
							return $elm$core$Maybe$Just(theError);
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}();
					var decoderErrors = A2(
						$elm$core$Maybe$withDefault,
						_List_Nil,
						A2(
							$elm$core$Maybe$map,
							$elm$core$List$singleton,
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(path),
								maybePermanentError)));
					return decoderErrors;
				},
				$elm$core$Dict$toList(staticResponses));
			var allErrors = _Utils_ap(
				errors,
				_Utils_ap(failedRequests, generatedFileErrors));
			if (pendingRequests) {
				var requestContinuations = A2(
					$elm$core$List$map,
					function (_v2) {
						var path = _v2.a;
						var _v3 = _v2.b;
						var request = _v3.a;
						return _Utils_Tuple2(path, request);
					},
					$elm$core$Dict$toList(staticResponses));
				var _v0 = A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$performStaticHttpRequests, allRawResponses, secrets, requestContinuations);
				if (_v0.$ === 'Ok') {
					var urlsToPerform = _v0.a;
					var maskedToUnmasked = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$map,
							function (secureUrl) {
								return _Utils_Tuple2(
									$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(secureUrl.masked),
									secureUrl);
							},
							urlsToPerform));
					var dictOfNewUrlsToPerform = $elm$core$Dict$fromList(
						A2(
							$elm$core$List$map,
							function (hashedUrl) {
								return _Utils_Tuple2(hashedUrl, $elm$core$Maybe$Nothing);
							},
							A2(
								$elm$core$List$map,
								$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash,
								A2(
									$elm$core$List$map,
									function ($) {
										return $.masked;
									},
									urlsToPerform))));
					var newAllRawResponses = A2($elm$core$Dict$union, allRawResponses, dictOfNewUrlsToPerform);
					var alreadyPerformed = $elm$core$Set$fromList(
						$elm$core$Dict$keys(allRawResponses));
					var newThing = A2(
						$elm$core$List$map,
						function (_v1) {
							var secureUrl = _v1.b;
							return secureUrl;
						},
						$elm$core$Dict$toList(
							A2($elm_community$dict_extra$Dict$Extra$removeMany, alreadyPerformed, maskedToUnmasked)));
					return _Utils_Tuple2(
						model.staticResponses,
						A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Continue, newAllRawResponses, newThing, maybeRoutes));
				} else {
					var error_ = _v0.a;
					return _Utils_Tuple2(
						model.staticResponses,
						$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish(
							$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Errors(
								_Utils_ap(
									error_,
									_Utils_ap(failedRequests, errors)))));
				}
			} else {
				var _v4 = model.staticResponses;
				switch (_v4.$) {
					case 'StaticResponses':
						return _Utils_Tuple2(
							model.staticResponses,
							function () {
								var _v5 = A2($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$encode, allRawResponses, staticResponses);
								if (_v5.$ === 'Ok') {
									var encodedResponses = _v5.a;
									return ($elm$core$List$length(allErrors) > 0) ? $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish(
										$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Errors(allErrors)) : $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish(
										$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Page(
											A2(
												$elm$core$Maybe$withDefault,
												$elm$core$Dict$empty,
												$elm$core$List$head(
													$elm$core$Dict$values(encodedResponses)))));
								} else {
									var buildErrors = _v5.a;
									return $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish(
										$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Errors(
											_Utils_ap(allErrors, buildErrors)));
								}
							}());
					case 'ApiRequest':
						return _Utils_Tuple2(
							model.staticResponses,
							$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$ApiResponse));
					default:
						var pageFoundDataSource = _v4.a;
						var _v6 = _v4.b;
						var andThenRequest = _v4.c;
						var pageFoundResult = A3(
							$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
							$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli,
							pageFoundDataSource,
							A2(
								$elm_community$dict_extra$Dict$Extra$filterMap,
								F2(
									function (_v9, value) {
										return $elm$core$Maybe$Just(value);
									}),
								allRawResponses));
						if (pageFoundResult.$ === 'Ok') {
							if (pageFoundResult.a.$ === 'Nothing') {
								var _v8 = pageFoundResult.a;
								var $temp$config = config,
									$temp$model = _Utils_update(
									model,
									{
										staticResponses: $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$StaticResponses(andThenRequest)
									}),
									$temp$maybeRoutes = maybeRoutes;
								config = $temp$config;
								model = $temp$model;
								maybeRoutes = $temp$maybeRoutes;
								continue nextStep;
							} else {
								return _Utils_Tuple2(
									$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$StaticResponses($elm$core$Dict$empty),
									$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$ApiResponse));
							}
						} else {
							var error_ = pageFoundResult.a;
							return _Utils_Tuple2(
								model.staticResponses,
								$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Finish(
									$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$Errors(
										_Utils_ap(
											_List_fromArray(
												[
													A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError, 'get static routes', error_)
												]),
											_Utils_ap(failedRequests, errors)))));
						}
				}
			}
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Effect$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser = {$: 'Browser'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors = function (a) {
	return {$: 'Errors', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$Effect$FetchHttp = function (a) {
	return {$: 'FetchHttp', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute = {$: 'NoMatchingRoute'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$PageProgress = function (a) {
	return {$: 'PageProgress', a: a};
};
var $dillonkearns$elm_pages$Pages$Flags$PreRenderFlags = {$: 'PreRenderFlags'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$SendApiResponse = function (a) {
	return {$: 'SendApiResponse', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage = F2(
	function (a, b) {
		return {$: 'SendSinglePage', a: a, b: b};
	});
var $elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2($elm$core$Dict$map, func, left),
				A2($elm$core$Dict$map, func, right));
		}
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		if (ra.$ === 'Err') {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 'Err') {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				if (rc.$ === 'Err') {
					var x = rc.a;
					return $elm$core$Result$Err(x);
				} else {
					var c = rc.a;
					return $elm$core$Result$Ok(
						A3(func, a, b, c));
				}
			}
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$Payload = F2(
	function (path, reason) {
		return {path: path, reason: reason};
	});
var $miniBill$elm_codec$Codec$Codec = function (a) {
	return {$: 'Codec', a: a};
};
var $miniBill$elm_codec$Codec$buildObject = function (_v0) {
	var om = _v0.a;
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: om.decoder,
			encoder: function (v) {
				return $elm$json$Json$Encode$object(
					om.encoder(v));
			}
		});
};
var $miniBill$elm_codec$Codec$ObjectCodec = function (a) {
	return {$: 'ObjectCodec', a: a};
};
var $miniBill$elm_codec$Codec$decoder = function (_v0) {
	var m = _v0.a;
	return m.decoder;
};
var $miniBill$elm_codec$Codec$encoder = function (_v0) {
	var m = _v0.a;
	return m.encoder;
};
var $miniBill$elm_codec$Codec$field = F4(
	function (name, getter, codec, _v0) {
		var ocodec = _v0.a;
		return $miniBill$elm_codec$Codec$ObjectCodec(
			{
				decoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (f, x) {
							return f(x);
						}),
					ocodec.decoder,
					A2(
						$elm$json$Json$Decode$field,
						name,
						$miniBill$elm_codec$Codec$decoder(codec))),
				encoder: function (v) {
					return A2(
						$elm$core$List$cons,
						_Utils_Tuple2(
							name,
							A2(
								$miniBill$elm_codec$Codec$encoder,
								codec,
								getter(v))),
						ocodec.encoder(v));
				}
			});
	});
var $miniBill$elm_codec$Codec$composite = F3(
	function (enc, dec, _v0) {
		var codec = _v0.a;
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: dec(codec.decoder),
				encoder: enc(codec.encoder)
			});
	});
var $miniBill$elm_codec$Codec$list = A2($miniBill$elm_codec$Codec$composite, $elm$json$Json$Encode$list, $elm$json$Json$Decode$list);
var $miniBill$elm_codec$Codec$map = F3(
	function (go, back, codec) {
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: A2(
					$elm$json$Json$Decode$map,
					go,
					$miniBill$elm_codec$Codec$decoder(codec)),
				encoder: function (v) {
					return A2(
						$miniBill$elm_codec$Codec$encoder,
						codec,
						back(v));
				}
			});
	});
var $miniBill$elm_codec$Codec$object = function (ctor) {
	return $miniBill$elm_codec$Codec$ObjectCodec(
		{
			decoder: $elm$json$Json$Decode$succeed(ctor),
			encoder: function (_v0) {
				return _List_Nil;
			}
		});
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered = F2(
	function (a, b) {
		return {$: 'NotPrerendered', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback = F2(
	function (a, b) {
		return {$: 'NotPrerenderedOrHandledByFallback', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$UnhandledServerRoute = function (a) {
	return {$: 'UnhandledServerRoute', a: a};
};
var $miniBill$elm_codec$Codec$buildCustom = function (_v0) {
	var am = _v0.a;
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: A2(
				$elm$json$Json$Decode$andThen,
				function (tag) {
					var _v1 = A2($elm$core$Dict$get, tag, am.decoder);
					if (_v1.$ === 'Nothing') {
						return $elm$json$Json$Decode$fail('tag ' + (tag + 'did not match'));
					} else {
						var dec = _v1.a;
						return A2($elm$json$Json$Decode$field, 'args', dec);
					}
				},
				A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string)),
			encoder: function (v) {
				return am.match(v);
			}
		});
};
var $miniBill$elm_codec$Codec$CustomCodec = function (a) {
	return {$: 'CustomCodec', a: a};
};
var $miniBill$elm_codec$Codec$custom = function (match) {
	return $miniBill$elm_codec$Codec$CustomCodec(
		{decoder: $elm$core$Dict$empty, match: match});
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$ModuleContext = F3(
	function (moduleName, routePattern, matchedRouteParams) {
		return {matchedRouteParams: matchedRouteParams, moduleName: moduleName, routePattern: routePattern};
	});
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$RoutePattern = F2(
	function (segments, ending) {
		return {ending: ending, segments: segments};
	});
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$Optional = function (a) {
	return {$: 'Optional', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$OptionalSplat = {$: 'OptionalSplat'};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$RequiredSplat = {$: 'RequiredSplat'};
var $miniBill$elm_codec$Codec$build = F2(
	function (encoder_, decoder_) {
		return $miniBill$elm_codec$Codec$Codec(
			{decoder: decoder_, encoder: encoder_});
	});
var $miniBill$elm_codec$Codec$string = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$string, $elm$json$Json$Decode$string);
var $miniBill$elm_codec$Codec$variant = F4(
	function (name, matchPiece, decoderPiece, _v0) {
		var am = _v0.a;
		var enc = function (v) {
			return $elm$json$Json$Encode$object(
				_List_fromArray(
					[
						_Utils_Tuple2(
						'tag',
						$elm$json$Json$Encode$string(name)),
						_Utils_Tuple2(
						'args',
						A2($elm$json$Json$Encode$list, $elm$core$Basics$identity, v))
					]));
		};
		return $miniBill$elm_codec$Codec$CustomCodec(
			{
				decoder: A3($elm$core$Dict$insert, name, decoderPiece, am.decoder),
				match: am.match(
					matchPiece(enc))
			});
	});
var $miniBill$elm_codec$Codec$variant0 = F2(
	function (name, ctor) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			function (c) {
				return c(_List_Nil);
			},
			$elm$json$Json$Decode$succeed(ctor));
	});
var $elm$json$Json$Decode$index = _Json_decodeIndex;
var $miniBill$elm_codec$Codec$variant1 = F3(
	function (name, ctor, m1) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			F2(
				function (c, v) {
					return c(
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v)
							]));
				}),
			A2(
				$elm$json$Json$Decode$map,
				ctor,
				A2(
					$elm$json$Json$Decode$index,
					0,
					$miniBill$elm_codec$Codec$decoder(m1))));
	});
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$endingCodec = $miniBill$elm_codec$Codec$buildCustom(
	A3(
		$miniBill$elm_codec$Codec$variant0,
		'OptionalSplat',
		$dillonkearns$elm_pages$Pages$Internal$RoutePattern$OptionalSplat,
		A3(
			$miniBill$elm_codec$Codec$variant0,
			'RequiredSplat',
			$dillonkearns$elm_pages$Pages$Internal$RoutePattern$RequiredSplat,
			A4(
				$miniBill$elm_codec$Codec$variant1,
				'Optional',
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$Optional,
				$miniBill$elm_codec$Codec$string,
				$miniBill$elm_codec$Codec$custom(
					F4(
						function (vOptional, vRequiredSplat, vOptionalSplat, value) {
							switch (value.$) {
								case 'Optional':
									var string = value.a;
									return vOptional(string);
								case 'RequiredSplat':
									return vRequiredSplat;
								default:
									return vOptionalSplat;
							}
						}))))));
var $miniBill$elm_codec$Codec$maybe = function (codec) {
	return $miniBill$elm_codec$Codec$Codec(
		{
			decoder: $elm$json$Json$Decode$maybe(
				$miniBill$elm_codec$Codec$decoder(codec)),
			encoder: function (v) {
				if (v.$ === 'Nothing') {
					return $elm$json$Json$Encode$null;
				} else {
					var x = v.a;
					return A2($miniBill$elm_codec$Codec$encoder, codec, x);
				}
			}
		});
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment = function (a) {
	return {$: 'DynamicSegment', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment = function (a) {
	return {$: 'StaticSegment', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentCodec = $miniBill$elm_codec$Codec$buildCustom(
	A4(
		$miniBill$elm_codec$Codec$variant1,
		'DynamicSegment',
		$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment,
		$miniBill$elm_codec$Codec$string,
		A4(
			$miniBill$elm_codec$Codec$variant1,
			'StaticSegment',
			$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment,
			$miniBill$elm_codec$Codec$string,
			$miniBill$elm_codec$Codec$custom(
				F3(
					function (vStatic, vDynamic, value) {
						if (value.$ === 'StaticSegment') {
							var string = value.a;
							return vStatic(string);
						} else {
							var string = value.a;
							return vDynamic(string);
						}
					})))));
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$codec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'ending',
		function ($) {
			return $.ending;
		},
		$miniBill$elm_codec$Codec$maybe($dillonkearns$elm_pages$Pages$Internal$RoutePattern$endingCodec),
		A4(
			$miniBill$elm_codec$Codec$field,
			'segments',
			function ($) {
				return $.segments;
			},
			$miniBill$elm_codec$Codec$list($dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentCodec),
			$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$RoutePattern$RoutePattern))));
var $miniBill$elm_codec$Codec$tuple = F2(
	function (m1, m2) {
		return $miniBill$elm_codec$Codec$Codec(
			{
				decoder: A3(
					$elm$json$Json$Decode$map2,
					F2(
						function (a, b) {
							return _Utils_Tuple2(a, b);
						}),
					A2(
						$elm$json$Json$Decode$index,
						0,
						$miniBill$elm_codec$Codec$decoder(m1)),
					A2(
						$elm$json$Json$Decode$index,
						1,
						$miniBill$elm_codec$Codec$decoder(m2))),
				encoder: function (_v0) {
					var v1 = _v0.a;
					var v2 = _v0.b;
					return A2(
						$elm$json$Json$Encode$list,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v1),
								A2($miniBill$elm_codec$Codec$encoder, m2, v2)
							]));
				}
			});
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec = $miniBill$elm_codec$Codec$list(
	A2($miniBill$elm_codec$Codec$tuple, $miniBill$elm_codec$Codec$string, $miniBill$elm_codec$Codec$string));
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'matchedRouteParams',
		function ($) {
			return $.matchedRouteParams;
		},
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec,
		A4(
			$miniBill$elm_codec$Codec$field,
			'routePattern',
			function ($) {
				return $.routePattern;
			},
			$dillonkearns$elm_pages$Pages$Internal$RoutePattern$codec,
			A4(
				$miniBill$elm_codec$Codec$field,
				'moduleName',
				function ($) {
					return $.moduleName;
				},
				$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
				$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$ModuleContext)))));
var $miniBill$elm_codec$Codec$variant2 = F4(
	function (name, ctor, m1, m2) {
		return A3(
			$miniBill$elm_codec$Codec$variant,
			name,
			F3(
				function (c, v1, v2) {
					return c(
						_List_fromArray(
							[
								A2($miniBill$elm_codec$Codec$encoder, m1, v1),
								A2($miniBill$elm_codec$Codec$encoder, m2, v2)
							]));
				}),
			A3(
				$elm$json$Json$Decode$map2,
				ctor,
				A2(
					$elm$json$Json$Decode$index,
					0,
					$miniBill$elm_codec$Codec$decoder(m1)),
				A2(
					$elm$json$Json$Decode$index,
					1,
					$miniBill$elm_codec$Codec$decoder(m2))));
	});
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$reasonCodec = $miniBill$elm_codec$Codec$buildCustom(
	A4(
		$miniBill$elm_codec$Codec$variant1,
		'UnhandledServerRoute',
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$UnhandledServerRoute,
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec,
		A5(
			$miniBill$elm_codec$Codec$variant2,
			'NotPrerenderedOrHandledByFallback',
			$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerenderedOrHandledByFallback,
			$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec,
			$miniBill$elm_codec$Codec$list($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec),
			A5(
				$miniBill$elm_codec$Codec$variant2,
				'NotPrerendered',
				$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered,
				$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleContextCodec,
				$miniBill$elm_codec$Codec$list($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordCodec),
				A3(
					$miniBill$elm_codec$Codec$variant0,
					'NoMatchingRoute',
					$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute,
					$miniBill$elm_codec$Codec$custom(
						F5(
							function (vNoMatchingRoute, vNotPrerendered, vNotPrerenderedOrHandledByFallback, vUnhandledServerRoute, value) {
								switch (value.$) {
									case 'NoMatchingRoute':
										return vNoMatchingRoute;
									case 'NotPrerendered':
										var moduleContext = value.a;
										var prerenderedRoutes = value.b;
										return A2(vNotPrerendered, moduleContext, prerenderedRoutes);
									case 'NotPrerenderedOrHandledByFallback':
										var moduleContext = value.a;
										var prerenderedRoutes = value.b;
										return A2(vNotPrerenderedOrHandledByFallback, moduleContext, prerenderedRoutes);
									default:
										var moduleContext = value.a;
										return vUnhandledServerRoute(moduleContext);
								}
							})))))));
var $dillonkearns$elm_pages$Path$toSegments = function (_v0) {
	var path = _v0.a;
	return A2(
		$elm$core$List$filter,
		$elm$core$Basics$neq(''),
		A2($elm$core$String$split, '/', path));
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$codec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'reason',
		function ($) {
			return $.reason;
		},
		$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$reasonCodec,
		A4(
			$miniBill$elm_codec$Codec$field,
			'path',
			function ($) {
				return $.path;
			},
			A3(
				$miniBill$elm_codec$Codec$map,
				$dillonkearns$elm_pages$Path$join,
				$dillonkearns$elm_pages$Path$toSegments,
				$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string)),
			$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$Payload))));
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$code = _VirtualDom_node('code');
var $elm$html$Html$div = _VirtualDom_node('div');
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$html$Html$li = _VirtualDom_node('li');
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName = function (moduleContext) {
	return A2(
		$elm$core$String$join,
		'/',
		A2($elm$core$List$cons, 'src', moduleContext.moduleName)) + '.elm';
};
var $elm$html$Html$p = _VirtualDom_node('p');
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString = function (fields) {
	return '{ ' + (A2(
		$elm$core$String$join,
		', ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var key = _v0.a;
				var value = _v0.b;
				return key + (' = ' + value);
			},
			fields)) + ' }');
};
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView = F2(
	function (moduleContext, routes) {
		if (!routes.b) {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$elm$html$Html$text('But this Page module has no pre-rendered routes! If you want to pre-render this page, add these '),
						A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('RouteParams')
							])),
						$elm$html$Html$text(' to the module\'s '),
						A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('routes')
							])),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$code,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'border-bottom', 'dotted 2px'),
								A2($elm$html$Html$Attributes$style, 'font-weight', 'bold')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(moduleContext.matchedRouteParams))
							]))
					]));
		} else {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$elm$html$Html$text(' but these RouteParams were not present '),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$code,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'border-bottom', 'dotted 2px'),
								A2($elm$html$Html$Attributes$style, 'font-weight', 'bold')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(
								$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(moduleContext.matchedRouteParams))
							])),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						$elm$html$Html$text('The following RouteParams are pre-rendered:'),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'padding-top', '30px')
							]),
						A2(
							$elm$core$List$map,
							function (record) {
								return A2(
									$elm$html$Html$li,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'list-style', 'inside')
										]),
									_List_fromArray(
										[
											A2(
											$elm$html$Html$code,
											_List_Nil,
											_List_fromArray(
												[
													$elm$html$Html$text(
													$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$recordToString(record))
												]))
										]));
							},
							routes)),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2($elm$html$Html$br, _List_Nil, _List_Nil),
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('Try changing '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('routes')
									])),
								$elm$html$Html$text(' in '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName(moduleContext))
									])),
								$elm$html$Html$text(' to make sure it includes these '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text('RouteParams')
									])),
								$elm$html$Html$text('.')
							]))
					]));
		}
	});
var $dillonkearns$elm_pages$Path$toAbsolute = function (_v0) {
	var path = _v0.a;
	return '/' + path;
};
var $elm$html$Html$span = _VirtualDom_node('span');
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentToString = function (segment) {
	if (segment.$ === 'StaticSegment') {
		var string = segment.a;
		return string;
	} else {
		var name = segment.a;
		return ':' + name;
	}
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_ = function (segments) {
	return '/' + A2(
		$elm$core$String$join,
		'/',
		A2($elm$core$List$map, $dillonkearns$elm_pages$Pages$Internal$RoutePattern$segmentToString, segments));
};
var $dillonkearns$elm_pages$Pages$Internal$RoutePattern$view = function (routePattern) {
	return A2(
		$elm$html$Html$span,
		_List_Nil,
		function () {
			var _v0 = routePattern.ending;
			if (_v0.$ === 'Nothing') {
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$code,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
							]))
					]);
			} else {
				switch (_v0.a.$) {
					case 'Optional':
						var optionalName = _v0.a.a;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
									])),
								$elm$html$Html$text(' or '),
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments) + ('/:' + optionalName))
									]))
							]);
					case 'RequiredSplat':
						var _v1 = _v0.a;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
									]))
							]);
					default:
						var _v2 = _v0.a;
						return _List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_Nil,
								_List_fromArray(
									[
										$elm$html$Html$text(
										$dillonkearns$elm_pages$Pages$Internal$RoutePattern$toString_(routePattern.segments))
									]))
							]);
				}
			}
		}());
};
var $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document = F2(
	function (pathPatterns, payload) {
		return {
			body: A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$id('not-found-reason'),
						A2($elm$html$Html$Attributes$style, 'padding', '30px')
					]),
				function () {
					var _v0 = payload.reason;
					switch (_v0.$) {
						case 'NoMatchingRoute':
							return _List_fromArray(
								[
									$elm$html$Html$text('No route found for '),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$dillonkearns$elm_pages$Path$toAbsolute(payload.path))
										])),
									$elm$html$Html$text(' Did you mean to go to one of these routes:'),
									A2(
									$elm$html$Html$ul,
									_List_fromArray(
										[
											A2($elm$html$Html$Attributes$style, 'padding-top', '30px')
										]),
									A2(
										$elm$core$List$map,
										function (route) {
											return A2(
												$elm$html$Html$li,
												_List_fromArray(
													[
														A2($elm$html$Html$Attributes$style, 'list-style', 'inside')
													]),
												_List_fromArray(
													[
														$dillonkearns$elm_pages$Pages$Internal$RoutePattern$view(route)
													]));
										},
										pathPatterns))
								]);
						case 'NotPrerendered':
							var moduleContext = _v0.a;
							var routes = _v0.b;
							return _List_fromArray(
								[
									A2(
									$elm$html$Html$h1,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text('Page Not Found')
										])),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$dillonkearns$elm_pages$Path$toAbsolute(payload.path))
										])),
									$elm$html$Html$text(' successfully matched the route '),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$dillonkearns$elm_pages$Pages$Internal$RoutePattern$view(moduleContext.routePattern)
										])),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									$elm$html$Html$text(' from the Page Module '),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2($elm$html$Html$br, _List_Nil, _List_Nil),
									A2(
									$elm$html$Html$code,
									_List_Nil,
									_List_fromArray(
										[
											$elm$html$Html$text(
											$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$moduleName(moduleContext))
										])),
									A2($dillonkearns$elm_pages$Pages$Internal$NotFoundReason$prerenderedOptionsView, moduleContext, routes)
								]);
						default:
							return _List_fromArray(
								[
									$elm$html$Html$text('Page not found'),
									$elm$html$Html$text('TODO')
								]);
					}
				}()),
			title: 'Page not found'
		};
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$render404Page = F4(
	function (config, model, path, notFoundReason) {
		var notFoundDocument = A2(
			$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$document,
			config.pathPatterns,
			{path: path, reason: notFoundReason});
		return A2(
			$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
			true,
			$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$PageProgress(
				{
					contentJson: $elm$core$Dict$fromList(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'notFoundReason',
								A2(
									$elm$json$Json$Encode$encode,
									0,
									A2(
										$miniBill$elm_codec$Codec$encoder,
										$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$codec,
										{path: path, reason: notFoundReason}))),
								_Utils_Tuple2(
								'path',
								$dillonkearns$elm_pages$Path$toAbsolute(path))
							])),
					errors: _List_Nil,
					head: _List_Nil,
					html: $dillonkearns$elm_pages$HtmlPrinter$htmlToString(notFoundDocument.body),
					is404: true,
					route: $dillonkearns$elm_pages$Path$toAbsolute(path),
					staticHttpCache: A2(
						$elm_community$dict_extra$Dict$Extra$filterMap,
						F2(
							function (_v0, v) {
								return v;
							}),
						model.allRawResponses),
					title: notFoundDocument.title
				}));
	});
var $dillonkearns$elm_pages$Path$toRelative = function (_v0) {
	var path = _v0.a;
	return path;
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$sendSinglePageProgress = F4(
	function (site, contentJson, config, model) {
		return function (_v0) {
			var page = _v0.a;
			var route = _v0.b;
			var _v1 = model.maybeRequestJson;
			var includeHtml = _v1.a;
			var siteDataResult = A2(
				$elm$core$Result$mapError,
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError('Site.elm'),
				A3(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
					$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli,
					site.data,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v10, v) {
								return $elm$core$Maybe$Just(v);
							}),
						contentJson)));
			var currentUrl = {
				fragment: $elm$core$Maybe$Nothing,
				host: site.canonicalUrl,
				path: $dillonkearns$elm_pages$Path$toRelative(page),
				port_: $elm$core$Maybe$Nothing,
				protocol: $elm$url$Url$Https,
				query: $elm$core$Maybe$Nothing
			};
			var pageDataResult = A2(
				$elm$core$Result$mapError,
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(currentUrl.path),
				A3(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
					$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
					config.data(
						config.urlToRoute(currentUrl)),
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v9, v) {
								return $elm$core$Maybe$Just(v);
							}),
						contentJson)));
			var pageFoundResult = A2(
				$elm$core$Result$mapError,
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(currentUrl.path),
				A3(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
					$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
					model.isDevServer ? config.handleRoute(route) : $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing),
					model.allRawResponses));
			var sharedDataResult = A2(
				$elm$core$Result$mapError,
				$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(currentUrl.path),
				A3(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
					$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
					config.sharedData,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v8, v) {
								return $elm$core$Maybe$Just(v);
							}),
						contentJson)));
			var currentPage = {
				path: page,
				route: config.urlToRoute(currentUrl)
			};
			var renderedResult = function () {
				if (includeHtml.$ === 'OnlyJson') {
					return $elm$core$Result$Ok(
						{head: _List_Nil, title: 'This page was not rendered because it is a JSON-only request.', view: 'This page was not rendered because it is a JSON-only request.'});
				} else {
					return A2(
						$elm$core$Result$map,
						function (_v7) {
							var pageData = _v7.a;
							var sharedData = _v7.b;
							var pageModel = A5(
								config.init,
								$dillonkearns$elm_pages$Pages$Flags$PreRenderFlags,
								sharedData,
								pageData,
								$elm$core$Maybe$Nothing,
								$elm$core$Maybe$Just(
									{
										metadata: currentPage.route,
										pageUrl: $elm$core$Maybe$Nothing,
										path: {fragment: $elm$core$Maybe$Nothing, path: currentPage.path, query: $elm$core$Maybe$Nothing}
									})).a;
							var viewValue = A4(config.view, currentPage, $elm$core$Maybe$Nothing, sharedData, pageData).view(pageModel);
							return {
								head: A4(config.view, currentPage, $elm$core$Maybe$Nothing, sharedData, pageData).head,
								title: viewValue.title,
								view: $dillonkearns$elm_pages$HtmlPrinter$htmlToString(viewValue.body)
							};
						},
						A3($elm$core$Result$map2, $elm$core$Tuple$pair, pageDataResult, sharedDataResult));
				}
			}();
			var _v2 = A4(
				$elm$core$Result$map3,
				F3(
					function (a, b, c) {
						return _Utils_Tuple3(a, b, c);
					}),
				pageFoundResult,
				renderedResult,
				siteDataResult);
			if (_v2.$ === 'Ok') {
				var _v3 = _v2.a;
				var maybeNotFoundReason = _v3.a;
				var rendered = _v3.b;
				var siteData = _v3.c;
				if (maybeNotFoundReason.$ === 'Nothing') {
					return A2(
						$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
						true,
						$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$PageProgress(
							{
								contentJson: contentJson,
								errors: _List_Nil,
								head: _Utils_ap(
									rendered.head,
									site.head(siteData)),
								html: rendered.view,
								is404: false,
								route: $dillonkearns$elm_pages$Path$toRelative(page),
								staticHttpCache: A2(
									$elm_community$dict_extra$Dict$Extra$filterMap,
									F2(
										function (_v5, v) {
											return v;
										}),
									model.allRawResponses),
								title: rendered.title
							}));
				} else {
					var notFoundReason = maybeNotFoundReason.a;
					return A4($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$render404Page, config, model, page, notFoundReason);
				}
			} else {
				var error = _v2.a;
				return A2(
					$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
					true,
					$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors(
						_List_fromArray(
							[error])));
			}
		};
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$nextStepToEffect = F5(
	function (site, contentCache, config, model, _v0) {
		nextStepToEffect:
		while (true) {
			var updatedStaticResponsesModel = _v0.a;
			var nextStep = _v0.b;
			if (nextStep.$ === 'Continue') {
				var updatedAllRawResponses = nextStep.a;
				var httpRequests = nextStep.b;
				var maybeRoutes = nextStep.c;
				var updatedUnprocessedPages = function () {
					if (maybeRoutes.$ === 'Just') {
						var newRoutes = maybeRoutes.a;
						return A2(
							$elm$core$List$map,
							function (route) {
								return _Utils_Tuple2(
									$dillonkearns$elm_pages$Path$join(
										config.routeToPath(route)),
									route);
							},
							newRoutes);
					} else {
						return model.unprocessedPages;
					}
				}();
				var updatedRoutes = function () {
					if (maybeRoutes.$ === 'Just') {
						var newRoutes = maybeRoutes.a;
						return $elm$core$Maybe$Just(
							A2(
								$elm$core$List$map,
								function (route) {
									return _Utils_Tuple2(
										$dillonkearns$elm_pages$Path$join(
											config.routeToPath(route)),
										route);
								},
								newRoutes));
					} else {
						return model.staticRoutes;
					}
				}();
				var pending = _List_Nil;
				var updatedModel = _Utils_update(
					model,
					{allRawResponses: updatedAllRawResponses, pendingRequests: pending, staticResponses: updatedStaticResponsesModel, staticRoutes: updatedRoutes, unprocessedPages: updatedUnprocessedPages});
				var nextAndPending = _Utils_ap(model.pendingRequests, httpRequests);
				var doNow = nextAndPending;
				if ($elm$core$List$isEmpty(doNow) && (!_Utils_eq(updatedRoutes, model.staticRoutes))) {
					var $temp$site = site,
						$temp$contentCache = contentCache,
						$temp$config = config,
						$temp$model = updatedModel,
						$temp$_v0 = A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep, config, updatedModel, $elm$core$Maybe$Nothing);
					site = $temp$site;
					contentCache = $temp$contentCache;
					config = $temp$config;
					model = $temp$model;
					_v0 = $temp$_v0;
					continue nextStepToEffect;
				} else {
					return _Utils_Tuple2(
						updatedModel,
						$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$Batch(
							A2($elm$core$List$map, $dillonkearns$elm_pages$Pages$Internal$Platform$Effect$FetchHttp, doNow)));
				}
			} else {
				var toJsPayload = nextStep.a;
				switch (toJsPayload.$) {
					case 'ApiResponse':
						var apiResponse = function () {
							var _v5 = model.maybeRequestJson;
							var includeHtml = _v5.a;
							var requestPayload = _v5.b;
							var value = _v5.c;
							switch (requestPayload.$) {
								case 'Api':
									var _v7 = requestPayload.a;
									var path = _v7.a;
									var apiHandler = _v7.b.a;
									var thing = apiHandler.matchesToResponse(path);
									return function (response) {
										if (response.$ === 'Ok') {
											if (response.a.$ === 'Just') {
												var okResponse = response.a.a;
												return A2(
													$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
													true,
													$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$SendApiResponse(
														{
															body: okResponse.body,
															staticHttpCache: A2(
																$elm_community$dict_extra$Dict$Extra$filterMap,
																F2(
																	function (_v9, v) {
																		return v;
																	}),
																model.allRawResponses),
															statusCode: 200
														}));
											} else {
												var _v10 = response.a;
												return A2(
													$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
													true,
													$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$SendApiResponse(
														{
															body: 'Hello1!',
															staticHttpCache: A2(
																$elm_community$dict_extra$Dict$Extra$filterMap,
																F2(
																	function (_v11, v) {
																		return v;
																	}),
																model.allRawResponses),
															statusCode: 404
														}));
											}
										} else {
											var error = response.a;
											return A2(
												$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
												true,
												$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors(
													_List_fromArray(
														[error])));
										}
									}(
										A2(
											$elm$core$Result$mapError,
											$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError('TODO - path from request'),
											A3($dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve, $dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli, thing, model.allRawResponses)));
								case 'Page':
									var payload = requestPayload.a;
									var pageFoundResult = A2(
										$elm$core$Result$mapError,
										$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(
											$dillonkearns$elm_pages$Path$toAbsolute(payload.path)),
										A3(
											$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
											$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
											model.isDevServer ? config.handleRoute(payload.frontmatter) : $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing),
											model.allRawResponses));
									if (pageFoundResult.$ === 'Ok') {
										if (pageFoundResult.a.$ === 'Nothing') {
											var _v13 = pageFoundResult.a;
											var staticData = $elm$core$Dict$empty;
											var siteDataResult = A2(
												$elm$core$Result$mapError,
												$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError('Site.elm'),
												A3(
													$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
													$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Cli,
													site.data,
													A2(
														$elm$core$Dict$map,
														F2(
															function (_v21, v) {
																return $elm$core$Maybe$Just(v);
															}),
														staticData)));
											var currentUrl = {
												fragment: $elm$core$Maybe$Nothing,
												host: site.canonicalUrl,
												path: $dillonkearns$elm_pages$Path$toRelative(payload.path),
												port_: $elm$core$Maybe$Nothing,
												protocol: $elm$url$Url$Https,
												query: $elm$core$Maybe$Nothing
											};
											var pageDataResult = A2(
												$elm$core$Result$mapError,
												$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(currentUrl.path),
												A3(
													$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
													$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
													config.data(
														config.urlToRoute(currentUrl)),
													A2(
														$elm$core$Dict$map,
														F2(
															function (_v20, v) {
																return $elm$core$Maybe$Just(v);
															}),
														staticData)));
											var sharedDataResult = A2(
												$elm$core$Result$mapError,
												$dillonkearns$elm_pages$Pages$StaticHttpRequest$toBuildError(currentUrl.path),
												A3(
													$dillonkearns$elm_pages$Pages$StaticHttpRequest$resolve,
													$dillonkearns$elm_pages$Pages$Internal$ApplicationType$Browser,
													config.sharedData,
													A2(
														$elm$core$Dict$map,
														F2(
															function (_v19, v) {
																return $elm$core$Maybe$Just(v);
															}),
														staticData)));
											var currentPage = {
												path: payload.path,
												route: config.urlToRoute(currentUrl)
											};
											var renderedResult = function () {
												if (includeHtml.$ === 'OnlyJson') {
													return $elm$core$Result$Ok(
														{head: _List_Nil, title: 'This page was not rendered because it is a JSON-only request.', view: 'This page was not rendered because it is a JSON-only request.'});
												} else {
													return A2(
														$elm$core$Result$map,
														function (_v18) {
															var pageData = _v18.a;
															var sharedData = _v18.b;
															var pageModel = A5(
																config.init,
																$dillonkearns$elm_pages$Pages$Flags$PreRenderFlags,
																sharedData,
																pageData,
																$elm$core$Maybe$Nothing,
																$elm$core$Maybe$Just(
																	{
																		metadata: currentPage.route,
																		pageUrl: $elm$core$Maybe$Nothing,
																		path: {fragment: $elm$core$Maybe$Nothing, path: currentPage.path, query: $elm$core$Maybe$Nothing}
																	})).a;
															var viewValue = A4(config.view, currentPage, $elm$core$Maybe$Nothing, sharedData, pageData).view(pageModel);
															return {
																head: A4(config.view, currentPage, $elm$core$Maybe$Nothing, sharedData, pageData).head,
																title: viewValue.title,
																view: $dillonkearns$elm_pages$HtmlPrinter$htmlToString(viewValue.body)
															};
														},
														A3($elm$core$Result$map2, $elm$core$Tuple$pair, pageDataResult, sharedDataResult));
												}
											}();
											var _v14 = A4(
												$elm$core$Result$map3,
												F3(
													function (a, b, c) {
														return _Utils_Tuple3(a, b, c);
													}),
												pageFoundResult,
												renderedResult,
												siteDataResult);
											if (_v14.$ === 'Ok') {
												var _v15 = _v14.a;
												var pageFound = _v15.a;
												var rendered = _v15.b;
												var siteData = _v15.c;
												return A2(
													$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
													false,
													$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$PageProgress(
														{
															contentJson: $elm$core$Dict$empty,
															errors: _List_Nil,
															head: rendered.head,
															html: rendered.view,
															is404: false,
															route: $dillonkearns$elm_pages$Path$toRelative(payload.path),
															staticHttpCache: A2(
																$elm_community$dict_extra$Dict$Extra$filterMap,
																F2(
																	function (_v16, v) {
																		return v;
																	}),
																model.allRawResponses),
															title: rendered.title
														}));
											} else {
												var error = _v14.a;
												return A2(
													$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
													true,
													$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors(
														_List_fromArray(
															[error])));
											}
										} else {
											var notFoundReason = pageFoundResult.a.a;
											return A4($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$render404Page, config, model, payload.path, notFoundReason);
										}
									} else {
										var error = pageFoundResult.a;
										return A2(
											$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
											true,
											$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors(
												_List_fromArray(
													[error])));
									}
								default:
									var path = requestPayload.a;
									return A4($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$render404Page, config, model, path, $dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NoMatchingRoute);
							}
						}();
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									staticRoutes: $elm$core$Maybe$Just(_List_Nil)
								}),
							apiResponse);
					case 'Page':
						var contentJson = toJsPayload.a;
						var _v22 = $elm$core$List$head(model.unprocessedPages);
						if (_v22.$ === 'Just') {
							var pageAndMetadata = _v22.a;
							return _Utils_Tuple2(
								model,
								A5($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$sendSinglePageProgress, site, contentJson, config, model, pageAndMetadata));
						} else {
							return _Utils_Tuple2(
								model,
								A2(
									$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
									true,
									$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors(_List_Nil)));
						}
					default:
						var errors = toJsPayload.a;
						return _Utils_Tuple2(
							model,
							A2(
								$dillonkearns$elm_pages$Pages$Internal$Platform$Effect$SendSinglePage,
								true,
								$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors(errors)));
				}
			}
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$ApiRequest = function (a) {
	return {$: 'ApiRequest', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$NotFetched = F2(
	function (a, b) {
		return {$: 'NotFetched', a: a, b: b};
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$renderApiRequest = function (request) {
	return $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$ApiRequest(
		A2(
			$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$NotFetched,
			A2(
				$dillonkearns$elm_pages$DataSource$map,
				function (_v0) {
					return _Utils_Tuple0;
				},
				request),
			$elm$core$Dict$empty));
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$CheckIfHandled = F3(
	function (a, b, c) {
		return {$: 'CheckIfHandled', a: a, b: b, c: c};
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$renderSingleRoute = F4(
	function (config, pathAndRoute, request, cliData) {
		return A3(
			$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$CheckIfHandled,
			cliData,
			A2(
				$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$NotFetched,
				A2(
					$dillonkearns$elm_pages$DataSource$map,
					function (_v0) {
						return _Utils_Tuple0;
					},
					cliData),
				$elm$core$Dict$empty),
			$elm$core$Dict$fromList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						A2(
							$elm$core$String$join,
							'/',
							config.routeToPath(pathAndRoute.frontmatter)),
						A2(
							$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$NotFetched,
							A2(
								$dillonkearns$elm_pages$DataSource$map,
								function (_v1) {
									return _Utils_Tuple0;
								},
								request),
							$elm$core$Dict$empty))
					])));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$initLegacy = F6(
	function (site, renderRequest, _v0, contentCache, config, flags) {
		var secrets = _v0.secrets;
		var staticHttpCache = _v0.staticHttpCache;
		var isDevServer = _v0.isDevServer;
		var unprocessedPagesState = function () {
			var serverRequestPayload = renderRequest.b;
			switch (serverRequestPayload.$) {
				case 'Page':
					var pageData = serverRequestPayload.a;
					return $elm$core$Maybe$Just(
						_List_fromArray(
							[
								_Utils_Tuple2(pageData.path, pageData.frontmatter)
							]));
				case 'Api':
					return $elm$core$Maybe$Nothing;
				default:
					var path = serverRequestPayload.a;
					return $elm$core$Maybe$Just(_List_Nil);
			}
		}();
		var unprocessedPages = function () {
			var serverRequestPayload = renderRequest.b;
			switch (serverRequestPayload.$) {
				case 'Page':
					var pageData = serverRequestPayload.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(pageData.path, pageData.frontmatter)
						]);
				case 'Api':
					return _List_Nil;
				default:
					var path = serverRequestPayload.a;
					return _List_Nil;
			}
		}();
		var staticResponses = function () {
			var singleRequest = renderRequest.b;
			switch (singleRequest.$) {
				case 'Page':
					var serverRequestPayload = singleRequest.a;
					return A4(
						$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$renderSingleRoute,
						config,
						serverRequestPayload,
						A3(
							$dillonkearns$elm_pages$DataSource$map2,
							F2(
								function (_v3, _v4) {
									return _Utils_Tuple0;
								}),
							config.data(serverRequestPayload.frontmatter),
							config.sharedData),
						isDevServer ? config.handleRoute(serverRequestPayload.frontmatter) : $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing));
				case 'Api':
					var _v5 = singleRequest.a;
					var path = _v5.a;
					var apiRequest = _v5.b.a;
					return $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$renderApiRequest(
						apiRequest.matchesToResponse(path));
				default:
					var path = singleRequest.a;
					return $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$renderApiRequest(
						$dillonkearns$elm_pages$DataSource$succeed(_List_Nil));
			}
		}();
		var initialModel = {allRawResponses: staticHttpCache, errors: _List_Nil, isDevServer: isDevServer, maybeRequestJson: renderRequest, pendingRequests: _List_Nil, secrets: secrets, staticResponses: staticResponses, staticRoutes: unprocessedPagesState, unprocessedPages: unprocessedPages};
		return A5(
			$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$nextStepToEffect,
			site,
			contentCache,
			config,
			initialModel,
			A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep, config, initialModel, $elm$core$Maybe$Nothing));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$updateAndSendPortIfDone = F4(
	function (site, contentCache, config, model) {
		return A5(
			$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$nextStepToEffect,
			site,
			contentCache,
			config,
			model,
			A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep, config, model, $elm$core$Maybe$Nothing));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$init = F5(
	function (site, renderRequest, contentCache, config, flags) {
		var _v0 = A2($elm$json$Json$Decode$decodeValue, $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$flagsDecoder, flags);
		if (_v0.$ === 'Ok') {
			var secrets = _v0.a.secrets;
			var staticHttpCache = _v0.a.staticHttpCache;
			var isDevServer = _v0.a.isDevServer;
			return A6(
				$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$initLegacy,
				site,
				renderRequest,
				{isDevServer: isDevServer, secrets: secrets, staticHttpCache: staticHttpCache},
				contentCache,
				config,
				flags);
		} else {
			var error = _v0.a;
			return A4(
				$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$updateAndSendPortIfDone,
				site,
				contentCache,
				config,
				{
					allRawResponses: $elm$core$Dict$empty,
					errors: _List_fromArray(
						[
							{
							fatal: true,
							message: _List_fromArray(
								[
									$dillonkearns$elm_pages$TerminalText$text(
									'Failed to parse flags: ' + $elm$json$Json$Decode$errorToString(error))
								]),
							path: '',
							title: 'Internal Error'
						}
						]),
					isDevServer: false,
					maybeRequestJson: renderRequest,
					pendingRequests: _List_Nil,
					secrets: $dillonkearns$elm_pages$SecretsDict$masked,
					staticResponses: $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$error,
					staticRoutes: $elm$core$Maybe$Just(_List_Nil),
					unprocessedPages: _List_Nil
				});
		}
	});
var $elm$core$Platform$Sub$map = _Platform_map;
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $dillonkearns$elm_pages$Pages$Http$BadUrl = function (a) {
	return {$: 'BadUrl', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$DoHttp = function (a) {
	return {$: 'DoHttp', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Glob = function (a) {
	return {$: 'Glob', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ReadFile = function (a) {
	return {$: 'ReadFile', a: a};
};
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Result$fromMaybe = F2(
	function (err, maybe) {
		if (maybe.$ === 'Just') {
			var v = maybe.a;
			return $elm$core$Result$Ok(v);
		} else {
			return $elm$core$Result$Err(err);
		}
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $dillonkearns$elm_pages$RenderRequest$maybeRequestPayload = function (renderRequest) {
	var rawJson = renderRequest.c;
	return $elm$core$Maybe$Just(rawJson);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0.a;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(_Utils_Tuple0);
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0.a;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return _Utils_Tuple0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(_Utils_Tuple0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0.a;
		return $elm$core$Task$Perform(
			A2($elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2($elm$core$Task$map, toMessage, task)));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ApiResponse = {$: 'ApiResponse'};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Port = function (a) {
	return {$: 'Port', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttp$Request$Request = F4(
	function (url, method, headers, body) {
		return {body: body, headers: headers, method: method, url: url};
	});
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody = {$: 'EmptyBody'};
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$JsonBody = function (a) {
	return {$: 'JsonBody', a: a};
};
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$StringBody = F2(
	function (a, b) {
		return {$: 'StringBody', a: a, b: b};
	});
var $miniBill$elm_codec$Codec$value = $miniBill$elm_codec$Codec$Codec(
	{decoder: $elm$json$Json$Decode$value, encoder: $elm$core$Basics$identity});
var $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$codec = $miniBill$elm_codec$Codec$buildCustom(
	A4(
		$miniBill$elm_codec$Codec$variant1,
		'JsonBody',
		$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$JsonBody,
		$miniBill$elm_codec$Codec$value,
		A5(
			$miniBill$elm_codec$Codec$variant2,
			'StringBody',
			$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$StringBody,
			$miniBill$elm_codec$Codec$string,
			$miniBill$elm_codec$Codec$string,
			A3(
				$miniBill$elm_codec$Codec$variant0,
				'EmptyBody',
				$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody,
				$miniBill$elm_codec$Codec$custom(
					F4(
						function (vEmpty, vString, vJson, value) {
							switch (value.$) {
								case 'EmptyBody':
									return vEmpty;
								case 'StringBody':
									var a = value.a;
									var b = value.b;
									return A2(vString, a, b);
								default:
									var body = value.a;
									return vJson(body);
							}
						}))))));
var $dillonkearns$elm_pages$Pages$StaticHttp$Request$codec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'body',
		function ($) {
			return $.body;
		},
		$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$codec,
		A4(
			$miniBill$elm_codec$Codec$field,
			'headers',
			function ($) {
				return $.headers;
			},
			$miniBill$elm_codec$Codec$list(
				A2($miniBill$elm_codec$Codec$tuple, $miniBill$elm_codec$Codec$string, $miniBill$elm_codec$Codec$string)),
			A4(
				$miniBill$elm_codec$Codec$field,
				'method',
				function ($) {
					return $.method;
				},
				$miniBill$elm_codec$Codec$string,
				A4(
					$miniBill$elm_codec$Codec$field,
					'url',
					function ($) {
						return $.url;
					},
					$miniBill$elm_codec$Codec$string,
					$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$StaticHttp$Request$Request))))));
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $miniBill$elm_codec$Codec$dict = A2(
	$miniBill$elm_codec$Codec$composite,
	function (e) {
		return A2(
			$elm$core$Basics$composeL,
			A2($elm$core$Basics$composeL, $elm$json$Json$Encode$object, $elm$core$Dict$toList),
			$elm$core$Dict$map(
				function (_v0) {
					return e;
				}));
	},
	$elm$json$Json$Decode$dict);
var $dillonkearns$elm_pages$TerminalText$encoder = function (_v0) {
	var ansiStyle = _v0.a;
	var string = _v0.b;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bold',
				$elm$json$Json$Encode$bool(ansiStyle.bold)),
				_Utils_Tuple2(
				'underline',
				$elm$json$Json$Encode$bool(ansiStyle.underline)),
				_Utils_Tuple2(
				'color',
				$elm$json$Json$Encode$string(
					function () {
						var _v1 = A2($elm$core$Maybe$withDefault, $vito$elm_ansi$Ansi$White, ansiStyle.color);
						switch (_v1.$) {
							case 'Red':
								return 'red';
							case 'Blue':
								return 'blue';
							case 'Green':
								return 'green';
							case 'Yellow':
								return 'yellow';
							case 'Cyan':
								return 'cyan';
							case 'Black':
								return 'black';
							case 'Magenta':
								return 'magenta';
							case 'White':
								return 'white';
							case 'BrightBlack':
								return 'BLACK';
							case 'BrightRed':
								return 'RED';
							case 'BrightGreen':
								return 'GREEN';
							case 'BrightYellow':
								return 'YELLOW';
							case 'BrightBlue':
								return 'BLUE';
							case 'BrightMagenta':
								return 'MAGENTA';
							case 'BrightCyan':
								return 'CYAN';
							case 'BrightWhite':
								return 'WHITE';
							default:
								return '';
						}
					}())),
				_Utils_Tuple2(
				'string',
				$elm$json$Json$Encode$string(string))
			]));
};
var $dillonkearns$elm_pages$BuildError$messagesEncoder = F2(
	function (title, messages) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'title',
					$elm$json$Json$Encode$string(title)),
					_Utils_Tuple2(
					'message',
					A2($elm$json$Json$Encode$list, $dillonkearns$elm_pages$TerminalText$encoder, messages))
				]));
	});
var $dillonkearns$elm_pages$BuildError$encode = function (buildErrors) {
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string('compile-errors')),
				_Utils_Tuple2(
				'errors',
				A2(
					$elm$json$Json$Encode$list,
					function (buildError) {
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'path',
									$elm$json$Json$Encode$string(buildError.path)),
									_Utils_Tuple2(
									'name',
									$elm$json$Json$Encode$string(buildError.title)),
									_Utils_Tuple2(
									'problems',
									A2(
										$elm$json$Json$Encode$list,
										$dillonkearns$elm_pages$BuildError$messagesEncoder(buildError.title),
										_List_fromArray(
											[buildError.message])))
								]));
					},
					buildErrors))
			]));
};
var $dillonkearns$elm_pages$TerminalText$cyan = function (inner) {
	return A2(
		$dillonkearns$elm_pages$TerminalText$Style,
		_Utils_update(
			$dillonkearns$elm_pages$TerminalText$blankStyle,
			{
				color: $elm$core$Maybe$Just($vito$elm_ansi$Ansi$Cyan)
			}),
		inner);
};
var $elm$core$String$toUpper = _String_toUpper;
var $dillonkearns$elm_pages$BuildError$banner = function (title) {
	return _List_fromArray(
		[
			$dillonkearns$elm_pages$TerminalText$cyan(
			'-- ' + ($elm$core$String$toUpper(title) + ' ----------------------------------------------------- elm-pages')),
			$dillonkearns$elm_pages$TerminalText$text('\n\n')
		]);
};
var $dillonkearns$elm_pages$TerminalText$ansiPrefix = '\u001B';
var $dillonkearns$elm_pages$TerminalText$ansi = function (code) {
	return _Utils_ap($dillonkearns$elm_pages$TerminalText$ansiPrefix, code);
};
var $dillonkearns$elm_pages$TerminalText$colorToString = function (color) {
	return $dillonkearns$elm_pages$TerminalText$ansi(
		function () {
			switch (color.$) {
				case 'Red':
					return '[31m';
				case 'Blue':
					return '[34m';
				case 'Green':
					return '[32m';
				case 'Yellow':
					return '[33m';
				case 'Cyan':
					return '[36m';
				default:
					return '';
			}
		}());
};
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $dillonkearns$elm_pages$TerminalText$resetColors = $dillonkearns$elm_pages$TerminalText$ansi('[0m');
var $dillonkearns$elm_pages$TerminalText$toString_ = function (_v0) {
	var ansiStyle = _v0.a;
	var innerText = _v0.b;
	return $elm$core$String$concat(
		_List_fromArray(
			[
				$dillonkearns$elm_pages$TerminalText$colorToString(
				A2($elm$core$Maybe$withDefault, $vito$elm_ansi$Ansi$White, ansiStyle.color)),
				innerText,
				$dillonkearns$elm_pages$TerminalText$resetColors
			]));
};
var $dillonkearns$elm_pages$TerminalText$toString = function (list) {
	return A2(
		$elm$core$String$join,
		'',
		A2($elm$core$List$map, $dillonkearns$elm_pages$TerminalText$toString_, list));
};
var $dillonkearns$elm_pages$BuildError$errorToString = function (error) {
	return $dillonkearns$elm_pages$TerminalText$toString(
		_Utils_ap(
			$dillonkearns$elm_pages$BuildError$banner(error.title),
			error.message));
};
var $dillonkearns$elm_pages$BuildError$errorsToString = function (errors) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2($elm$core$List$map, $dillonkearns$elm_pages$BuildError$errorToString, errors));
};
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$errorCodec = $miniBill$elm_codec$Codec$buildObject(
	A4(
		$miniBill$elm_codec$Codec$field,
		'errorsJson',
		$elm$core$Basics$identity,
		A2(
			$miniBill$elm_codec$Codec$build,
			$dillonkearns$elm_pages$BuildError$encode,
			$elm$json$Json$Decode$succeed(
				_List_fromArray(
					[
						{fatal: true, message: _List_Nil, path: '', title: 'TODO'}
					]))),
		A4(
			$miniBill$elm_codec$Codec$field,
			'errorString',
			$elm$core$Basics$identity,
			A2(
				$miniBill$elm_codec$Codec$build,
				A2($elm$core$Basics$composeR, $dillonkearns$elm_pages$BuildError$errorsToString, $elm$json$Json$Encode$string),
				A2(
					$elm$json$Json$Decode$map,
					function (value) {
						return _List_fromArray(
							[
								{fatal: false, message: _List_Nil, path: 'Intentionally empty', title: value}
							]);
					},
					$elm$json$Json$Decode$string)),
			$miniBill$elm_codec$Codec$object(
				F2(
					function (errorString, _v0) {
						return errorString;
					})))));
var $elm$json$Json$Encode$int = _Json_wrap;
var $miniBill$elm_codec$Codec$int = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$int, $elm$json$Json$Decode$int);
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ToJsSuccessPayloadNew = F8(
	function (route, html, contentJson, errors, head, title, staticHttpCache, is404) {
		return {contentJson: contentJson, errors: errors, head: head, html: html, is404: is404, route: route, staticHttpCache: staticHttpCache, title: title};
	});
var $miniBill$elm_codec$Codec$bool = A2($miniBill$elm_codec$Codec$build, $elm$json$Json$Encode$bool, $elm$json$Json$Decode$bool);
var $dillonkearns$elm_pages$Head$FullUrlToCurrentPage = {$: 'FullUrlToCurrentPage'};
var $dillonkearns$elm_pages$Head$currentPageFullUrl = $dillonkearns$elm_pages$Head$FullUrlToCurrentPage;
var $dillonkearns$elm_pages$Head$Tag = function (a) {
	return {$: 'Tag', a: a};
};
var $dillonkearns$elm_pages$Head$node = F2(
	function (name, attributes) {
		return $dillonkearns$elm_pages$Head$Tag(
			{attributes: attributes, name: name});
	});
var $dillonkearns$elm_pages$Head$Raw = function (a) {
	return {$: 'Raw', a: a};
};
var $dillonkearns$elm_pages$Head$raw = function (value) {
	return $dillonkearns$elm_pages$Head$Raw(value);
};
var $dillonkearns$elm_pages$Head$canonicalLink = function (maybePath) {
	return A2(
		$dillonkearns$elm_pages$Head$node,
		'link',
		_List_fromArray(
			[
				_Utils_Tuple2(
				'rel',
				$dillonkearns$elm_pages$Head$raw('canonical')),
				_Utils_Tuple2(
				'href',
				A2(
					$elm$core$Maybe$withDefault,
					$dillonkearns$elm_pages$Head$currentPageFullUrl,
					A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, maybePath)))
			]));
};
var $dillonkearns$elm_pages$Head$joinPaths = F2(
	function (base, path) {
		return A2($dillonkearns$elm_pages$Pages$Internal$String$chopEnd, '/', base) + ('/' + A2($dillonkearns$elm_pages$Pages$Internal$String$chopStart, '/', path));
	});
var $dillonkearns$elm_pages$Pages$Url$join = F2(
	function (base, path) {
		return A2($dillonkearns$elm_pages$Pages$Internal$String$chopEnd, '/', base) + ('/' + A2($dillonkearns$elm_pages$Pages$Internal$String$chopStart, '/', path));
	});
var $dillonkearns$elm_pages$Pages$Url$toAbsoluteUrl = F2(
	function (canonicalSiteUrl, url) {
		if (url.$ === 'External') {
			var externalUrl = url.a;
			return externalUrl;
		} else {
			var internalUrl = url.a;
			return A2($dillonkearns$elm_pages$Pages$Url$join, canonicalSiteUrl, internalUrl);
		}
	});
var $dillonkearns$elm_pages$Head$encodeProperty = F3(
	function (canonicalSiteUrl, currentPagePath, _v0) {
		var name = _v0.a;
		var value = _v0.b;
		switch (value.$) {
			case 'Raw':
				var rawValue = value.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						[name, rawValue]));
			case 'FullUrlToCurrentPage':
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						[
							name,
							A2($dillonkearns$elm_pages$Head$joinPaths, canonicalSiteUrl, currentPagePath)
						]));
			default:
				var url = value.a;
				return A2(
					$elm$json$Json$Encode$list,
					$elm$json$Json$Encode$string,
					_List_fromArray(
						[
							name,
							A2($dillonkearns$elm_pages$Pages$Url$toAbsoluteUrl, canonicalSiteUrl, url)
						]));
		}
	});
var $dillonkearns$elm_pages$Head$toJson = F3(
	function (canonicalSiteUrl, currentPagePath, tag) {
		switch (tag.$) {
			case 'Tag':
				var headTag = tag.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'name',
							$elm$json$Json$Encode$string(headTag.name)),
							_Utils_Tuple2(
							'attributes',
							A2(
								$elm$json$Json$Encode$list,
								A2($dillonkearns$elm_pages$Head$encodeProperty, canonicalSiteUrl, currentPagePath),
								headTag.attributes)),
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('head'))
						]));
			case 'StructuredData':
				var value = tag.a;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2('contents', value),
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('json-ld'))
						]));
			default:
				var key = tag.a;
				var value = tag.b;
				return $elm$json$Json$Encode$object(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'type',
							$elm$json$Json$Encode$string('root')),
							_Utils_Tuple2(
							'keyValuePair',
							A2(
								$elm$json$Json$Encode$list,
								$elm$json$Json$Encode$string,
								_List_fromArray(
									[key, value])))
						]));
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$headCodec = F2(
	function (canonicalSiteUrl, currentPagePath) {
		return A2(
			$miniBill$elm_codec$Codec$build,
			A2($dillonkearns$elm_pages$Head$toJson, canonicalSiteUrl, currentPagePath),
			$elm$json$Json$Decode$succeed(
				$dillonkearns$elm_pages$Head$canonicalLink($elm$core$Maybe$Nothing)));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew = F2(
	function (canonicalSiteUrl, currentPagePath) {
		return $miniBill$elm_codec$Codec$buildObject(
			A4(
				$miniBill$elm_codec$Codec$field,
				'is404',
				function ($) {
					return $.is404;
				},
				$miniBill$elm_codec$Codec$bool,
				A4(
					$miniBill$elm_codec$Codec$field,
					'staticHttpCache',
					function ($) {
						return $.staticHttpCache;
					},
					$miniBill$elm_codec$Codec$dict($miniBill$elm_codec$Codec$string),
					A4(
						$miniBill$elm_codec$Codec$field,
						'title',
						function ($) {
							return $.title;
						},
						$miniBill$elm_codec$Codec$string,
						A4(
							$miniBill$elm_codec$Codec$field,
							'head',
							function ($) {
								return $.head;
							},
							$miniBill$elm_codec$Codec$list(
								A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$headCodec, canonicalSiteUrl, currentPagePath)),
							A4(
								$miniBill$elm_codec$Codec$field,
								'errors',
								function ($) {
									return $.errors;
								},
								$miniBill$elm_codec$Codec$list($miniBill$elm_codec$Codec$string),
								A4(
									$miniBill$elm_codec$Codec$field,
									'contentJson',
									function ($) {
										return $.contentJson;
									},
									$miniBill$elm_codec$Codec$dict($miniBill$elm_codec$Codec$string),
									A4(
										$miniBill$elm_codec$Codec$field,
										'html',
										function ($) {
											return $.html;
										},
										$miniBill$elm_codec$Codec$string,
										A4(
											$miniBill$elm_codec$Codec$field,
											'route',
											function ($) {
												return $.route;
											},
											$miniBill$elm_codec$Codec$string,
											$miniBill$elm_codec$Codec$object($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ToJsSuccessPayloadNew))))))))));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2 = F2(
	function (canonicalSiteUrl, currentPagePath) {
		return $miniBill$elm_codec$Codec$buildCustom(
			A4(
				$miniBill$elm_codec$Codec$variant1,
				'Port',
				$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Port,
				$miniBill$elm_codec$Codec$string,
				A4(
					$miniBill$elm_codec$Codec$variant1,
					'ApiResponse',
					$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$SendApiResponse,
					$miniBill$elm_codec$Codec$buildObject(
						A4(
							$miniBill$elm_codec$Codec$field,
							'statusCode',
							function ($) {
								return $.statusCode;
							},
							$miniBill$elm_codec$Codec$int,
							A4(
								$miniBill$elm_codec$Codec$field,
								'staticHttpCache',
								function ($) {
									return $.staticHttpCache;
								},
								$miniBill$elm_codec$Codec$dict($miniBill$elm_codec$Codec$string),
								A4(
									$miniBill$elm_codec$Codec$field,
									'body',
									function ($) {
										return $.body;
									},
									$miniBill$elm_codec$Codec$string,
									$miniBill$elm_codec$Codec$object(
										F3(
											function (body, staticHttpCache, statusCode) {
												return {body: body, staticHttpCache: staticHttpCache, statusCode: statusCode};
											})))))),
					A4(
						$miniBill$elm_codec$Codec$variant1,
						'DoHttp',
						$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$DoHttp,
						$miniBill$elm_codec$Codec$buildObject(
							A4(
								$miniBill$elm_codec$Codec$field,
								'unmasked',
								function ($) {
									return $.unmasked;
								},
								$dillonkearns$elm_pages$Pages$StaticHttp$Request$codec,
								A4(
									$miniBill$elm_codec$Codec$field,
									'masked',
									function ($) {
										return $.masked;
									},
									$dillonkearns$elm_pages$Pages$StaticHttp$Request$codec,
									$miniBill$elm_codec$Codec$object(
										F2(
											function (masked, unmasked) {
												return {masked: masked, unmasked: unmasked};
											}))))),
						A4(
							$miniBill$elm_codec$Codec$variant1,
							'Glob',
							$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Glob,
							$miniBill$elm_codec$Codec$string,
							A4(
								$miniBill$elm_codec$Codec$variant1,
								'ReadFile',
								$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ReadFile,
								$miniBill$elm_codec$Codec$string,
								A4(
									$miniBill$elm_codec$Codec$variant1,
									'PageProgress',
									$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$PageProgress,
									A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew, canonicalSiteUrl, currentPagePath),
									A3(
										$miniBill$elm_codec$Codec$variant0,
										'ApiResponse',
										$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ApiResponse,
										A4(
											$miniBill$elm_codec$Codec$variant1,
											'Errors',
											$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Errors,
											$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$errorCodec,
											$miniBill$elm_codec$Codec$custom(
												F9(
													function (errorsTag, vApiResponse, success, vReadFile, vGlob, vDoHttp, vSendApiResponse, vPort, value) {
														switch (value.$) {
															case 'ApiResponse':
																return vApiResponse;
															case 'Errors':
																var errorList = value.a;
																return errorsTag(errorList);
															case 'PageProgress':
																var payload = value.a;
																return success(payload);
															case 'ReadFile':
																var filePath = value.a;
																return vReadFile(filePath);
															case 'Glob':
																var globPattern = value.a;
																return vGlob(globPattern);
															case 'DoHttp':
																var requestUrl = value.a;
																return vDoHttp(requestUrl);
															case 'SendApiResponse':
																var record = value.a;
																return vSendApiResponse(record);
															default:
																var string = value.a;
																return vPort(string);
														}
													})))))))))));
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$perform = F5(
	function (site, renderRequest, config, toJsPort, effect) {
		var canonicalSiteUrl = site.canonicalUrl;
		switch (effect.$) {
			case 'NoEffect':
				return $elm$core$Platform$Cmd$none;
			case 'Batch':
				var list = effect.a;
				return $elm$core$Platform$Cmd$batch(
					A2(
						$elm$core$List$map,
						A4($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$perform, site, renderRequest, config, toJsPort),
						list));
			case 'FetchHttp':
				var requests = effect.a;
				var unmasked = requests.unmasked;
				var masked = requests.masked;
				if (unmasked.url === '$$elm-pages$$headers') {
					var _v1 = A2(
						$elm$core$Result$fromMaybe,
						$dillonkearns$elm_pages$Pages$Http$BadUrl('$$elm-pages$$headers is only available on server-side request (not on build).'),
						A2(
							$elm$core$Maybe$map,
							$elm$json$Json$Encode$encode(0),
							$dillonkearns$elm_pages$RenderRequest$maybeRequestPayload(renderRequest)));
					if (_v1.$ === 'Ok') {
						var okResponse = _v1.a;
						return A2(
							$elm$core$Task$perform,
							$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$GotDataBatch,
							$elm$core$Task$succeed(
								_List_fromArray(
									[
										{request: requests, response: okResponse}
									])));
					} else {
						var error = _v1.a;
						return A2(
							$elm$core$Task$perform,
							$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$GotBuildError,
							$elm$core$Task$succeed(
								{
									fatal: true,
									message: _List_fromArray(
										[
											$dillonkearns$elm_pages$TerminalText$text('I got an error making an HTTP request to this URL: '),
											$dillonkearns$elm_pages$TerminalText$yellow(requests.masked.url),
											$dillonkearns$elm_pages$TerminalText$text(
											A2(
												$elm$json$Json$Encode$encode,
												2,
												$dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$encode(requests.masked.body))),
											$dillonkearns$elm_pages$TerminalText$text('\n\n'),
											function () {
											switch (error.$) {
												case 'BadStatus':
													var metadata = error.a;
													var body = error.b;
													return $dillonkearns$elm_pages$TerminalText$text(
														A2(
															$elm$core$String$join,
															'\n',
															_List_fromArray(
																[
																	'Bad status: ' + $elm$core$String$fromInt(metadata.statusCode),
																	'Status message: ' + metadata.statusText,
																	'Body: ' + body
																])));
												case 'BadUrl':
													return $dillonkearns$elm_pages$TerminalText$text('Invalid url: ' + requests.masked.url);
												case 'Timeout':
													return $dillonkearns$elm_pages$TerminalText$text('Timeout');
												default:
													return $dillonkearns$elm_pages$TerminalText$text('Network error');
											}
										}()
										]),
									path: '',
									title: 'Static HTTP Error'
								}));
					}
				} else {
					if (A2($elm$core$String$startsWith, 'file://', unmasked.url)) {
						var filePath = A2($elm$core$String$dropLeft, 7, unmasked.url);
						return A2(
							$elm$core$Platform$Cmd$map,
							$elm$core$Basics$never,
							toJsPort(
								A2(
									$miniBill$elm_codec$Codec$encoder,
									A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2, canonicalSiteUrl, ''),
									$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ReadFile(filePath))));
					} else {
						if (A2($elm$core$String$startsWith, 'glob://', unmasked.url)) {
							var globPattern = A2($elm$core$String$dropLeft, 7, unmasked.url);
							return A2(
								$elm$core$Platform$Cmd$map,
								$elm$core$Basics$never,
								toJsPort(
									A2(
										$miniBill$elm_codec$Codec$encoder,
										A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2, canonicalSiteUrl, ''),
										$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Glob(globPattern))));
						} else {
							return A2(
								$elm$core$Platform$Cmd$map,
								$elm$core$Basics$never,
								toJsPort(
									A2(
										$miniBill$elm_codec$Codec$encoder,
										A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2, canonicalSiteUrl, ''),
										$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$DoHttp(
											{masked: masked, unmasked: unmasked}))));
						}
					}
				}
			case 'SendSinglePage':
				var done = effect.a;
				var info = effect.b;
				var currentPagePath = function () {
					if (info.$ === 'PageProgress') {
						var toJsSuccessPayloadNew = info.a;
						return toJsSuccessPayloadNew.route;
					} else {
						return '';
					}
				}();
				return $elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A2(
							$elm$core$Platform$Cmd$map,
							$elm$core$Basics$never,
							toJsPort(
								A2(
									$miniBill$elm_codec$Codec$encoder,
									A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2, canonicalSiteUrl, currentPagePath),
									info))),
							done ? $elm$core$Platform$Cmd$none : A2(
							$elm$core$Task$perform,
							function (_v3) {
								return $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$Continue;
							},
							$elm$core$Task$succeed(_Utils_Tuple0))
						]));
			case 'Continue':
				return $elm$core$Platform$Cmd$none;
			case 'ReadFile':
				var filePath = effect.a;
				return A2(
					$elm$core$Platform$Cmd$map,
					$elm$core$Basics$never,
					toJsPort(
						A2(
							$miniBill$elm_codec$Codec$encoder,
							A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2, canonicalSiteUrl, ''),
							$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$ReadFile(filePath))));
			default:
				var globPattern = effect.a;
				return A2(
					$elm$core$Platform$Cmd$map,
					$elm$core$Basics$never,
					toJsPort(
						A2(
							$miniBill$elm_codec$Codec$encoder,
							A2($dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$successCodecNew2, canonicalSiteUrl, ''),
							$dillonkearns$elm_pages$Pages$Internal$Platform$ToJsPayload$Glob(globPattern))));
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$requestDecoder = $miniBill$elm_codec$Codec$decoder(
	$miniBill$elm_codec$Codec$buildObject(
		A4(
			$miniBill$elm_codec$Codec$field,
			'unmasked',
			function ($) {
				return $.unmasked;
			},
			$dillonkearns$elm_pages$Pages$StaticHttp$Request$codec,
			A4(
				$miniBill$elm_codec$Codec$field,
				'masked',
				function ($) {
					return $.masked;
				},
				$dillonkearns$elm_pages$Pages$StaticHttp$Request$codec,
				$miniBill$elm_codec$Codec$object(
					F2(
						function (masked, unmasked) {
							return {masked: masked, unmasked: unmasked};
						}))))));
var $dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$batchUpdate = F2(
	function (newEntries, model) {
		var newResponses = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				function (newEntry) {
					return _Utils_Tuple2(
						$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(newEntry.request.masked),
						newEntry.response);
				},
				newEntries));
		var updatedAllResponses = A6(
			$elm$core$Dict$merge,
			F2(
				function (key, a) {
					return A2(
						$elm$core$Dict$insert,
						key,
						$elm$core$Maybe$Just(a));
				}),
			F3(
				function (key, a, _v0) {
					return A2(
						$elm$core$Dict$insert,
						key,
						$elm$core$Maybe$Just(a));
				}),
			F2(
				function (key, b) {
					return A2($elm$core$Dict$insert, key, b);
				}),
			newResponses,
			model.allRawResponses,
			$elm$core$Dict$empty);
		return _Utils_update(
			model,
			{allRawResponses: updatedAllResponses});
	});
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$update = F5(
	function (site, contentCache, config, msg, model) {
		switch (msg.$) {
			case 'GotDataBatch':
				var batch = msg.a;
				var updatedModel = A2(
					$dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$batchUpdate,
					batch,
					function () {
						if (batch.b && (!batch.b.b)) {
							var single = batch.a;
							return _Utils_update(
								model,
								{
									pendingRequests: A2(
										$elm$core$List$filter,
										function (pending) {
											return !_Utils_eq(pending, single.request);
										},
										model.pendingRequests)
								});
						} else {
							return _Utils_update(
								model,
								{pendingRequests: _List_Nil});
						}
					}());
				return A5(
					$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$nextStepToEffect,
					site,
					contentCache,
					config,
					updatedModel,
					A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep, config, updatedModel, $elm$core$Maybe$Nothing));
			case 'Continue':
				var updatedModel = model;
				return A5(
					$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$nextStepToEffect,
					site,
					contentCache,
					config,
					updatedModel,
					A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep, config, updatedModel, $elm$core$Maybe$Nothing));
			default:
				var buildError = msg.a;
				var updatedModel = _Utils_update(
					model,
					{
						errors: A2($elm$core$List$cons, buildError, model.errors)
					});
				return A5(
					$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$nextStepToEffect,
					site,
					contentCache,
					config,
					updatedModel,
					A3($dillonkearns$elm_pages$Pages$Internal$Platform$StaticResponses$nextStep, config, updatedModel, $elm$core$Maybe$Nothing));
		}
	});
var $elm$core$Platform$worker = _Platform_worker;
var $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$cliApplication = function (config) {
	var getSiteConfig = function (fullConfig) {
		getSiteConfig:
		while (true) {
			var _v0 = fullConfig.site;
			if (_v0.$ === 'Just') {
				var mySite = _v0.a;
				return mySite;
			} else {
				var $temp$fullConfig = fullConfig;
				fullConfig = $temp$fullConfig;
				continue getSiteConfig;
			}
		}
	};
	var site = getSiteConfig(config);
	var contentCache = $dillonkearns$elm_pages$Pages$ContentCache$init($elm$core$Maybe$Nothing);
	return $elm$core$Platform$worker(
		{
			init: function (flags) {
				var renderRequest = A2(
					$elm$core$Result$withDefault,
					$dillonkearns$elm_pages$RenderRequest$default,
					A2(
						$elm$json$Json$Decode$decodeValue,
						$dillonkearns$elm_pages$RenderRequest$decoder(config),
						flags));
				return A2(
					$elm$core$Tuple$mapSecond,
					A4($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$perform, site, renderRequest, config, config.toJsPort),
					A5($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$init, site, renderRequest, contentCache, config, flags));
			},
			subscriptions: function (_v1) {
				return A2(
					$elm$core$Platform$Sub$map,
					function (jsonValue) {
						var decoder = A2(
							$elm$json$Json$Decode$andThen,
							function (tag) {
								switch (tag) {
									case 'BuildError':
										return A2(
											$elm$json$Json$Decode$map,
											$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$GotBuildError,
											A2(
												$elm$json$Json$Decode$field,
												'data',
												A3(
													$elm$json$Json$Decode$map2,
													F2(
														function (message, title) {
															return {fatal: true, message: message, path: '', title: title};
														}),
													A2(
														$elm$json$Json$Decode$map,
														$dillonkearns$elm_pages$TerminalText$fromAnsiString,
														A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string)),
													A2($elm$json$Json$Decode$field, 'title', $elm$json$Json$Decode$string))));
									case 'GotBatch':
										return A2(
											$elm$json$Json$Decode$map,
											$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$GotDataBatch,
											A2(
												$elm$json$Json$Decode$field,
												'data',
												$elm$json$Json$Decode$list(
													A3(
														$elm$json$Json$Decode$map2,
														F2(
															function (requests, response) {
																return {
																	request: {masked: requests.masked, unmasked: requests.unmasked},
																	response: response
																};
															}),
														A2($elm$json$Json$Decode$field, 'request', $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$requestDecoder),
														A2($elm$json$Json$Decode$field, 'response', $elm$json$Json$Decode$string)))));
									default:
										return $elm$json$Json$Decode$fail('Unhandled msg');
								}
							},
							A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string));
						return A2(
							$elm$core$Result$withDefault,
							$dillonkearns$elm_pages$Pages$Internal$Platform$Cli$Continue,
							A2(
								$elm$core$Result$mapError,
								$elm$json$Json$Decode$errorToString,
								A2($elm$json$Json$Decode$decodeValue, decoder, jsonValue)));
					},
					config.fromJsPort);
			},
			update: F2(
				function (msg, model) {
					return A2(
						$elm$core$Tuple$mapSecond,
						A4($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$perform, site, model.maybeRequestJson, config, config.toJsPort),
						A5($dillonkearns$elm_pages$Pages$Internal$Platform$Cli$update, site, contentCache, config, msg, model));
				})
		});
};
var $author$project$Site$data = $dillonkearns$elm_pages$DataSource$succeed(_Utils_Tuple0);
var $dillonkearns$elm_pages$Head$sitemapLink = function (url) {
	return A2(
		$dillonkearns$elm_pages$Head$node,
		'link',
		_List_fromArray(
			[
				_Utils_Tuple2(
				'rel',
				$dillonkearns$elm_pages$Head$raw('sitemap')),
				_Utils_Tuple2(
				'type',
				$dillonkearns$elm_pages$Head$raw('application/xml')),
				_Utils_Tuple2(
				'href',
				$dillonkearns$elm_pages$Head$raw(url))
			]));
};
var $author$project$Site$head = function (_static) {
	return _List_fromArray(
		[
			$dillonkearns$elm_pages$Head$sitemapLink('/sitemap.xml')
		]);
};
var $author$project$Route$Index = {$: 'Index'};
var $dillonkearns$elm_pages$Pages$Manifest$Portrait = {$: 'Portrait'};
var $dillonkearns$elm_pages$Pages$Manifest$Standalone = {$: 'Standalone'};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$LanguageTag = F2(
	function (a, b) {
		return {$: 'LanguageTag', a: a, b: b};
	});
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$build = F2(
	function (options, language) {
		return A2($dillonkearns$elm_bcp47_language_tag$LanguageTag$LanguageTag, language, options);
	});
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$emptySubtags = {extendedLanguage: $elm$core$Maybe$Nothing, region: $elm$core$Maybe$Nothing, script: $elm$core$Maybe$Nothing, variants: _List_Nil};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$Language = function (a) {
	return {$: 'Language', a: a};
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$en = $dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$Language('en');
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Country$Country = function (a) {
	return {$: 'Country', a: a};
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Country$us = $dillonkearns$elm_bcp47_language_tag$LanguageTag$Country$Country('us');
var $dillonkearns$elm_pages$Pages$Manifest$usEnglish = A2(
	$dillonkearns$elm_bcp47_language_tag$LanguageTag$build,
	_Utils_update(
		$dillonkearns$elm_bcp47_language_tag$LanguageTag$emptySubtags,
		{
			region: $elm$core$Maybe$Just($dillonkearns$elm_bcp47_language_tag$LanguageTag$Country$us)
		}),
	$dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$en);
var $dillonkearns$elm_pages$Pages$Manifest$init = function (options) {
	return {backgroundColor: $elm$core$Maybe$Nothing, categories: _List_Nil, description: options.description, displayMode: $dillonkearns$elm_pages$Pages$Manifest$Standalone, iarcRatingId: $elm$core$Maybe$Nothing, icons: options.icons, lang: $dillonkearns$elm_pages$Pages$Manifest$usEnglish, name: options.name, orientation: $dillonkearns$elm_pages$Pages$Manifest$Portrait, shortName: $elm$core$Maybe$Nothing, startUrl: options.startUrl, themeColor: $elm$core$Maybe$Nothing};
};
var $author$project$Route$baseUrl = '/';
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $author$project$Route$baseUrlAsPath = A2(
	$elm$core$List$filter,
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$String$isEmpty),
	A2($elm$core$String$split, '/', $author$project$Route$baseUrl));
var $author$project$Route$routeToPath = function (route) {
	switch (route.$) {
		case 'Blog__Name_':
			var params = route.a;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['blog']),
						_List_fromArray(
						[params.name])
					]));
		case 'Project__Name_':
			var params = route.a;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['project']),
						_List_fromArray(
						[params.name])
					]));
		case 'Skill__Name_':
			var params = route.a;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['skill']),
						_List_fromArray(
						[params.name])
					]));
		case 'Tag__Name_':
			var params = route.a;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['tag']),
						_List_fromArray(
						[params.name])
					]));
		case 'Testimonial__Name_':
			var params = route.a;
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['testimonial']),
						_List_fromArray(
						[params.name])
					]));
		case 'Now':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['now'])
					]));
		case 'Projects':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['projects'])
					]));
		case 'Skills':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['skills'])
					]));
		case 'Testimonials':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['testimonials'])
					]));
		case 'Writing':
			return $elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						['writing'])
					]));
		default:
			return $elm$core$List$concat(_List_Nil);
	}
};
var $author$project$Route$toPath = function (route) {
	return $dillonkearns$elm_pages$Path$fromString(
		A2(
			$elm$core$String$join,
			'/',
			_Utils_ap(
				$author$project$Route$baseUrlAsPath,
				$author$project$Route$routeToPath(route))));
};
var $author$project$Site$manifest = function (_static) {
	return $dillonkearns$elm_pages$Pages$Manifest$init(
		{
			description: 'Description',
			icons: _List_Nil,
			name: 'Site Name',
			startUrl: $author$project$Route$toPath($author$project$Route$Index)
		});
};
var $author$project$Site$config = {canonicalUrl: 'https://elm-pages.com', data: $author$project$Site$data, head: $author$project$Site$head, manifest: $author$project$Site$manifest};
var $author$project$TemplateModulesBeta$Data404NotFoundPage____ = {$: 'Data404NotFoundPage____'};
var $author$project$TemplateModulesBeta$DataBlog__Name_ = function (a) {
	return {$: 'DataBlog__Name_', a: a};
};
var $author$project$TemplateModulesBeta$DataIndex = function (a) {
	return {$: 'DataIndex', a: a};
};
var $author$project$TemplateModulesBeta$DataNow = function (a) {
	return {$: 'DataNow', a: a};
};
var $author$project$TemplateModulesBeta$DataProject__Name_ = function (a) {
	return {$: 'DataProject__Name_', a: a};
};
var $author$project$TemplateModulesBeta$DataProjects = function (a) {
	return {$: 'DataProjects', a: a};
};
var $author$project$TemplateModulesBeta$DataSkill__Name_ = function (a) {
	return {$: 'DataSkill__Name_', a: a};
};
var $author$project$TemplateModulesBeta$DataSkills = function (a) {
	return {$: 'DataSkills', a: a};
};
var $author$project$TemplateModulesBeta$DataTag__Name_ = function (a) {
	return {$: 'DataTag__Name_', a: a};
};
var $author$project$TemplateModulesBeta$DataTestimonial__Name_ = function (a) {
	return {$: 'DataTestimonial__Name_', a: a};
};
var $author$project$TemplateModulesBeta$DataTestimonials = function (a) {
	return {$: 'DataTestimonials', a: a};
};
var $author$project$TemplateModulesBeta$DataWriting = function (a) {
	return {$: 'DataWriting', a: a};
};
var $elm$core$Platform$Sub$none = $elm$core$Platform$Sub$batch(_List_Nil);
var $author$project$Page$buildNoState = F2(
	function (_v0, builderState) {
		var view = _v0.view;
		var record = builderState.a;
		return {
			data: record.data,
			handleRoute: record.handleRoute,
			head: record.head,
			init: F3(
				function (_v2, _v3, _v4) {
					return _Utils_Tuple2(_Utils_Tuple0, $elm$core$Platform$Cmd$none);
				}),
			kind: record.kind,
			staticRoutes: record.staticRoutes,
			subscriptions: F5(
				function (_v5, _v6, _v7, _v8, _v9) {
					return $elm$core$Platform$Sub$none;
				}),
			update: F6(
				function (_v10, _v11, _v12, _v13, _v14, _v15) {
					return _Utils_Tuple3(_Utils_Tuple0, $elm$core$Platform$Cmd$none, $elm$core$Maybe$Nothing);
				}),
			view: F3(
				function (maybePageUrl, sharedModel, _v16) {
					return A2(view, maybePageUrl, sharedModel);
				})
		};
	});
var $author$project$Datatypes$Blog = F5(
	function (title, tags, content, slug, createdAt) {
		return {content: content, createdAt: createdAt, slug: slug, tags: tags, title: title};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField = F2(
	function (a, b) {
		return {$: 'InField', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject = {$: 'TObject'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TObjectField = function (a) {
	return {$: 'TObjectField', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Expected = F2(
	function (a, b) {
		return {$: 'Expected', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$encode = function (v) {
	switch (v.$) {
		case 'String':
			var val = v.b;
			return $elm$json$Json$Encode$string(val);
		case 'Number':
			var val = v.b;
			return $elm$json$Json$Encode$float(val);
		case 'Bool':
			var val = v.b;
			return $elm$json$Json$Encode$bool(val);
		case 'Null':
			return $elm$json$Json$Encode$null;
		case 'Array':
			var values = v.b;
			return A2(
				$elm$json$Json$Encode$list,
				A2($elm$core$Basics$composeR, $elm$core$Tuple$second, $zwilias$json_decode_exploration$Json$Decode$Exploration$encode),
				values);
		default:
			var kvPairs = v.b;
			return $elm$json$Json$Encode$object(
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.b;
						var v_ = _v1.c;
						return _Utils_Tuple2(
							k,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(v_));
					},
					kvPairs));
	}
};
var $mgold$elm_nonempty_list$List$Nonempty$singleton = function (x) {
	return A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, _List_Nil);
};
var $mgold$elm_nonempty_list$List$Nonempty$fromElement = $mgold$elm_nonempty_list$List$Nonempty$singleton;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$expected = F2(
	function (expectedType, json) {
		return A2(
			$elm$core$Tuple$pair,
			json,
			$elm$core$Result$Err(
				$mgold$elm_nonempty_list$List$Nonempty$fromElement(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
						A2(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Expected,
							expectedType,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json))))));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$field = F2(
	function (fieldName, _v0) {
		var decoderFn = _v0.a;
		var finalize = function (_v6) {
			var values = _v6.a;
			var warnings = _v6.b;
			var res = _v6.c;
			if (res.$ === 'Nothing') {
				return A2(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$expected,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$TObjectField(fieldName),
					A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values));
			} else {
				if (res.a.$ === 'Err') {
					var e = res.a.a;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values),
						$elm$core$Result$Err(e));
				} else {
					var v = res.a.a;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Object, true, values),
						$elm$core$Result$Ok(
							{value: v, warnings: warnings}));
				}
			}
		};
		var accumulate = F2(
			function (_v3, _v4) {
				var used = _v3.a;
				var key = _v3.b;
				var val = _v3.c;
				var acc = _v4.a;
				var warnings = _v4.b;
				var result = _v4.c;
				if (_Utils_eq(key, fieldName)) {
					var _v2 = decoderFn(val);
					if (_v2.b.$ === 'Err') {
						var annVal = _v2.a;
						var e = _v2.b.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple3(true, key, annVal),
								acc),
							warnings,
							$elm$core$Maybe$Just(
								$elm$core$Result$Err(
									$mgold$elm_nonempty_list$List$Nonempty$fromElement(
										A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField, key, e)))));
					} else {
						var annVal = _v2.a;
						var res = _v2.b.a;
						return _Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple3(true, key, annVal),
								acc),
							_Utils_ap(
								A2(
									$elm$core$List$map,
									A2(
										$elm$core$Basics$composeR,
										$mgold$elm_nonempty_list$List$Nonempty$fromElement,
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField(key)),
									res.warnings),
								warnings),
							$elm$core$Maybe$Just(
								$elm$core$Result$Ok(res.value)));
					}
				} else {
					return _Utils_Tuple3(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple3(used, key, val),
							acc),
						warnings,
						result);
				}
			});
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				if (json.$ === 'Object') {
					var kvPairs = json.b;
					return finalize(
						A3(
							$elm$core$List$foldr,
							accumulate,
							_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
							kvPairs));
				} else {
					return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TObject, json);
				}
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$field = F2(
	function (fieldName, _v0) {
		var jd = _v0.a;
		var jde = _v0.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A2($elm$json$Json$Decode$field, fieldName, jd),
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$field, fieldName, jde));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex = F2(
	function (a, b) {
		return {$: 'AtIndex', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray = {$: 'TArray'};
var $mgold$elm_nonempty_list$List$Nonempty$cons = F2(
	function (y, _v0) {
		var x = _v0.a;
		var xs = _v0.b;
		return A2(
			$mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			y,
			A2($elm$core$List$cons, x, xs));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$list = function (_v0) {
	var decoderFn = _v0.a;
	var finalize = function (_v11) {
		var warnings = _v11.a;
		var values = _v11.b;
		return {value: values, warnings: warnings};
	};
	var accumulate = F2(
		function (_v9, _v10) {
			var used = _v9.a;
			var val = _v9.b;
			var idx = _v10.a;
			var jsonAcc = _v10.b;
			var acc = _v10.c;
			var _v3 = _Utils_Tuple2(
				acc,
				decoderFn(val));
			if (_v3.a.$ === 'Err') {
				if (_v3.b.b.$ === 'Err') {
					var errors = _v3.a.a;
					var _v4 = _v3.b;
					var annVal = _v4.a;
					var newErrors = _v4.b.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Err(
							A2(
								$mgold$elm_nonempty_list$List$Nonempty$cons,
								A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, idx, newErrors),
								errors)));
				} else {
					var errors = _v3.a.a;
					var _v5 = _v3.b;
					var annVal = _v5.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Err(errors));
				}
			} else {
				if (_v3.b.b.$ === 'Err') {
					var _v6 = _v3.b;
					var annVal = _v6.a;
					var errors = _v6.b.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Err(
							$mgold$elm_nonempty_list$List$Nonempty$fromElement(
								A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, idx, errors))));
				} else {
					var _v7 = _v3.a.a;
					var warnAcc = _v7.a;
					var valAcc = _v7.b;
					var _v8 = _v3.b;
					var annVal = _v8.a;
					var res = _v8.b.a;
					return _Utils_Tuple3(
						idx - 1,
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(true, annVal),
							jsonAcc),
						$elm$core$Result$Ok(
							_Utils_Tuple2(
								_Utils_ap(res.warnings, warnAcc),
								A2($elm$core$List$cons, res.value, valAcc))));
				}
			}
		});
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			if (json.$ === 'Array') {
				var values = json.b;
				return function (_v2) {
					var jsonEntries = _v2.b;
					var res = _v2.c;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Array, true, jsonEntries),
						A2($elm$core$Result$map, finalize, res));
				}(
					A3(
						$elm$core$List$foldr,
						accumulate,
						_Utils_Tuple3(
							$elm$core$List$length(values) - 1,
							_List_Nil,
							$elm$core$Result$Ok(
								_Utils_Tuple2(_List_Nil, _List_Nil))),
						values));
			} else {
				return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray, json);
			}
		});
};
var $dillonkearns$elm_pages$OptimizedDecoder$list = function (_v0) {
	var jd = _v0.a;
	var jde = _v0.b;
	return A2(
		$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
		$elm$json$Json$Decode$list(jd),
		$zwilias$json_decode_exploration$Json$Decode$Exploration$list(jde));
};
var $dillonkearns$elm_pages$OptimizedDecoder$andMap = $dillonkearns$elm_pages$OptimizedDecoder$map2($elm$core$Basics$apR);
var $zwilias$json_decode_exploration$Json$Decode$Exploration$mapAcc = F2(
	function (f, acc) {
		return {
			value: f(acc.value),
			warnings: acc.warnings
		};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$map = F2(
	function (f, _v0) {
		var decoderFn = _v0.a;
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				return A2(
					$elm$core$Tuple$mapSecond,
					$elm$core$Result$map(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$mapAcc(f)),
					decoderFn(json));
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map = F2(
	function (f, _v0) {
		var jd = _v0.a;
		var jde = _v0.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A2($elm$json$Json$Decode$map, f, jd),
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, f, jde));
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map5 = F6(
	function (f, decoderA, decoderB, decoderC, decoderD, decoderE) {
		return A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			decoderE,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				decoderD,
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$andMap,
					decoderC,
					A2(
						$dillonkearns$elm_pages$OptimizedDecoder$andMap,
						decoderB,
						A2($dillonkearns$elm_pages$OptimizedDecoder$map, f, decoderA)))));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TString = {$: 'TString'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed = function (annotatedValue) {
	switch (annotatedValue.$) {
		case 'String':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$String, true, val);
		case 'Number':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Number, true, val);
		case 'Bool':
			var val = annotatedValue.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Bool, true, val);
		case 'Null':
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$Null(true);
		case 'Array':
			var values = annotatedValue.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Array,
				true,
				A2(
					$elm$core$List$map,
					function (_v1) {
						var v = _v1.b;
						return _Utils_Tuple2(
							true,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(v));
					},
					values));
		default:
			var values = annotatedValue.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Object,
				true,
				A2(
					$elm$core$List$map,
					function (_v2) {
						var f = _v2.b;
						var v = _v2.c;
						return _Utils_Tuple3(
							true,
							f,
							$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(v));
					},
					values));
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$ok = F2(
	function (json, val) {
		return _Utils_Tuple2(
			json,
			$elm$core$Result$Ok(
				{value: val, warnings: _List_Nil}));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$string = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'String') {
			var val = json.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				val);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TString, json);
		}
	});
var $dillonkearns$elm_pages$OptimizedDecoder$string = A2($dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder, $elm$json$Json$Decode$string, $zwilias$json_decode_exploration$Json$Decode$Exploration$string);
var $author$project$BlogPosts$decodeBlogPost = A6(
	$dillonkearns$elm_pages$OptimizedDecoder$map5,
	$author$project$Datatypes$Blog,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'title', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'metadata',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'tags',
			$dillonkearns$elm_pages$OptimizedDecoder$list(
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$field,
					'sys',
					A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string))))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'content', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'slug', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'createdAt', $dillonkearns$elm_pages$OptimizedDecoder$string)));
var $author$project$BlogPosts$decodeBlogPosts = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$field,
	'items',
	$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$BlogPosts$decodeBlogPost));
var $dillonkearns$elm_pages$DataSource$Http$emptyBody = $dillonkearns$elm_pages$Pages$Internal$StaticHttpBody$EmptyBody;
var $dillonkearns$elm_pages$Secrets$map = F2(
	function (mapFunction, _v0) {
		var lookupSecrets = _v0.a;
		return $dillonkearns$elm_pages$Secrets$Value(
			function (secrets) {
				return A2(
					$elm$core$Result$map,
					mapFunction,
					lookupSecrets(secrets));
			});
	});
var $dillonkearns$elm_pages$DataSource$Http$ExpectJson = function (a) {
	return {$: 'ExpectJson', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$CliOnly = {$: 'CliOnly'};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError = function (a) {
	return {$: 'DecoderError', a: a};
};
var $dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse = F2(
	function (a, b) {
		return {$: 'MissingHttpResponse', a: a, b: b};
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (result.$ === 'Ok') {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson = {$: 'BadJson'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Errors = function (a) {
	return {$: 'Errors', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Success = function (a) {
	return {$: 'Success', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$WithWarnings = F2(
	function (a, b) {
		return {$: 'WithWarnings', a: a, b: b};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedField = function (a) {
	return {$: 'UnusedField', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedIndex = function (a) {
	return {$: 'UnusedIndex', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue = function (a) {
	return {$: 'UnusedValue', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings = function (json) {
	_v0$8:
	while (true) {
		switch (json.$) {
			case 'String':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Number':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Bool':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Null':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					break _v0$8;
				}
			case 'Array':
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					var values = json.b;
					return $elm$core$List$concat(
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (idx, _v1) {
									var used = _v1.a;
									var val = _v1.b;
									if (used) {
										var _v2 = $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(val);
										if (!_v2.b) {
											return _List_Nil;
										} else {
											var x = _v2.a;
											var xs = _v2.b;
											return _List_fromArray(
												[
													A2(
													$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex,
													idx,
													A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs))
												]);
										}
									} else {
										return _List_fromArray(
											[
												$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
												$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedIndex(idx))
											]);
									}
								}),
							values));
				}
			default:
				if (!json.a) {
					return _List_fromArray(
						[
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedValue(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$encode(json)))
						]);
				} else {
					var kvPairs = json.b;
					return A2(
						$elm$core$List$concatMap,
						function (_v3) {
							var used = _v3.a;
							var key = _v3.b;
							var val = _v3.c;
							if (used) {
								var _v4 = $zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(val);
								if (!_v4.b) {
									return _List_Nil;
								} else {
									var x = _v4.a;
									var xs = _v4.b;
									return _List_fromArray(
										[
											A2(
											$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$InField,
											key,
											A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs))
										]);
								}
							} else {
								return _List_fromArray(
									[
										$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
										$zwilias$json_decode_exploration$Json$Decode$Exploration$UnusedField(key))
									]);
							}
						},
						kvPairs);
				}
		}
	}
	return _List_Nil;
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue = F2(
	function (_v0, val) {
		var decoderFn = _v0.a;
		var _v1 = $zwilias$json_decode_exploration$Json$Decode$Exploration$decode(val);
		if (_v1.$ === 'Err') {
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson;
		} else {
			var json = _v1.a;
			var _v2 = decoderFn(json);
			if (_v2.b.$ === 'Err') {
				var errors = _v2.b.a;
				return $zwilias$json_decode_exploration$Json$Decode$Exploration$Errors(errors);
			} else {
				var annVal = _v2.a;
				var acc = _v2.b.a;
				var _v3 = _Utils_ap(
					acc.warnings,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$gatherWarnings(annVal));
				if (!_v3.b) {
					return $zwilias$json_decode_exploration$Json$Decode$Exploration$Success(acc.value);
				} else {
					var x = _v3.a;
					var xs = _v3.b;
					return A2(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$WithWarnings,
						A2($mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, xs),
						acc.value);
				}
			}
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$decodeString = F2(
	function (decoder, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$json$Json$Decode$value, jsonString);
		if (_v0.$ === 'Err') {
			return $zwilias$json_decode_exploration$Json$Decode$Exploration$BadJson;
		} else {
			var json = _v0.a;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$decodeValue, decoder, json);
		}
	});
var $dillonkearns$elm_pages$OptimizedDecoder$errorToString = $elm$json$Json$Decode$errorToString;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$expectedTypeToString = function (expectedType) {
	switch (expectedType.$) {
		case 'TString':
			return 'a string';
		case 'TInt':
			return 'an integer number';
		case 'TNumber':
			return 'a number';
		case 'TNull':
			return 'null';
		case 'TBool':
			return 'a boolean';
		case 'TArray':
			return 'an array';
		case 'TObject':
			return 'an object';
		case 'TArrayIndex':
			var idx = expectedType.a;
			return 'an array with index ' + $elm$core$String$fromInt(idx);
		default:
			var aField = expectedType.a;
			return 'an object with a field \'' + (aField + '\'');
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$indent = $elm$core$List$map(
	$elm$core$Basics$append('  '));
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$intercalateMap = F3(
	function (sep, toList, xs) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[sep]),
				A2($elm$core$List$map, toList, xs)));
	});
var $elm$core$String$lines = _String_lines;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines = A2(
	$elm$core$Basics$composeR,
	$elm$json$Json$Encode$encode(2),
	$elm$core$String$lines);
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$flatten = function (located) {
	switch (located.$) {
		case 'Here':
			var v = located.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'',
					_List_fromArray(
						[v]))
				]);
		case 'InField':
			var s = located.a;
			var vals = located.b;
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather, '/' + s, vals);
		default:
			var i = located.a;
			var vals = located.b;
			return A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather,
				'/' + $elm$core$String$fromInt(i),
				vals);
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather = F2(
	function (prefix, _v0) {
		var first = _v0.a;
		var rest = _v0.b;
		return A2(
			$elm$core$List$map,
			$elm$core$Tuple$mapFirst(
				$elm$core$Basics$append(prefix)),
			A2(
				$elm$core$List$concatMap,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$flatten,
				A2($elm$core$List$cons, first, rest)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$intercalate = F2(
	function (sep, lists) {
		return $elm$core$List$concat(
			A2(
				$elm$core$List$intersperse,
				_List_fromArray(
					[sep]),
				lists));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$indent = $elm$core$Basics$append('  ');
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$render = F3(
	function (itemToString, path, errors) {
		var formattedErrors = A2(
			$elm$core$List$map,
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$indent,
			A2($elm$core$List$concatMap, itemToString, errors));
		return $elm$core$String$isEmpty(path) ? formattedErrors : A2(
			$elm$core$List$cons,
			'At path ' + path,
			A2($elm$core$List$cons, '', formattedErrors));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$Located$toString = F2(
	function (itemToString, locatedItems) {
		return A2(
			$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$intercalate,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					var x = _v0.a;
					var vals = _v0.b;
					return A3($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$render, itemToString, x, vals);
				},
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$gather, '', locatedItems)));
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorToString = function (error) {
	switch (error.$) {
		case 'Failure':
			var failure = error.a;
			var json = error.b;
			if (json.$ === 'Just') {
				var val = json.a;
				return A2(
					$elm$core$List$cons,
					failure,
					A2(
						$elm$core$List$cons,
						'',
						$zwilias$json_decode_exploration$Json$Decode$Exploration$indent(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines(val))));
			} else {
				return _List_fromArray(
					[failure]);
			}
		case 'Expected':
			var expectedType = error.a;
			var actualValue = error.b;
			return A2(
				$elm$core$List$cons,
				'I expected ' + ($zwilias$json_decode_exploration$Json$Decode$Exploration$expectedTypeToString(expectedType) + ' here, but instead found this value:'),
				A2(
					$elm$core$List$cons,
					'',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$indent(
						$zwilias$json_decode_exploration$Json$Decode$Exploration$jsonLines(actualValue))));
		default:
			var errors = error.a;
			if (!errors.b) {
				return _List_fromArray(
					['I encountered a `oneOf` without any options.']);
			} else {
				return A2(
					$elm$core$List$cons,
					'I encountered multiple issues:',
					A2(
						$elm$core$List$cons,
						'',
						A3($zwilias$json_decode_exploration$Json$Decode$Exploration$intercalateMap, '', $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings, errors)));
			}
	}
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings = function (errors) {
	return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$toString, $zwilias$json_decode_exploration$Json$Decode$Exploration$errorToString, errors);
};
var $elm$core$String$trimRight = _String_trimRight;
var $zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString = function (errors) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2(
			$elm$core$List$map,
			$elm$core$String$trimRight,
			A2(
				$elm$core$List$cons,
				'I encountered some errors while decoding this JSON:',
				A2(
					$elm$core$List$cons,
					'',
					$zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToStrings(errors)))));
};
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_pages$RequestsAndPending$get = F2(
	function (key, requestsAndPending) {
		return A2(
			$elm$core$Maybe$andThen,
			$elm$core$Basics$identity,
			A2($elm$core$Dict$get, key, requestsAndPending));
	});
var $dillonkearns$elm_pages$Internal$OptimizedDecoder$jd = function (_v0) {
	var jd_ = _v0.a;
	return jd_;
};
var $dillonkearns$elm_pages$DataSource$Http$requestToString = function (requestDetails) {
	return requestDetails.url;
};
var $dillonkearns$elm_pages$DataSource$Http$toResult = function (result) {
	if (result.$ === 'Err') {
		var error = result.a;
		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$RequestError(error);
	} else {
		var _v1 = result.a;
		var stripped = _v1.a;
		var okValue = _v1.b;
		return A2($dillonkearns$elm_pages$Pages$StaticHttpRequest$ApiRoute, stripped, okValue);
	}
};
var $dillonkearns$elm_pages$DataSource$Http$unoptimizedRequest = F2(
	function (requestWithSecrets, expect) {
		switch (expect.$) {
			case 'ExpectJson':
				var decoder = expect.a;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					$elm$core$Dict$empty,
					_Utils_Tuple2(
						_List_fromArray(
							[requestWithSecrets]),
						F3(
							function (keepOrDiscard, appType, rawResponseDict) {
								if (appType.$ === 'Cli') {
									return $dillonkearns$elm_pages$DataSource$Http$toResult(
										A2(
											$elm$core$Result$andThen,
											function (_v5) {
												var strippedResponses = _v5.a;
												var rawResponse = _v5.b;
												return A2(
													$elm$core$Result$map,
													function (finalRequest) {
														return _Utils_Tuple2(
															function () {
																if (keepOrDiscard.$ === 'Keep') {
																	return A3(
																		$elm$core$Dict$insert,
																		$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																			$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																		$dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(
																			A2(
																				$dillonkearns$elm_pages$OptimizedDecoder$map,
																				function (_v8) {
																					return _Utils_Tuple0;
																				},
																				decoder)),
																		strippedResponses);
																} else {
																	return A3(
																		$elm$core$Dict$insert,
																		$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																			$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																		$dillonkearns$elm_pages$Pages$StaticHttpRequest$CliOnly,
																		strippedResponses);
																}
															}(),
															finalRequest);
													},
													function (decodeResult) {
														switch (decodeResult.$) {
															case 'BadJson':
																return $elm$core$Result$Err(
																	$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError('Payload sent back invalid JSON\n' + rawResponse));
															case 'Errors':
																var errors = decodeResult.a;
																return $elm$core$Result$Err(
																	$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError(
																		$zwilias$json_decode_exploration$Json$Decode$Exploration$errorsToString(errors)));
															case 'WithWarnings':
																var a = decodeResult.b;
																return $elm$core$Result$Ok(a);
															default:
																var a = decodeResult.a;
																return $elm$core$Result$Ok(a);
														}
													}(
														A2(
															$zwilias$json_decode_exploration$Json$Decode$Exploration$decodeString,
															$dillonkearns$elm_pages$Internal$OptimizedDecoder$jde(decoder),
															rawResponse)));
											},
											function (maybeResponse) {
												if (maybeResponse.$ === 'Just') {
													var rawResponse = maybeResponse.a;
													return $elm$core$Result$Ok(
														_Utils_Tuple2(
															A2(
																$elm$core$Dict$singleton,
																$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																	$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																function () {
																	if (keepOrDiscard.$ === 'Keep') {
																		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$StripResponse(
																			A2(
																				$dillonkearns$elm_pages$OptimizedDecoder$map,
																				function (_v4) {
																					return _Utils_Tuple0;
																				},
																				decoder));
																	} else {
																		return $dillonkearns$elm_pages$Pages$StaticHttpRequest$CliOnly;
																	}
																}()),
															rawResponse));
												} else {
													return $elm$core$Result$Err(
														A2(
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
															$dillonkearns$elm_pages$DataSource$Http$requestToString(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															_List_fromArray(
																[requestWithSecrets])));
												}
											}(
												A2(
													$dillonkearns$elm_pages$RequestsAndPending$get,
													$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
														$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
													rawResponseDict))));
								} else {
									return $dillonkearns$elm_pages$DataSource$Http$toResult(
										A2(
											$elm$core$Result$andThen,
											function (_v10) {
												var strippedResponses = _v10.a;
												var rawResponse = _v10.b;
												return A2(
													$elm$core$Result$map,
													function (finalRequest) {
														return _Utils_Tuple2(strippedResponses, finalRequest);
													},
													function (decodeResult) {
														if (decodeResult.$ === 'Err') {
															var error = decodeResult.a;
															return $elm$core$Result$Err(
																$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError(
																	'Payload sent back invalid JSON\n' + (rawResponse + ('\n KEYS' + (A2(
																		$elm$core$String$join,
																		' - ',
																		$elm$core$Dict$keys(strippedResponses)) + $elm$json$Json$Decode$errorToString(error))))));
														} else {
															var a = decodeResult.a;
															return $elm$core$Result$Ok(a);
														}
													}(
														A2(
															$elm$json$Json$Decode$decodeString,
															$dillonkearns$elm_pages$Internal$OptimizedDecoder$jd(decoder),
															rawResponse)));
											},
											function (maybeResponse) {
												if (maybeResponse.$ === 'Just') {
													var rawResponse = maybeResponse.a;
													return $elm$core$Result$Ok(
														_Utils_Tuple2(
															A2(
																$elm$core$Dict$singleton,
																$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																	$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
																$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse),
															rawResponse));
												} else {
													return $elm$core$Result$Err(
														A2(
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
															$dillonkearns$elm_pages$DataSource$Http$requestToString(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															_List_fromArray(
																[requestWithSecrets])));
												}
											}(
												A2(
													$dillonkearns$elm_pages$RequestsAndPending$get,
													$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
														$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
													rawResponseDict))));
								}
							})));
			case 'ExpectUnoptimizedJson':
				var decoder = expect.a;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					$elm$core$Dict$empty,
					_Utils_Tuple2(
						_List_fromArray(
							[requestWithSecrets]),
						F3(
							function (_v12, _v13, rawResponseDict) {
								return $dillonkearns$elm_pages$DataSource$Http$toResult(
									A2(
										$elm$core$Result$andThen,
										function (_v15) {
											var strippedResponses = _v15.a;
											var rawResponse = _v15.b;
											return A2(
												$elm$core$Result$map,
												function (finalRequest) {
													return _Utils_Tuple2(
														A3(
															$elm$core$Dict$insert,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse,
															strippedResponses),
														finalRequest);
												},
												function (decodeResult) {
													if (decodeResult.$ === 'Err') {
														var error = decodeResult.a;
														return $elm$core$Result$Err(
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError(
																$dillonkearns$elm_pages$OptimizedDecoder$errorToString(error)));
													} else {
														var a = decodeResult.a;
														return $elm$core$Result$Ok(a);
													}
												}(
													A2($elm$json$Json$Decode$decodeString, decoder, rawResponse)));
										},
										function (maybeResponse) {
											if (maybeResponse.$ === 'Just') {
												var rawResponse = maybeResponse.a;
												return $elm$core$Result$Ok(
													_Utils_Tuple2(
														A2(
															$elm$core$Dict$singleton,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse),
														rawResponse));
											} else {
												return $elm$core$Result$Err(
													A2(
														$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
														$dillonkearns$elm_pages$DataSource$Http$requestToString(
															$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
														_List_fromArray(
															[requestWithSecrets])));
											}
										}(
											A2(
												$dillonkearns$elm_pages$RequestsAndPending$get,
												$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
													$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
												rawResponseDict))));
							})));
			default:
				var mapStringFn = expect.a;
				return A2(
					$dillonkearns$elm_pages$Pages$StaticHttpRequest$Request,
					$elm$core$Dict$empty,
					_Utils_Tuple2(
						_List_fromArray(
							[requestWithSecrets]),
						F3(
							function (_v17, _v18, rawResponseDict) {
								return $dillonkearns$elm_pages$DataSource$Http$toResult(
									A2(
										$elm$core$Result$andThen,
										function (_v20) {
											var strippedResponses = _v20.a;
											var rawResponse = _v20.b;
											return A2(
												$elm$core$Result$map,
												function (finalRequest) {
													return _Utils_Tuple2(
														A3(
															$elm$core$Dict$insert,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse,
															strippedResponses),
														finalRequest);
												},
												A2(
													$elm$core$Result$mapError,
													$dillonkearns$elm_pages$Pages$StaticHttpRequest$DecoderError,
													mapStringFn(rawResponse)));
										},
										function (maybeResponse) {
											if (maybeResponse.$ === 'Just') {
												var rawResponse = maybeResponse.a;
												return $elm$core$Result$Ok(
													_Utils_Tuple2(
														A2(
															$elm$core$Dict$singleton,
															$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
																$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
															$dillonkearns$elm_pages$Pages$StaticHttpRequest$UseRawResponse),
														rawResponse));
											} else {
												return $elm$core$Result$Err(
													A2(
														$dillonkearns$elm_pages$Pages$StaticHttpRequest$MissingHttpResponse,
														$dillonkearns$elm_pages$DataSource$Http$requestToString(
															$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
														_List_fromArray(
															[requestWithSecrets])));
											}
										}(
											A2(
												$dillonkearns$elm_pages$RequestsAndPending$get,
												$dillonkearns$elm_pages$Pages$StaticHttp$Request$hash(
													$dillonkearns$elm_pages$Secrets$maskedLookup(requestWithSecrets)),
												rawResponseDict))));
							})));
		}
	});
var $dillonkearns$elm_pages$DataSource$Http$request = F2(
	function (urlWithSecrets, decoder) {
		return A2(
			$dillonkearns$elm_pages$DataSource$Http$unoptimizedRequest,
			urlWithSecrets,
			$dillonkearns$elm_pages$DataSource$Http$ExpectJson(decoder));
	});
var $dillonkearns$elm_pages$DataSource$Http$get = F2(
	function (url, decoder) {
		return A2(
			$dillonkearns$elm_pages$DataSource$Http$request,
			A2(
				$dillonkearns$elm_pages$Secrets$map,
				function (okUrl) {
					return {body: $dillonkearns$elm_pages$DataSource$Http$emptyBody, headers: _List_Nil, method: 'GET', url: okUrl};
				},
				url),
			decoder);
	});
var $dillonkearns$elm_pages$Secrets$succeed = function (value) {
	return $dillonkearns$elm_pages$Secrets$Value(
		function (_v0) {
			return $elm$core$Result$Ok(value);
		});
};
var $dillonkearns$elm_pages$Pages$Secrets$succeed = $dillonkearns$elm_pages$Secrets$succeed;
var $author$project$BlogPosts$blogPostFromSlug = function (slug) {
	return A2(
		$dillonkearns$elm_pages$DataSource$Http$get,
		$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=blog&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=-sys.createdAt&fields.slug=' + slug),
		$author$project$BlogPosts$decodeBlogPosts);
};
var $author$project$Page$Blog$Name_$data = function (routeParams) {
	return $author$project$BlogPosts$blogPostFromSlug(routeParams.name);
};
var $dillonkearns$elm_pages$Pages$Url$External = function (a) {
	return {$: 'External', a: a};
};
var $dillonkearns$elm_pages$Pages$Url$external = function (externalUrl) {
	return $dillonkearns$elm_pages$Pages$Url$External(externalUrl);
};
var $dillonkearns$elm_pages$Head$Twitter$Regular = {$: 'Regular'};
var $dillonkearns$elm_pages$Head$Twitter$Summary = function (a) {
	return {$: 'Summary', a: a};
};
var $dillonkearns$elm_pages$Head$Seo$buildSummary = F2(
	function (_v0, summarySize) {
		var title = _v0.title;
		var image = _v0.image;
		var canonicalUrlOverride = _v0.canonicalUrlOverride;
		var description = _v0.description;
		var siteName = _v0.siteName;
		var locale = _v0.locale;
		return {
			alternateLocales: _List_Nil,
			audio: $elm$core$Maybe$Nothing,
			canonicalUrlOverride: canonicalUrlOverride,
			description: description,
			image: image,
			locale: locale,
			siteName: siteName,
			title: title,
			twitterCard: $dillonkearns$elm_pages$Head$Twitter$Summary(
				{
					description: $elm$core$Maybe$Just(description),
					image: $elm$core$Maybe$Just(
						{alt: image.alt, url: image.url}),
					siteUser: $elm$core$Maybe$Nothing,
					size: summarySize,
					title: title
				}),
			video: $elm$core$Maybe$Nothing
		};
	});
var $dillonkearns$elm_pages$Head$Seo$summary = function (config) {
	return A2($dillonkearns$elm_pages$Head$Seo$buildSummary, config, $dillonkearns$elm_pages$Head$Twitter$Regular);
};
var $dillonkearns$elm_pages$Head$Seo$Content = F2(
	function (a, b) {
		return {$: 'Content', a: a, b: b};
	});
var $dillonkearns$elm_pages$Head$Seo$Website = {$: 'Website'};
var $dillonkearns$elm_pages$Head$metaName = F2(
	function (name, content) {
		return A2(
			$dillonkearns$elm_pages$Head$node,
			'meta',
			_List_fromArray(
				[
					_Utils_Tuple2(
					'name',
					$dillonkearns$elm_pages$Head$Raw(name)),
					_Utils_Tuple2('content', content)
				]));
	});
var $dillonkearns$elm_pages$Head$metaProperty = F2(
	function (property, content) {
		return A2(
			$dillonkearns$elm_pages$Head$node,
			'meta',
			_List_fromArray(
				[
					_Utils_Tuple2(
					'property',
					$dillonkearns$elm_pages$Head$raw(property)),
					_Utils_Tuple2('content', content)
				]));
	});
var $dillonkearns$elm_pages$Head$Twitter$cardValue = function (card) {
	switch (card.$) {
		case 'Summary':
			var details = card.a;
			var _v1 = details.size;
			if (_v1.$ === 'Regular') {
				return 'summary';
			} else {
				return 'summary_large_image';
			}
		case 'App':
			return 'app';
		default:
			return 'player';
	}
};
var $dillonkearns$elm_pages$Head$FullUrl = function (a) {
	return {$: 'FullUrl', a: a};
};
var $dillonkearns$elm_pages$Head$urlAttribute = function (value) {
	return $dillonkearns$elm_pages$Head$FullUrl(value);
};
var $dillonkearns$elm_pages$Head$Twitter$rawTags = function (card) {
	return A2(
		$elm$core$List$cons,
		_Utils_Tuple2(
			'twitter:card',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(
					$dillonkearns$elm_pages$Head$Twitter$cardValue(card)))),
		function () {
			switch (card.$) {
				case 'Summary':
					var details = card.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'twitter:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.title))),
							_Utils_Tuple2(
							'twitter:site',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.siteUser)),
							_Utils_Tuple2(
							'twitter:description',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.description)),
							_Utils_Tuple2(
							'twitter:image',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$urlAttribute,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.url;
									},
									details.image))),
							_Utils_Tuple2(
							'twitter:image:alt',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.alt;
									},
									details.image)))
						]);
				case 'App':
					var details = card.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'twitter:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.title))),
							_Utils_Tuple2(
							'twitter:site',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.siteUser))),
							_Utils_Tuple2(
							'twitter:description',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.description)),
							_Utils_Tuple2(
							'twitter:image',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$urlAttribute,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.url;
									},
									details.image))),
							_Utils_Tuple2(
							'twitter:image:alt',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2(
									$elm$core$Maybe$map,
									function ($) {
										return $.alt;
									},
									details.image))),
							_Utils_Tuple2(
							'twitter:app:name:iphone',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appNameIphone)),
							_Utils_Tuple2(
							'twitter:app:name:ipad',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appNameIpad)),
							_Utils_Tuple2(
							'twitter:app:name:googleplay',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appNameGooglePlay)),
							_Utils_Tuple2(
							'twitter:app:id:iphone',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2($elm$core$Maybe$map, $elm$core$String$fromInt, details.appIdIphone))),
							_Utils_Tuple2(
							'twitter:app:id:ipad',
							A2(
								$elm$core$Maybe$map,
								$dillonkearns$elm_pages$Head$raw,
								A2($elm$core$Maybe$map, $elm$core$String$fromInt, details.appIdIpad))),
							_Utils_Tuple2(
							'twitter:app:id:googleplay',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appIdGooglePlay)),
							_Utils_Tuple2(
							'twitter:app:url:iphone',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appUrlIphone)),
							_Utils_Tuple2(
							'twitter:app:url:ipad',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appUrlIpad)),
							_Utils_Tuple2(
							'twitter:app:url:googleplay',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appUrlGooglePlay)),
							_Utils_Tuple2(
							'twitter:app:country',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.appCountry))
						]);
				default:
					var details = card.a;
					return _List_fromArray(
						[
							_Utils_Tuple2(
							'twitter:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.title))),
							_Utils_Tuple2(
							'twitter:site',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.siteUser))),
							_Utils_Tuple2(
							'twitter:description',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, details.description)),
							_Utils_Tuple2(
							'twitter:image',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$urlAttribute(details.image.url))),
							_Utils_Tuple2(
							'twitter:image:alt',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(details.image.alt)))
						]);
			}
		}());
};
var $dillonkearns$elm_pages$Head$Seo$tagsForAudio = function (audio) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'og:audio',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(audio.url))),
			_Utils_Tuple2(
			'og:audio:secure_url',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(audio.url))),
			_Utils_Tuple2(
			'og:audio:type',
			A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, audio.mimeType))
		]);
};
var $dillonkearns$elm_pages$Head$Seo$tagsForImage = function (image) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'og:image',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$urlAttribute(image.url))),
			_Utils_Tuple2(
			'og:image:secure_url',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$urlAttribute(image.url))),
			_Utils_Tuple2(
			'og:image:alt',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(image.alt))),
			_Utils_Tuple2(
			'og:image:width',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.width;
						},
						image.dimensions)))),
			_Utils_Tuple2(
			'og:image:height',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.height;
						},
						image.dimensions))))
		]);
};
var $dillonkearns$elm_pages$Head$Seo$tagsForVideo = function (video) {
	return _List_fromArray(
		[
			_Utils_Tuple2(
			'og:video',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(video.url))),
			_Utils_Tuple2(
			'og:video:secure_url',
			$elm$core$Maybe$Just(
				$dillonkearns$elm_pages$Head$raw(video.url))),
			_Utils_Tuple2(
			'og:video:width',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.width;
						},
						video.dimensions)))),
			_Utils_Tuple2(
			'og:video:height',
			A2(
				$elm$core$Maybe$map,
				$dillonkearns$elm_pages$Head$raw,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$fromInt,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.height;
						},
						video.dimensions))))
		]);
};
var $dillonkearns$elm_pages$Head$Seo$tagsForCommon = function (common) {
	return _Utils_ap(
		$dillonkearns$elm_pages$Head$Seo$tagsForImage(common.image),
		_Utils_ap(
			A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$Seo$tagsForAudio, common.audio)),
			_Utils_ap(
				A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$Seo$tagsForVideo, common.video)),
				_Utils_ap(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'og:title',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(common.title))),
							_Utils_Tuple2(
							'og:url',
							$elm$core$Maybe$Just(
								A2(
									$elm$core$Maybe$withDefault,
									$dillonkearns$elm_pages$Head$currentPageFullUrl,
									A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, common.canonicalUrlOverride)))),
							_Utils_Tuple2(
							'og:description',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(common.description))),
							_Utils_Tuple2(
							'og:site_name',
							$elm$core$Maybe$Just(
								$dillonkearns$elm_pages$Head$raw(common.siteName))),
							_Utils_Tuple2(
							'og:locale',
							A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, common.locale))
						]),
					_Utils_ap(
						A2(
							$elm$core$List$map,
							function (alternateLocale) {
								return _Utils_Tuple2(
									'og:locale:alternate',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw(alternateLocale)));
							},
							common.alternateLocales),
						$dillonkearns$elm_pages$Head$Twitter$rawTags(common.twitterCard))))));
};
var $dillonkearns$elm_pages$Head$Seo$tags = function (_v0) {
	var common = _v0.a;
	var details = _v0.b;
	return A2(
		$elm$core$List$append,
		_List_fromArray(
			[
				$dillonkearns$elm_pages$Head$canonicalLink(common.canonicalUrlOverride),
				A2(
				$dillonkearns$elm_pages$Head$metaName,
				'description',
				$dillonkearns$elm_pages$Head$raw(common.description))
			]),
		A2(
			$elm$core$List$filterMap,
			function (_v2) {
				var name = _v2.a;
				var maybeContent = _v2.b;
				return A2(
					$elm$core$Maybe$map,
					function (metaContent) {
						return A2($dillonkearns$elm_pages$Head$metaProperty, name, metaContent);
					},
					maybeContent);
			},
			_Utils_ap(
				$dillonkearns$elm_pages$Head$Seo$tagsForCommon(common),
				function () {
					switch (details.$) {
						case 'Website':
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'og:type',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw('website')))
								]);
						case 'Article':
							var articleDetails = details.a;
							return _Utils_ap(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'og:type',
										$elm$core$Maybe$Just(
											$dillonkearns$elm_pages$Head$raw('article'))),
										_Utils_Tuple2(
										'article:section',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.section)),
										_Utils_Tuple2(
										'article:published_time',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.publishedTime)),
										_Utils_Tuple2(
										'article:modified_time',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.modifiedTime)),
										_Utils_Tuple2(
										'article:expiration_time',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, articleDetails.expirationTime))
									]),
								A2(
									$elm$core$List$map,
									function (tag) {
										return _Utils_Tuple2(
											'article:tag',
											$elm$core$Maybe$Just(
												$dillonkearns$elm_pages$Head$raw(tag)));
									},
									articleDetails.tags));
						case 'Book':
							var bookDetails = details.a;
							return _Utils_ap(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'og:type',
										$elm$core$Maybe$Just(
											$dillonkearns$elm_pages$Head$raw('book'))),
										_Utils_Tuple2(
										'og:isbn',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, bookDetails.isbn)),
										_Utils_Tuple2(
										'og:release_date',
										A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, bookDetails.releaseDate))
									]),
								A2(
									$elm$core$List$map,
									function (tag) {
										return _Utils_Tuple2(
											'book:tag',
											$elm$core$Maybe$Just(
												$dillonkearns$elm_pages$Head$raw(tag)));
									},
									bookDetails.tags));
						case 'Song':
							var songDetails = details.a;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'og:type',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw('music.song'))),
									_Utils_Tuple2(
									'music:duration',
									A2(
										$elm$core$Maybe$map,
										$dillonkearns$elm_pages$Head$raw,
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, songDetails.duration))),
									_Utils_Tuple2(
									'music:album:disc',
									A2(
										$elm$core$Maybe$map,
										$dillonkearns$elm_pages$Head$raw,
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, songDetails.disc))),
									_Utils_Tuple2(
									'music:album:track',
									A2(
										$elm$core$Maybe$map,
										$dillonkearns$elm_pages$Head$raw,
										A2($elm$core$Maybe$map, $elm$core$String$fromInt, songDetails.track)))
								]);
						default:
							var profileDetails = details.a;
							return _List_fromArray(
								[
									_Utils_Tuple2(
									'og:type',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw('profile'))),
									_Utils_Tuple2(
									'profile:first_name',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw(profileDetails.firstName))),
									_Utils_Tuple2(
									'profile:last_name',
									$elm$core$Maybe$Just(
										$dillonkearns$elm_pages$Head$raw(profileDetails.lastName))),
									_Utils_Tuple2(
									'profile:username',
									A2($elm$core$Maybe$map, $dillonkearns$elm_pages$Head$raw, profileDetails.username))
								]);
					}
				}())));
};
var $dillonkearns$elm_pages$Head$Seo$website = function (common) {
	return $dillonkearns$elm_pages$Head$Seo$tags(
		A2($dillonkearns$elm_pages$Head$Seo$Content, common, $dillonkearns$elm_pages$Head$Seo$Website));
};
var $author$project$Page$Blog$Name_$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — ' + A2(
					$elm$core$Maybe$withDefault,
					{content: '404', createdAt: 'Never', slug: 'error', tags: _List_Nil, title: 'Not found'},
					$elm$core$List$head(_static.data)).title
			}));
};
var $author$project$Page$WithData = function (a) {
	return {$: 'WithData', a: a};
};
var $author$project$Page$prerender = function (_v0) {
	var data = _v0.data;
	var head = _v0.head;
	var routes = _v0.routes;
	return $author$project$Page$WithData(
		{
			data: data,
			handleRoute: F3(
				function (moduleContext, toRecord, routeParams) {
					return A2(
						$dillonkearns$elm_pages$DataSource$map,
						function (allRoutes) {
							return A2($elm$core$List$member, routeParams, allRoutes) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(
								A2(
									$dillonkearns$elm_pages$Pages$Internal$NotFoundReason$NotPrerendered,
									{
										matchedRouteParams: toRecord(routeParams),
										moduleName: moduleContext.moduleName,
										routePattern: moduleContext.routePattern
									},
									A2($elm$core$List$map, toRecord, allRoutes)));
						},
						routes);
				}),
			head: head,
			kind: 'prerender',
			serverless: false,
			staticRoutes: routes
		});
};
var $author$project$Page$Blog$Name_$RouteParams = function (name) {
	return {name: name};
};
var $author$project$Page$Blog$Name_$decodeBlogSlug = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$map,
	$author$project$Page$Blog$Name_$RouteParams,
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'slug', $dillonkearns$elm_pages$OptimizedDecoder$string));
var $author$project$Page$Blog$Name_$decodeBlogSlugs = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$field,
	'items',
	$dillonkearns$elm_pages$OptimizedDecoder$list(
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'fields', $author$project$Page$Blog$Name_$decodeBlogSlug)));
var $author$project$Page$Blog$Name_$routes = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=blog&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=-sys.createdAt'),
	$author$project$Page$Blog$Name_$decodeBlogSlugs);
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 'AlignX', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$CenterX);
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 'AlignY', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$CenterY);
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 'Unkeyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = {$: 'AsColumn'};
var $mdgriffith$elm_ui$Internal$Model$asColumn = $mdgriffith$elm_ui$Internal$Model$AsColumn;
var $mdgriffith$elm_ui$Internal$Style$classes = {above: 'a', active: 'atv', alignBottom: 'ab', alignCenterX: 'cx', alignCenterY: 'cy', alignContainerBottom: 'acb', alignContainerCenterX: 'accx', alignContainerCenterY: 'accy', alignContainerRight: 'acr', alignLeft: 'al', alignRight: 'ar', alignTop: 'at', alignedHorizontally: 'ah', alignedVertically: 'av', any: 's', behind: 'bh', below: 'b', bold: 'w7', borderDashed: 'bd', borderDotted: 'bdt', borderNone: 'bn', borderSolid: 'bs', capturePointerEvents: 'cpe', clip: 'cp', clipX: 'cpx', clipY: 'cpy', column: 'c', container: 'ctr', contentBottom: 'cb', contentCenterX: 'ccx', contentCenterY: 'ccy', contentLeft: 'cl', contentRight: 'cr', contentTop: 'ct', cursorPointer: 'cptr', cursorText: 'ctxt', focus: 'fcs', focusedWithin: 'focus-within', fullSize: 'fs', grid: 'g', hasBehind: 'hbh', heightContent: 'hc', heightExact: 'he', heightFill: 'hf', heightFillPortion: 'hfp', hover: 'hv', imageContainer: 'ic', inFront: 'fr', inputLabel: 'lbl', inputMultiline: 'iml', inputMultilineFiller: 'imlf', inputMultilineParent: 'imlp', inputMultilineWrapper: 'implw', inputText: 'it', italic: 'i', link: 'lnk', nearby: 'nb', noTextSelection: 'notxt', onLeft: 'ol', onRight: 'or', opaque: 'oq', overflowHidden: 'oh', page: 'pg', paragraph: 'p', passPointerEvents: 'ppe', root: 'ui', row: 'r', scrollbars: 'sb', scrollbarsX: 'sbx', scrollbarsY: 'sby', seButton: 'sbt', single: 'e', sizeByCapital: 'cap', spaceEvenly: 'sev', strike: 'sk', text: 't', textCenter: 'tc', textExtraBold: 'w8', textExtraLight: 'w2', textHeavy: 'w9', textJustify: 'tj', textJustifyAll: 'tja', textLeft: 'tl', textLight: 'w3', textMedium: 'w5', textNormalWeight: 'w4', textRight: 'tr', textSemiBold: 'w6', textThin: 'w1', textUnitalicized: 'tun', transition: 'ts', transparent: 'clr', underline: 'u', widthContent: 'wc', widthExact: 'we', widthFill: 'wf', widthFillPortion: 'wfp', wrapped: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 'Generic'};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 'NoNearbyChildren'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.column);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.grid);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.page);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.row);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context.$) {
		case 'AsRow':
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 'AsColumn':
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 'AsEl':
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 'AsGrid':
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 'AsParagraph':
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 'NoStyleSheet'};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 'Styled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 'Unstyled', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 'NoNearbyChildren':
				return existing;
			case 'ChildrenBehind':
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 'ChildrenInFront':
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = {$: 'AsEl'};
var $mdgriffith$elm_ui$Internal$Model$asEl = $mdgriffith$elm_ui$Internal$Model$AsEl;
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = {$: 'AsParagraph'};
var $mdgriffith$elm_ui$Internal$Model$asParagraph = $mdgriffith$elm_ui$Internal$Model$AsParagraph;
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 'Flag', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 'Second', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 'Px':
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 'Content':
			return 'auto';
		case 'Fill':
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 'Min':
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $elm$core$Basics$round = _Basics_round;
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 'Shadows':
			var name = style.a;
			return name;
		case 'Transparency':
			var name = style.a;
			var o = style.b;
			return name;
		case 'Style':
			var _class = style.a;
			return _class;
		case 'FontFamily':
			var name = style.a;
			return name;
		case 'FontSize':
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 'Single':
			var _class = style.a;
			return _class;
		case 'Colored':
			var _class = style.a;
			return _class;
		case 'SpacingStyle':
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 'PaddingStyle':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'BorderWidth':
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 'GridTemplateStyle':
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
		case 'GridPosition':
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.row) + ('-' + ($elm$core$String$fromInt(pos.col) + ('-' + ($elm$core$String$fromInt(pos.width) + ('-' + $elm$core$String$fromInt(pos.height)))))));
		case 'PseudoSelector':
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector.$) {
					case 'Focus':
						return 'fs';
					case 'Hover':
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (_v0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0.a;
		return A2($elm$core$Dict$member, key, dict);
	});
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.inset ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.offset.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.blur) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.size) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.color))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.focusedWithin) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.borderColor),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.backgroundColor),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										blur: shadow.blur,
										color: shadow.color,
										inset: false,
										offset: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.offset)),
										size: shadow.size
									}));
						},
						focus.shadow),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 'AllChildren', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 'Batch', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 'Child', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 'Descriptor', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 'Prop', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Internal$Style$Self = function (a) {
	return {$: 'Self', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 'Supports', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = function (a) {
	return {$: 'Content', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Internal$Style$CenterX = {$: 'CenterX'};
var $mdgriffith$elm_ui$Internal$Style$CenterY = {$: 'CenterY'};
var $mdgriffith$elm_ui$Internal$Style$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[$mdgriffith$elm_ui$Internal$Style$Top, $mdgriffith$elm_ui$Internal$Style$Bottom, $mdgriffith$elm_ui$Internal$Style$Right, $mdgriffith$elm_ui$Internal$Style$Left, $mdgriffith$elm_ui$Internal$Style$CenterX, $mdgriffith$elm_ui$Internal$Style$CenterY]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc.a.$) {
		case 'Top':
			var _v1 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			var _v2 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		case 'Right':
			var _v3 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		case 'Left':
			var _v4 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'CenterX':
			var _v5 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
		default:
			var _v6 = desc.a;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(
					$mdgriffith$elm_ui$Internal$Style$Content(alignment)),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.seButton),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment.$) {
				case 'Top':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 'Bottom':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 'Right':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 'Left':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 'CenterX':
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(
							$mdgriffith$elm_ui$Internal$Style$Self(alignment)),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = {$: 'Above'};
var $mdgriffith$elm_ui$Internal$Style$Behind = {$: 'Behind'};
var $mdgriffith$elm_ui$Internal$Style$Below = {$: 'Below'};
var $mdgriffith$elm_ui$Internal$Style$OnLeft = {$: 'OnLeft'};
var $mdgriffith$elm_ui$Internal$Style$OnRight = {$: 'OnRight'};
var $mdgriffith$elm_ui$Internal$Style$Within = {$: 'Within'};
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = $mdgriffith$elm_ui$Internal$Style$Above;
	var _v0 = function () {
		switch (loc.$) {
			case 'Above':
				return _Utils_Tuple0;
			case 'Below':
				return _Utils_Tuple0;
			case 'OnRight':
				return _Utils_Tuple0;
			case 'OnLeft':
				return _Utils_Tuple0;
			case 'Within':
				return _Utils_Tuple0;
			default:
				return _Utils_Tuple0;
		}
	}();
	return _List_fromArray(
		[$mdgriffith$elm_ui$Internal$Style$Above, $mdgriffith$elm_ui$Internal$Style$Below, $mdgriffith$elm_ui$Internal$Style$OnRight, $mdgriffith$elm_ui$Internal$Style$OnLeft, $mdgriffith$elm_ui$Internal$Style$Within, $mdgriffith$elm_ui$Internal$Style$Behind]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.imageContainer))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.root),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.nearby),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc.$) {
							case 'Above':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Below':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 'OnRight':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'OnLeft':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 'Within':
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.wrapped),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.noTextSelection),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorPointer),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cursorText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.passPointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.capturePointerEvents),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transparent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.opaque),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.hover, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.focus, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.transparent)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.active, $mdgriffith$elm_ui$Internal$Style$classes.opaque)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.transition),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbars),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.scrollbarsY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clip),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipX),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.clipY),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderNone),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDashed),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderDotted),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.borderSolid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputText),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.link),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterX),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputLabel),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.heightFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFill),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthContent),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.alignCenterY),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 'Bottom':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 'Right':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 'CenterX':
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 'Bottom':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 'Right':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 'Left':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 'CenterX':
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.page),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Left)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.any + ($mdgriffith$elm_ui$Internal$Style$selfName(
								$mdgriffith$elm_ui$Internal$Style$Self($mdgriffith$elm_ui$Internal$Style$Right)) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.any))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultiline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineWrapper),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineParent),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inputMultilineFiller),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hasBehind),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.paragraph),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.single),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.widthExact),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.inFront),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.behind),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.above),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.below),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onRight),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.onLeft),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.text),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.column),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.grid),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment.$) {
								case 'Top':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Bottom':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 'Right':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 'Left':
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 'CenterX':
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textThin),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textMedium),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textSemiBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textExtraBold),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textHeavy),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.italic),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.underline),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.strike)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textUnitalicized),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustify),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textJustifyAll),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textCenter),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textRight),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.textLeft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.any + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.row) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.container) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = function (a) {
	return {$: 'Intermediate', a: a};
};
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			{closing: closing, others: _List_Nil, props: _List_Nil, selector: selector});
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0.a;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 'Prop':
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								props: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.props)
							});
					case 'Supports':
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Style$Intermediate(
										{closing: '\n}', others: _List_Nil, props: props, selector: '@supports (' + (prop + (':' + (value + (') {' + parent.selector))))}),
									rendered.others)
							});
					case 'Adjacent':
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' + ' + selector), ''),
										adjRules),
									rendered.others)
							});
					case 'Child':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' > ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'AllChildren':
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector + (' ' + child), ''),
										childRules),
									rendered.others)
							});
					case 'Descriptor':
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.selector, descriptor),
											''),
										descriptorRules),
									rendered.others)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								others: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.selector, ''),
										batched),
									rendered.others)
							});
				}
			});
		return $mdgriffith$elm_ui$Internal$Style$Intermediate(
			A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender));
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.props;
		if (!_v2.b) {
			return '';
		} else {
			return rule.selector + ('{' + (renderValues(rule.props) + (rule.closing + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0.a;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.others)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.mode;
	switch (_v0.$) {
		case 'Layout':
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 'NoStaticStyleSheet':
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 'Serif':
			return 'serif';
		case 'SansSerif':
			return 'sans-serif';
		case 'Monospace':
			return 'monospace';
		case 'Typeface':
			var name = font.a;
			return '\"' + (name + '\"');
		case 'ImportFont':
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.name;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return name === 'smcp';
		case 'VariantOff':
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.variants);
	} else {
		return false;
	}
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 'Nothing') {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo.$) {
				case 'Hover':
					var _v2 = options.hover;
					switch (_v2.$) {
						case 'NoHover':
							return _List_Nil;
						case 'ForceHover':
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 'Focus':
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.any + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.any) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 'VariantActive':
			var name = _var.a;
			return '\"' + (name + '\"');
		case 'VariantOff':
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 'FontWith') {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.variants)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 'Untransformed':
			return $elm$core$Maybe$Nothing;
		case 'Moved':
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 'Style':
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 'Shadows':
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 'Transparency':
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 'FontSize':
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 'FontFamily':
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 'Single':
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 'Colored':
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 'SpacingStyle':
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.single;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.row;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.wrapped + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.paragraph;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.page;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.column;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.any;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 'PaddingStyle':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 'BorderWidth':
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 'GridTemplateStyle':
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 'Px':
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 'Content':
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 'Nothing') {
										if (_v2.b.$ === 'Nothing') {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 'Nothing') {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Fill':
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 'Nothing') {
										if (_v7.b.$ === 'Nothing') {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 'Nothing') {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 'Min':
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.spacing.a);
				var ySpacing = toGridLength(template.spacing.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.rows)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.columns)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.spacing.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.spacing.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.columns)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.rows)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.columns)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.spacing.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 'GridPosition':
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.row) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.height) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.col) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.width) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.row) + (' / ' + ($elm$core$String$fromInt(position.row + position.height) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.col) + (' / ' + ($elm$core$String$fromInt(position.col + position.width) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.row) + ('-' + ($elm$core$String$fromInt(position.col) + ('-' + ($elm$core$String$fromInt(position.width) + ('-' + $elm$core$String$fromInt(position.height)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 'PseudoSelector':
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((_v12.a.$ === 'Just') && (_v12.b.$ === 'Just')) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fullSize, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.sizeByCapital + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.text)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {height: height / size, size: size, vertical: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.capital, adjustment.baseline, adjustment.descender, adjustment.lowercase]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.descender,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.baseline,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.capital,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		capital: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		full: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.height)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.vertical) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.size) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 'Nothing') {
					if (face.$ === 'FontWith') {
						var _with = face.a;
						var _v2 = _with.adjustment;
						if (_v2.$ === 'Nothing') {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.full;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.capital;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 'ImportFont') {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 'Nothing') {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 'FontFamily') {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					rules: _Utils_ap(
						rendered.rules,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					topLevel: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 'Nothing') {
							return rendered.topLevel;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.topLevel);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{rules: _List_Nil, topLevel: _List_Nil},
			stylesheet);
		var topLevel = _v0.topLevel;
		var rules = _v0.rules;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.mode;
		switch (_v0.$) {
			case 'Layout':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 'NoStaticStyleSheet':
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.focus)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 'Keyed') {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return keyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 'NoStyleSheet':
									return unkeyed;
								case 'OnlyDynamic':
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 'Generic':
					return A2(createNode, 'div', attributes);
				case 'NodeName':
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.single))
									]))
							]));
			}
		}();
		switch (parentContext.$) {
			case 'AsRow':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerRight])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterX])))
						]),
					_List_fromArray(
						[html])) : html));
			case 'AsColumn':
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerCenterY])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.container, $mdgriffith$elm_ui$Internal$Style$classes.alignContainerBottom])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthContent + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightContent)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.any + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.text + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFill + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.heightFill)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 'Unstyled':
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 'Styled':
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.styles : _Utils_ap(styled.styles, existingStyles));
					case 'Text':
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 'Keyed') {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.children))),
						styles: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.styles : _Utils_ap(rendered.styles, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.has,
						rendered.node,
						rendered.attributes,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.has,
							rendered.node,
							rendered.attributes,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.children))),
						styles: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 'Single', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (myFlag.$ === 'Flag') {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 'ChildrenBehind', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 'ChildrenBehindAndInFront', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 'ChildrenInFront', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location.$) {
							case 'Above':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.above]));
							case 'Below':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.below]));
							case 'OnRight':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onRight]));
							case 'OnLeft':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.onLeft]));
							case 'InFront':
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.inFront]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.nearby, $mdgriffith$elm_ui$Internal$Style$classes.single, $mdgriffith$elm_ui$Internal$Style$classes.behind]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 'Empty':
							return $elm$virtual_dom$VirtualDom$text('');
						case 'Text':
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 'Unstyled':
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.html, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 'NoNearbyChildren':
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenBehind':
				var existingBehind = existing.a;
				if (location.$ === 'Behind') {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 'ChildrenInFront':
				var existingInFront = existing.a;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location.$ === 'Behind') {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 'Embedded', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 'NodeName', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 'Generic':
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 'NodeName':
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align.$) {
		case 'Left':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignLeft);
		case 'Right':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignRight);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedHorizontally + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterX);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align.$) {
		case 'Top':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignTop);
		case 'Bottom':
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignBottom);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.alignedVertically + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.alignCenterY);
	}
};
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 'FullTransform', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 'Moved', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 'Untransformed':
				switch (component.$) {
					case 'MoveX':
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 'MoveY':
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 'MoveZ':
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 'Moved':
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 'MoveY':
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 'MoveZ':
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 'MoveXYZ':
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 'Rotate':
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 'MoveX':
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 'MoveY':
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 'MoveZ':
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 'MoveXYZ':
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 'Rotate':
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 'Px':
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightContent,
				_List_Nil);
		case 'Fill':
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 'Px':
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 'Content':
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthContent,
				_List_Nil);
		case 'Fill':
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFill,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 'Min':
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 'Single') {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 'FontSize':
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 'PaddingStyle':
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 'Nothing') {
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: styles
					};
				} else {
					var _class = _v1.a;
					return {
						attributes: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						children: children,
						has: has,
						node: node,
						styles: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 'NoAttribute':
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Class':
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 'Attr':
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'StyleClass':
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 'TransformComponent':
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'Width':
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 'Px':
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.widthExact + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthContent),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.widthFill),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.widthFillPortion + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.row + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Height':
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 'Px':
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightExact + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Content':
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightContent + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 'Fill':
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.heightFill + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.heightFillPortion + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.any + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.column + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 'Describe':
						var description = attribute.a;
						switch (description.$) {
							case 'Main':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Navigation':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'ContentInfo':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Complementary':
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Heading':
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 'Paragraph':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Button':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'Label':
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 'LivePolite':
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 'Nearby':
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 'Empty':
									return styles;
								case 'Text':
									var str = elem.a;
									return styles;
								case 'Unstyled':
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.styles);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 'AlignX':
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x.$) {
									case 'CenterX':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 'Right':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y.$) {
									case 'CenterY':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 'Bottom':
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 'Untransformed'};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 'Content'};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentTop + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentLeft)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 'SpacingStyle', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 'StyleClass', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 'Class', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontAlignment = $mdgriffith$elm_ui$Internal$Flag$flag(12);
var $mdgriffith$elm_ui$Element$Font$alignLeft = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textLeft);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 'Colored', a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $dillonkearns$elm_markdown$Markdown$Parser$problemToString = function (problem) {
	switch (problem.$) {
		case 'Expecting':
			var string = problem.a;
			return 'Expecting ' + string;
		case 'ExpectingInt':
			return 'Expecting int';
		case 'ExpectingHex':
			return 'Expecting hex';
		case 'ExpectingOctal':
			return 'Expecting octal';
		case 'ExpectingBinary':
			return 'Expecting binary';
		case 'ExpectingFloat':
			return 'Expecting float';
		case 'ExpectingNumber':
			return 'Expecting number';
		case 'ExpectingVariable':
			return 'Expecting variable';
		case 'ExpectingSymbol':
			var string = problem.a;
			return 'Expecting symbol ' + string;
		case 'ExpectingKeyword':
			var string = problem.a;
			return 'Expecting keyword ' + string;
		case 'ExpectingEnd':
			return 'Expecting keyword end';
		case 'UnexpectedChar':
			return 'Unexpected char';
		case 'Problem':
			var problemDescription = problem.a;
			return problemDescription;
		default:
			return 'Bad repeat';
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString = function (deadEnd) {
	return 'Problem at row ' + ($elm$core$String$fromInt(deadEnd.row) + ('\n' + $dillonkearns$elm_markdown$Markdown$Parser$problemToString(deadEnd.problem)));
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine = {$: 'BlankLine'};
var $dillonkearns$elm_markdown$Markdown$Block$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote = function (a) {
	return {$: 'BlockQuote', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock = function (a) {
	return {$: 'CodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CodeSpan = function (a) {
	return {$: 'CodeSpan', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$CompletedTask = {$: 'CompletedTask'};
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 'Done', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Emphasis = function (a) {
	return {$: 'Emphasis', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Emphasis = F2(
	function (a, b) {
		return {$: 'Emphasis', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock = {$: 'EmptyBlock'};
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 'Expecting', a: a};
};
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 'ExpectingSymbol', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Block$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Heading = F2(
	function (a, b) {
		return {$: 'Heading', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Html = function (a) {
	return {$: 'Html', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock = function (a) {
	return {$: 'HtmlBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlComment = function (a) {
	return {$: 'HtmlComment', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration = F2(
	function (a, b) {
		return {$: 'HtmlDeclaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlElement = F3(
	function (a, b, c) {
		return {$: 'HtmlElement', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask = {$: 'IncompleteTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock = function (a) {
	return {$: 'IndentedCodeBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem = function (a) {
	return {$: 'InlineProblem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Block$ListItem = F2(
	function (a, b) {
		return {$: 'ListItem', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$NoTask = {$: 'NoTask'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph = function (a) {
	return {$: 'OpenBlockOrParagraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$OrderedList = F3(
	function (a, b, c) {
		return {$: 'OrderedList', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock = F6(
	function (a, b, c, d, e, f) {
		return {$: 'OrderedListBlock', a: a, b: b, c: c, d: d, e: e, f: f};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Paragraph = function (a) {
	return {$: 'Paragraph', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock = function (a) {
	return {$: 'ParsedBlock', a: a};
};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote = function (a) {
	return {$: 'ParsedBlockQuote', a: a};
};
var $elm$parser$Parser$Problem = function (a) {
	return {$: 'Problem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Strong = function (a) {
	return {$: 'Strong', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$Table = function (a) {
	return {$: 'Table', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Table$Table = F2(
	function (a, b) {
		return {$: 'Table', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow = F2(
	function (a, b) {
		return {$: 'TableDelimiterRow', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Block$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak = {$: 'ThematicBreak'};
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 'Token', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$Block$UnorderedList = F2(
	function (a, b) {
		return {$: 'UnorderedList', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock = F4(
	function (a, b, c, d) {
		return {$: 'UnorderedListBlock', a: a, b: b, c: c, d: d};
	});
var $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines = function (a) {
	return {$: 'UnparsedInlines', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Parser$addReference = F2(
	function (state, linkRef) {
		return {
			linkReferenceDefinitions: A2($elm$core$List$cons, linkRef, state.linkReferenceDefinitions),
			rawBlocks: state.rawBlocks
		};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 'Bad', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 'Good', a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parseA(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					var _v2 = callback(a);
					var parseB = _v2.a;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0.a;
	return $elm$parser$Parser$Advanced$Parser(
		function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 'Bad') {
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, false, x);
			} else {
				var a = _v1.b;
				var s1 = _v1.c;
				return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
			}
		});
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.src);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.offset, offset) < 0,
					_Utils_Tuple0,
					{col: col, context: s0.context, indent: s0.indent, offset: offset, row: row, src: s0.src});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.offset, s.row, s.col, s);
		});
};
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0.a;
		var parseB = _v1.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v2 = parseA(s0);
				if (_v2.$ === 'Bad') {
					var p = _v2.a;
					var x = _v2.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p1 = _v2.a;
					var a = _v2.b;
					var s1 = _v2.c;
					var _v3 = parseB(s1);
					if (_v3.$ === 'Bad') {
						var p2 = _v3.a;
						var x = _v3.b;
						return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
					} else {
						var p2 = _v3.a;
						var b = _v3.b;
						var s2 = _v3.c;
						return A3(
							$elm$parser$Parser$Advanced$Good,
							p1 || p2,
							A2(func, a, b),
							s2);
					}
				}
			});
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$carriageReturn = A2(
	$elm$parser$Parser$Advanced$Token,
	'\r',
	$elm$parser$Parser$Expecting('a carriage return'));
var $dillonkearns$elm_markdown$Parser$Token$newline = A2(
	$elm$parser$Parser$Advanced$Token,
	'\n',
	$elm$parser$Parser$Expecting('a newline'));
var $elm$parser$Parser$Advanced$Empty = {$: 'Empty'};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 'Append', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
		});
};
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, false, a, s);
		});
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 'AddRight', a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {col: col, contextStack: contextStack, problem: problem, row: row};
	});
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.row, s.col, x, s.context));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
				$elm$parser$Parser$Advanced$Good,
				progress,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Whitespace$lineEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$carriageReturn),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$newline),
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					])))
		]));
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						func(a),
						s1);
				} else {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				}
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$blankLine = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine;
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$dillonkearns$elm_markdown$Whitespace$lineEnd));
var $dillonkearns$elm_markdown$Parser$Token$space = A2(
	$elm$parser$Parser$Advanced$Token,
	' ',
	$elm$parser$Parser$Expecting('a space'));
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts = _List_fromArray(
	[
		$elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			'>',
			$elm$parser$Parser$Expecting('>'))),
		A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$backtrackable(
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'>',
						$elm$parser$Parser$Expecting(' >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						' >',
						$elm$parser$Parser$Expecting('  >'))),
					$elm$parser$Parser$Advanced$symbol(
					A2(
						$elm$parser$Parser$Advanced$Token,
						'  >',
						$elm$parser$Parser$Expecting('   >')))
				])))
	]);
var $dillonkearns$elm_markdown$Whitespace$isLineEnd = function (_char) {
	switch (_char.valueOf()) {
		case '\n':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd = $elm$parser$Parser$Advanced$chompWhile(
	A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd));
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(s0);
				if (_v1.$ === 'Bad') {
					var p = _v1.a;
					var x = _v1.b;
					return A2($elm$parser$Parser$Advanced$Bad, p, x);
				} else {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						A2(
							func,
							A3($elm$core$String$slice, s0.offset, s1.offset, s0.src),
							a),
						s1);
				}
			});
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$Advanced$end = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return _Utils_eq(
				$elm$core$String$length(s.src),
				s.offset) ? A3($elm$parser$Parser$Advanced$Good, false, _Utils_Tuple0, s) : A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$Helpers$endOfFile = $elm$parser$Parser$Advanced$end(
	$elm$parser$Parser$Expecting('the end of the input'));
var $dillonkearns$elm_markdown$Helpers$lineEndOrEnd = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$dillonkearns$elm_markdown$Whitespace$lineEnd, $dillonkearns$elm_markdown$Helpers$endOfFile]));
var $dillonkearns$elm_markdown$Markdown$Parser$blockQuote = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote),
			$elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$Markdown$Parser$blockQuoteStarts)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString = function (deadEnds) {
	return A2(
		$elm$core$String$join,
		'\n',
		A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, deadEnds));
};
var $dillonkearns$elm_markdown$HtmlParser$Cdata = function (a) {
	return {$: 'Cdata', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$HtmlParser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.offset, s.src);
				return _Utils_eq(newOffset, -1) ? A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: 1, context: s.context, indent: s.indent, offset: s.offset + 1, row: s.row + 1, src: s.src}) : A3(
					$elm$parser$Parser$Advanced$Good,
					true,
					_Utils_Tuple0,
					{col: s.col + 1, context: s.context, indent: s.indent, offset: newOffset, row: s.row, src: s.src}));
			});
	});
var $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter = $elm$parser$Parser$Expecting('at least 1 tag name character');
var $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return false;
		case '\r':
			return false;
		case '\n':
			return false;
		case '\t':
			return false;
		case '/':
			return false;
		case '<':
			return false;
		case '>':
			return false;
		case '\"':
			return false;
		case '\'':
			return false;
		case '=':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$tagName = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (name, _v0) {
			return $elm$core$String$toLower(name);
		}),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $dillonkearns$elm_markdown$HtmlParser$tagNameCharacter, $dillonkearns$elm_markdown$HtmlParser$expectTagNameCharacter),
		$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$tagNameCharacter)));
var $dillonkearns$elm_markdown$HtmlParser$attributeName = $dillonkearns$elm_markdown$HtmlParser$tagName;
var $dillonkearns$elm_markdown$HtmlParser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0.a;
			var _v1 = parse(s0);
			if (_v1.$ === 'Good') {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (step.$ === 'Loop') {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return $elm$parser$Parser$Advanced$Parser(
			function (s) {
				return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
			});
	});
var $dillonkearns$elm_markdown$HtmlParser$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'amp',
			_Utils_chr('&')),
			_Utils_Tuple2(
			'lt',
			_Utils_chr('<')),
			_Utils_Tuple2(
			'gt',
			_Utils_chr('>')),
			_Utils_Tuple2(
			'apos',
			_Utils_chr('\'')),
			_Utils_Tuple2(
			'quot',
			_Utils_chr('\"'))
		]));
var $elm$core$Char$fromCode = _Char_fromCode;
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Basics$pow = _Basics_pow;
var $rtfeldman$elm_hex$Hex$fromStringHelp = F3(
	function (position, chars, accumulated) {
		fromStringHelp:
		while (true) {
			if (!chars.b) {
				return $elm$core$Result$Ok(accumulated);
			} else {
				var _char = chars.a;
				var rest = chars.b;
				switch (_char.valueOf()) {
					case '0':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated;
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '1':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + A2($elm$core$Basics$pow, 16, position);
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '2':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (2 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '3':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (3 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '4':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (4 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '5':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (5 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '6':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (6 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '7':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (7 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '8':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (8 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case '9':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (9 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'a':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (10 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'b':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (11 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'c':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (12 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'd':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (13 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'e':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (14 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					case 'f':
						var $temp$position = position - 1,
							$temp$chars = rest,
							$temp$accumulated = accumulated + (15 * A2($elm$core$Basics$pow, 16, position));
						position = $temp$position;
						chars = $temp$chars;
						accumulated = $temp$accumulated;
						continue fromStringHelp;
					default:
						var nonHex = _char;
						return $elm$core$Result$Err(
							$elm$core$String$fromChar(nonHex) + ' is not a valid hexadecimal character.');
				}
			}
		}
	});
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $rtfeldman$elm_hex$Hex$fromString = function (str) {
	if ($elm$core$String$isEmpty(str)) {
		return $elm$core$Result$Err('Empty strings are not valid hexadecimal strings.');
	} else {
		var result = function () {
			if (A2($elm$core$String$startsWith, '-', str)) {
				var list = A2(
					$elm$core$Maybe$withDefault,
					_List_Nil,
					$elm$core$List$tail(
						$elm$core$String$toList(str)));
				return A2(
					$elm$core$Result$map,
					$elm$core$Basics$negate,
					A3(
						$rtfeldman$elm_hex$Hex$fromStringHelp,
						$elm$core$List$length(list) - 1,
						list,
						0));
			} else {
				return A3(
					$rtfeldman$elm_hex$Hex$fromStringHelp,
					$elm$core$String$length(str) - 1,
					$elm$core$String$toList(str),
					0);
			}
		}();
		var formatError = function (err) {
			return A2(
				$elm$core$String$join,
				' ',
				_List_fromArray(
					['\"' + (str + '\"'), 'is not a valid hexadecimal string because', err]));
		};
		return A2($elm$core$Result$mapError, formatError, result);
	}
};
var $dillonkearns$elm_markdown$HtmlParser$decodeEscape = function (s) {
	return A2($elm$core$String$startsWith, '#x', s) ? A2(
		$elm$core$Result$mapError,
		$elm$parser$Parser$Problem,
		A2(
			$elm$core$Result$map,
			$elm$core$Char$fromCode,
			$rtfeldman$elm_hex$Hex$fromString(
				A2($elm$core$String$dropLeft, 2, s)))) : (A2($elm$core$String$startsWith, '#', s) ? A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('Invalid escaped character: ' + s),
		A2(
			$elm$core$Maybe$map,
			$elm$core$Char$fromCode,
			$elm$core$String$toInt(
				A2($elm$core$String$dropLeft, 1, s)))) : A2(
		$elm$core$Result$fromMaybe,
		$elm$parser$Parser$Problem('No entity named \"&' + (s + ';\" found.')),
		A2($elm$core$Dict$get, s, $dillonkearns$elm_markdown$HtmlParser$entities)));
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		});
};
var $dillonkearns$elm_markdown$HtmlParser$escapedChar = function (end_) {
	var process = function (entityStr) {
		var _v0 = $dillonkearns$elm_markdown$HtmlParser$decodeEscape(entityStr);
		if (_v0.$ === 'Ok') {
			var c = _v0.a;
			return $elm$parser$Parser$Advanced$succeed(c);
		} else {
			var e = _v0.a;
			return $elm$parser$Parser$Advanced$problem(e);
		}
	};
	var isEntityChar = function (c) {
		return (!_Utils_eq(c, end_)) && (!_Utils_eq(
			c,
			_Utils_chr(';')));
	};
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('&')),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$andThen,
				process,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							isEntityChar,
							$elm$parser$Parser$Expecting('an entity character')),
						$elm$parser$Parser$Advanced$chompWhile(isEntityChar)))),
			$dillonkearns$elm_markdown$HtmlParser$symbol(';')));
};
var $dillonkearns$elm_markdown$HtmlParser$textStringStep = F3(
	function (closingChar, predicate, accum) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (soFar) {
				return $elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$Advanced$map,
							function (escaped) {
								return $elm$parser$Parser$Advanced$Loop(
									_Utils_ap(
										accum,
										_Utils_ap(
											soFar,
											$elm$core$String$fromChar(escaped))));
							},
							$dillonkearns$elm_markdown$HtmlParser$escapedChar(closingChar)),
							$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(
								_Utils_ap(accum, soFar)))
						]));
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(predicate)));
	});
var $dillonkearns$elm_markdown$HtmlParser$textString = function (closingChar) {
	var predicate = function (c) {
		return (!_Utils_eq(c, closingChar)) && (!_Utils_eq(
			c,
			_Utils_chr('&')));
	};
	return A2(
		$elm$parser$Parser$Advanced$loop,
		'',
		A2($dillonkearns$elm_markdown$HtmlParser$textStringStep, closingChar, predicate));
};
var $dillonkearns$elm_markdown$HtmlParser$attributeValue = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\"')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\"'))),
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$HtmlParser$textString(
					_Utils_chr('\'')),
				$dillonkearns$elm_markdown$HtmlParser$symbol('\'')))
		]));
var $dillonkearns$elm_markdown$HtmlParser$keepOldest = F2(
	function (_new, mValue) {
		if (mValue.$ === 'Just') {
			var v = mValue.a;
			return $elm$core$Maybe$Just(v);
		} else {
			return $elm$core$Maybe$Just(_new);
		}
	});
var $dillonkearns$elm_markdown$HtmlParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\r':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$whiteSpace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace);
var $dillonkearns$elm_markdown$HtmlParser$attributesStep = function (attrs) {
	var process = F2(
		function (name, value) {
			return $elm$parser$Parser$Advanced$Loop(
				A3(
					$elm$core$Dict$update,
					$elm$core$String$toLower(name),
					$dillonkearns$elm_markdown$HtmlParser$keepOldest(value),
					attrs));
		});
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(process),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeName, $dillonkearns$elm_markdown$HtmlParser$whiteSpace),
							$dillonkearns$elm_markdown$HtmlParser$symbol('=')),
						$dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributeValue, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
				$elm$parser$Parser$Advanced$succeed(
				$elm$parser$Parser$Advanced$Done(attrs))
			]));
};
var $dillonkearns$elm_markdown$HtmlParser$attributes = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$Dict$foldl,
		F3(
			function (key, value, accum) {
				return A2(
					$elm$core$List$cons,
					{name: key, value: value},
					accum);
			}),
		_List_Nil),
	A2($elm$parser$Parser$Advanced$loop, $elm$core$Dict$empty, $dillonkearns$elm_markdown$HtmlParser$attributesStep));
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v0 = A5(_Parser_findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v0.a;
			var newRow = _v0.b;
			var newCol = _v0.c;
			var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.src) : newOffset;
			return A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, adjustedOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: adjustedOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$HtmlParser$cdata = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<![CDATA[')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr(']]>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol(']]>')));
var $dillonkearns$elm_markdown$HtmlParser$childrenStep = F2(
	function (options, accum) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (f) {
				return f(accum);
			},
			$elm$parser$Parser$Advanced$oneOf(options));
	});
var $dillonkearns$elm_markdown$HtmlParser$fail = function (str) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(str));
};
var $dillonkearns$elm_markdown$HtmlParser$closingTag = function (startTagName) {
	var closingTagName = A2(
		$elm$parser$Parser$Advanced$andThen,
		function (endTagName) {
			return _Utils_eq(startTagName, endTagName) ? $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0) : $dillonkearns$elm_markdown$HtmlParser$fail('tag name mismatch: ' + (startTagName + (' and ' + endTagName)));
		},
		$dillonkearns$elm_markdown$HtmlParser$tagName);
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$HtmlParser$symbol('</'),
					$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
				closingTagName),
			$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>'));
};
var $dillonkearns$elm_markdown$HtmlParser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $dillonkearns$elm_markdown$HtmlParser$comment = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Comment),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('<!--'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('-->')),
		$elm$parser$Parser$Advanced$token(
			$dillonkearns$elm_markdown$HtmlParser$toToken('-->'))));
var $dillonkearns$elm_markdown$HtmlParser$Declaration = F2(
	function (a, b) {
		return {$: 'Declaration', a: a, b: b};
	});
var $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter = $elm$parser$Parser$Expecting('at least 1 uppercase character');
var $dillonkearns$elm_markdown$HtmlParser$allUppercase = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$chompIf, $elm$core$Char$isUpper, $dillonkearns$elm_markdown$HtmlParser$expectUppercaseCharacter),
		$elm$parser$Parser$Advanced$chompWhile($elm$core$Char$isUpper)));
var $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$HtmlParser$isWhitespace,
		$elm$parser$Parser$Expecting('at least one whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isWhitespace));
var $dillonkearns$elm_markdown$HtmlParser$docType = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$Declaration),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<!')),
		A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$allUppercase, $dillonkearns$elm_markdown$HtmlParser$oneOrMoreWhiteSpace)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('>')));
var $dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction = function (a) {
	return {$: 'ProcessingInstruction', a: a};
};
var $dillonkearns$elm_markdown$HtmlParser$processingInstruction = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$HtmlParser$ProcessingInstruction),
		$dillonkearns$elm_markdown$HtmlParser$symbol('<?')),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntilEndOr('?>')),
		$dillonkearns$elm_markdown$HtmlParser$symbol('?>')));
var $dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar = function (c) {
	switch (c.valueOf()) {
		case '<':
			return false;
		case '&':
			return false;
		default:
			return true;
	}
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions = _List_fromArray(
	[
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$chompIf,
				$dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar,
				$elm$parser$Parser$Expecting('is not & or <')),
			$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$HtmlParser$isNotTextNodeIgnoreChar))),
		A2(
		$elm$parser$Parser$Advanced$map,
		function (_v1) {
			return $elm$parser$Parser$Advanced$Loop(_Utils_Tuple0);
		},
		$dillonkearns$elm_markdown$HtmlParser$escapedChar(
			_Utils_chr('<'))),
		$elm$parser$Parser$Advanced$succeed(
		$elm$parser$Parser$Advanced$Done(_Utils_Tuple0))
	]);
var $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep = function (_v0) {
	return $elm$parser$Parser$Advanced$oneOf($dillonkearns$elm_markdown$HtmlParser$textNodeStringStepOptions);
};
var $dillonkearns$elm_markdown$HtmlParser$textNodeString = $elm$parser$Parser$Advanced$getChompedString(
	A2($elm$parser$Parser$Advanced$loop, _Utils_Tuple0, $dillonkearns$elm_markdown$HtmlParser$textNodeStringStep));
var $dillonkearns$elm_markdown$HtmlParser$children = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$dillonkearns$elm_markdown$HtmlParser$childrenStep(
			$dillonkearns$elm_markdown$HtmlParser$childrenStepOptions(startTagName)));
};
var $dillonkearns$elm_markdown$HtmlParser$childrenStepOptions = function (startTagName) {
	return _List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_v1, accum) {
					return $elm$parser$Parser$Advanced$Done(
						$elm$core$List$reverse(accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)),
			A2(
			$elm$parser$Parser$Advanced$andThen,
			function (text) {
				return $elm$core$String$isEmpty(text) ? A2(
					$elm$parser$Parser$Advanced$map,
					F2(
						function (_v2, accum) {
							return $elm$parser$Parser$Advanced$Done(
								$elm$core$List$reverse(accum));
						}),
					$dillonkearns$elm_markdown$HtmlParser$closingTag(startTagName)) : $elm$parser$Parser$Advanced$succeed(
					function (accum) {
						return $elm$parser$Parser$Advanced$Loop(
							A2(
								$elm$core$List$cons,
								$dillonkearns$elm_markdown$HtmlParser$Text(text),
								accum));
					});
			},
			$dillonkearns$elm_markdown$HtmlParser$textNodeString),
			A2(
			$elm$parser$Parser$Advanced$map,
			F2(
				function (_new, accum) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($elm$core$List$cons, _new, accum));
				}),
			$dillonkearns$elm_markdown$HtmlParser$cyclic$html())
		]);
};
var $dillonkearns$elm_markdown$HtmlParser$elementContinuation = function (startTagName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$HtmlParser$Element(startTagName)),
				$dillonkearns$elm_markdown$HtmlParser$whiteSpace),
			A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$HtmlParser$attributes, $dillonkearns$elm_markdown$HtmlParser$whiteSpace)),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return _List_Nil;
					},
					$dillonkearns$elm_markdown$HtmlParser$symbol('/>')),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$HtmlParser$symbol('>')),
					$dillonkearns$elm_markdown$HtmlParser$children(startTagName))
				])));
};
function $dillonkearns$elm_markdown$HtmlParser$cyclic$html() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$HtmlParser$Cdata, $dillonkearns$elm_markdown$HtmlParser$cdata),
				$dillonkearns$elm_markdown$HtmlParser$processingInstruction,
				$dillonkearns$elm_markdown$HtmlParser$comment,
				$dillonkearns$elm_markdown$HtmlParser$docType,
				$dillonkearns$elm_markdown$HtmlParser$cyclic$element()
			]));
}
function $dillonkearns$elm_markdown$HtmlParser$cyclic$element() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$dillonkearns$elm_markdown$HtmlParser$symbol('<')),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$HtmlParser$elementContinuation, $dillonkearns$elm_markdown$HtmlParser$tagName));
}
try {
	var $dillonkearns$elm_markdown$HtmlParser$html = $dillonkearns$elm_markdown$HtmlParser$cyclic$html();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$html = function () {
		return $dillonkearns$elm_markdown$HtmlParser$html;
	};
	var $dillonkearns$elm_markdown$HtmlParser$element = $dillonkearns$elm_markdown$HtmlParser$cyclic$element();
	$dillonkearns$elm_markdown$HtmlParser$cyclic$element = function () {
		return $dillonkearns$elm_markdown$HtmlParser$element;
	};
} catch ($) {
	throw 'Some top-level definitions from `HtmlParser` are causing infinite recursion:\n\n  ┌─────┐\n  │    children\n  │     ↓\n  │    childrenStepOptions\n  │     ↓\n  │    html\n  │     ↓\n  │    element\n  │     ↓\n  │    elementContinuation\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Parser$Token$tab = A2(
	$elm$parser$Parser$Advanced$Token,
	'\t',
	$elm$parser$Parser$Expecting('a tab'));
var $dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$backtrackable(
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space)),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'   ',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							' \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation'))),
						$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'  \t',
							$elm$parser$Parser$ExpectingSymbol('Indentation')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock),
		$dillonkearns$elm_markdown$Markdown$Parser$exactlyFourSpaces),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$Helpers$isEven = function (_int) {
	return !A2($elm$core$Basics$modBy, 2, _int);
};
var $dillonkearns$elm_markdown$Markdown$Block$Loose = {$: 'Loose'};
var $dillonkearns$elm_markdown$Markdown$Block$Tight = {$: 'Tight'};
var $dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay = function (isTight) {
	return isTight ? $dillonkearns$elm_markdown$Markdown$Block$Tight : $dillonkearns$elm_markdown$Markdown$Block$Loose;
};
var $dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith = F3(
	function (joinWith, string1, string2) {
		var _v0 = _Utils_Tuple2(string1, string2);
		if (_v0.a === '') {
			return string2;
		} else {
			if (_v0.b === '') {
				return string1;
			} else {
				return _Utils_ap(
					string1,
					_Utils_ap(joinWith, string2));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll = F2(
	function (string1, string2) {
		return string1 + ('\n' + string2);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (rawLine, _v0) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
		}),
	$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser = A2($elm$parser$Parser$Advanced$ignorer, $dillonkearns$elm_markdown$Markdown$Parser$innerParagraphParser, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Markdown$OrderedList$ListItem = F4(
	function (order, intended, marker, body) {
		return {body: body, intended: intended, marker: marker, order: order};
	});
var $elm$parser$Parser$Advanced$getCol = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.col, s);
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, '');
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore = function (condition) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$chompIf,
			condition,
			$elm$parser$Parser$Problem('Expected one or more character')),
		$elm$parser$Parser$Advanced$chompWhile(condition));
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$OrderedList$Dot = {$: 'Dot'};
var $dillonkearns$elm_markdown$Markdown$OrderedList$Paren = {$: 'Paren'};
var $dillonkearns$elm_markdown$Parser$Token$closingParen = A2(
	$elm$parser$Parser$Advanced$Token,
	')',
	$elm$parser$Parser$Expecting('a `)`'));
var $dillonkearns$elm_markdown$Parser$Token$dot = A2(
	$elm$parser$Parser$Advanced$Token,
	'.',
	$elm$parser$Parser$Expecting('a `.`'));
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Dot),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$dot)),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$OrderedList$Paren),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$closingParen))
		]));
var $dillonkearns$elm_markdown$Parser$Extra$positiveInteger = A2(
	$elm$parser$Parser$Advanced$mapChompedString,
	F2(
		function (str, _v0) {
			return A2(
				$elm$core$Maybe$withDefault,
				0,
				$elm$core$String$toInt(str));
		}),
	$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($elm$core$Char$isDigit));
var $dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (parsed) {
		return (parsed <= 999999999) ? $elm$parser$Parser$Advanced$succeed(parsed) : $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Starting numbers must be nine digits or less.'));
	},
	$dillonkearns$elm_markdown$Parser$Extra$positiveInteger);
var $dillonkearns$elm_markdown$Whitespace$space = $elm$parser$Parser$Advanced$token($dillonkearns$elm_markdown$Parser$Token$space);
var $elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2($elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var $elm$core$List$repeat = F2(
	function (n, value) {
		return A3($elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var $dillonkearns$elm_markdown$Parser$Extra$upTo = F2(
	function (n, parser) {
		var _v0 = A2($elm$core$List$repeat, n, parser);
		if (!_v0.b) {
			return $elm$parser$Parser$Advanced$succeed(_Utils_Tuple0);
		} else {
			var firstParser = _v0.a;
			var remainingParsers = _v0.b;
			return A3(
				$elm$core$List$foldl,
				F2(
					function (p, parsers) {
						return $elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									A2($elm$parser$Parser$Advanced$ignorer, p, parsers),
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]));
					}),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							firstParser,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						])),
				remainingParsers);
		}
	});
var $dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1 = function (parsed) {
	if (parsed === 1) {
		return $elm$parser$Parser$Advanced$succeed(parsed);
	} else {
		return $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Lists inside a paragraph or after a paragraph without a blank line must start with 1'));
	}
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser = function (previousWasBody) {
	return previousWasBody ? A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$OrderedList$validateStartsWith1,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits)) : A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
		$dillonkearns$elm_markdown$Markdown$OrderedList$positiveIntegerMaxOf9Digits);
};
var $dillonkearns$elm_markdown$Markdown$OrderedList$parser = function (previousWasBody) {
	var parseSubsequentItem = F5(
		function (start, order, marker, mid, _v0) {
			var end = _v0.a;
			var body = _v0.b;
			return ((end - mid) <= 4) ? A4($dillonkearns$elm_markdown$Markdown$OrderedList$ListItem, order, end - start, marker, body) : A4(
				$dillonkearns$elm_markdown$Markdown$OrderedList$ListItem,
				order,
				(mid - start) + 1,
				marker,
				_Utils_ap(
					A2($elm$core$String$repeat, (end - mid) - 1, ' '),
					body));
		});
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(parseSubsequentItem),
						$elm$parser$Parser$Advanced$getCol),
					$elm$parser$Parser$Advanced$backtrackable(
						$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListOrderParser(previousWasBody))),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$OrderedList$orderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$OrderedList$orderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$OrderedList$orderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (item) {
			return A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, true, item.intended, item.marker, item.order, _List_Nil, item.body);
		},
		$dillonkearns$elm_markdown$Markdown$OrderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Inline$CodeInline = function (a) {
	return {$: 'CodeInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak = {$: 'HardLineBreak'};
var $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline = function (a) {
	return {$: 'HtmlInline', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Image = F3(
	function (a, b, c) {
		return {$: 'Image', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Link = F3(
	function (a, b, c) {
		return {$: 'Link', a: a, b: b, c: c};
	});
var $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough = function (a) {
	return {$: 'Strikethrough', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Inline$Text = function (a) {
	return {$: 'Text', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline = function (_v0) {
	var match = _v0.a;
	var _v1 = match.type_;
	switch (_v1.$) {
		case 'NormalType':
			return $dillonkearns$elm_markdown$Markdown$Inline$Text(match.text);
		case 'HardLineBreakType':
			return $dillonkearns$elm_markdown$Markdown$Inline$HardLineBreak;
		case 'CodeType':
			return $dillonkearns$elm_markdown$Markdown$Inline$CodeInline(match.text);
		case 'AutolinkType':
			var _v2 = _v1.a;
			var text = _v2.a;
			var url = _v2.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				$elm$core$Maybe$Nothing,
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Markdown$Inline$Text(text)
					]));
		case 'LinkType':
			var _v3 = _v1.a;
			var url = _v3.a;
			var maybeTitle = _v3.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Link,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'ImageType':
			var _v4 = _v1.a;
			var url = _v4.a;
			var maybeTitle = _v4.b;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Inline$Image,
				url,
				maybeTitle,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		case 'HtmlType':
			var model = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Inline$HtmlInline(model);
		case 'EmphasisType':
			var length = _v1.a;
			return A2(
				$dillonkearns$elm_markdown$Markdown$Inline$Emphasis,
				length,
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
		default:
			return $dillonkearns$elm_markdown$Markdown$Inline$Strikethrough(
				$dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(match.matches));
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines = function (matches) {
	return A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$InlineParser$matchToInline, matches);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Match = function (a) {
	return {$: 'Match', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: childMatch.end - parentMatch.textStart, matches: childMatch.matches, start: childMatch.start - parentMatch.textStart, text: childMatch.text, textEnd: childMatch.textEnd - parentMatch.textStart, textStart: childMatch.textStart - parentMatch.textStart, type_: childMatch.type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$addChild = F2(
	function (parentMatch, childMatch) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: parentMatch.end,
				matches: A2(
					$elm$core$List$cons,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, parentMatch, childMatch),
					parentMatch.matches),
				start: parentMatch.start,
				text: parentMatch.text,
				textEnd: parentMatch.textEnd,
				textStart: parentMatch.textStart,
				type_: parentMatch.type_
			});
	});
var $elm$core$List$sortBy = _List_sortBy;
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren = function (_v4) {
	var match = _v4.a;
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: match.end,
			matches: $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(match.matches),
			start: match.start,
			text: match.text,
			textEnd: match.textEnd,
			textStart: match.textStart,
			type_: match.type_
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches = function (matches) {
	var _v2 = A2(
		$elm$core$List$sortBy,
		function (_v3) {
			var match = _v3.a;
			return match.start;
		},
		matches);
	if (!_v2.b) {
		return _List_Nil;
	} else {
		var first = _v2.a;
		var rest = _v2.b;
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp, rest, first, _List_Nil);
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatchesHelp = F3(
	function (remaining, _v0, matchesTail) {
		organizeMatchesHelp:
		while (true) {
			var prevMatch = _v0.a;
			if (!remaining.b) {
				return A2(
					$elm$core$List$cons,
					$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
						$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
					matchesTail);
			} else {
				var match = remaining.a.a;
				var rest = remaining.b;
				if (_Utils_cmp(prevMatch.end, match.start) < 1) {
					var $temp$remaining = rest,
						$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
						$temp$matchesTail = A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$organizeChildren(
							$dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch)),
						matchesTail);
					remaining = $temp$remaining;
					_v0 = $temp$_v0;
					matchesTail = $temp$matchesTail;
					continue organizeMatchesHelp;
				} else {
					if ((_Utils_cmp(prevMatch.start, match.start) < 0) && (_Utils_cmp(prevMatch.end, match.end) > 0)) {
						var $temp$remaining = rest,
							$temp$_v0 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$addChild, prevMatch, match),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					} else {
						var $temp$remaining = rest,
							$temp$_v0 = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(prevMatch),
							$temp$matchesTail = matchesTail;
						remaining = $temp$remaining;
						_v0 = $temp$_v0;
						matchesTail = $temp$matchesTail;
						continue organizeMatchesHelp;
					}
				}
			}
		}
	});
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType = {$: 'NormalType'};
var $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand = function (string) {
	return A2($elm$core$String$contains, '&', string);
};
var $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#([0-9]{1,8});'));
var $dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode = function (_int) {
	var remain_ = A2($elm$core$Basics$modBy, 16, _int);
	var remain = A2($elm$core$Basics$modBy, 131070, _int);
	return (_int >= 131070) && ((((0 <= remain) && (remain <= 15)) || ((65536 <= remain) && (remain <= 65551))) && ((remain_ === 14) || (remain_ === 15)));
};
var $dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode = function (_int) {
	return (_int === 9) || ((_int === 10) || ((_int === 13) || ((_int === 133) || (((32 <= _int) && (_int <= 126)) || (((160 <= _int) && (_int <= 55295)) || (((57344 <= _int) && (_int <= 64975)) || (((65008 <= _int) && (_int <= 65533)) || ((65536 <= _int) && (_int <= 1114109)))))))));
};
var $dillonkearns$elm_markdown$Markdown$Entity$validUnicode = function (_int) {
	return ($dillonkearns$elm_markdown$Markdown$Entity$isValidUnicode(_int) && (!$dillonkearns$elm_markdown$Markdown$Entity$isBadEndUnicode(_int))) ? $elm$core$String$fromChar(
		$elm$core$Char$fromCode(_int)) : $elm$core$String$fromChar(
		$elm$core$Char$fromCode(65533));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = $elm$core$String$toInt(first);
		if (_v1.$ === 'Just') {
			var v = _v1.a;
			return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(v);
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$decimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceDecimal);
var $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&([0-9a-zA-Z]+);'));
var $dillonkearns$elm_markdown$Markdown$Entity$entities = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('quot', 34),
			_Utils_Tuple2('amp', 38),
			_Utils_Tuple2('apos', 39),
			_Utils_Tuple2('lt', 60),
			_Utils_Tuple2('gt', 62),
			_Utils_Tuple2('nbsp', 160),
			_Utils_Tuple2('iexcl', 161),
			_Utils_Tuple2('cent', 162),
			_Utils_Tuple2('pound', 163),
			_Utils_Tuple2('curren', 164),
			_Utils_Tuple2('yen', 165),
			_Utils_Tuple2('brvbar', 166),
			_Utils_Tuple2('sect', 167),
			_Utils_Tuple2('uml', 168),
			_Utils_Tuple2('copy', 169),
			_Utils_Tuple2('ordf', 170),
			_Utils_Tuple2('laquo', 171),
			_Utils_Tuple2('not', 172),
			_Utils_Tuple2('shy', 173),
			_Utils_Tuple2('reg', 174),
			_Utils_Tuple2('macr', 175),
			_Utils_Tuple2('deg', 176),
			_Utils_Tuple2('plusmn', 177),
			_Utils_Tuple2('sup2', 178),
			_Utils_Tuple2('sup3', 179),
			_Utils_Tuple2('acute', 180),
			_Utils_Tuple2('micro', 181),
			_Utils_Tuple2('para', 182),
			_Utils_Tuple2('middot', 183),
			_Utils_Tuple2('cedil', 184),
			_Utils_Tuple2('sup1', 185),
			_Utils_Tuple2('ordm', 186),
			_Utils_Tuple2('raquo', 187),
			_Utils_Tuple2('frac14', 188),
			_Utils_Tuple2('frac12', 189),
			_Utils_Tuple2('frac34', 190),
			_Utils_Tuple2('iquest', 191),
			_Utils_Tuple2('Agrave', 192),
			_Utils_Tuple2('Aacute', 193),
			_Utils_Tuple2('Acirc', 194),
			_Utils_Tuple2('Atilde', 195),
			_Utils_Tuple2('Auml', 196),
			_Utils_Tuple2('Aring', 197),
			_Utils_Tuple2('AElig', 198),
			_Utils_Tuple2('Ccedil', 199),
			_Utils_Tuple2('Egrave', 200),
			_Utils_Tuple2('Eacute', 201),
			_Utils_Tuple2('Ecirc', 202),
			_Utils_Tuple2('Euml', 203),
			_Utils_Tuple2('Igrave', 204),
			_Utils_Tuple2('Iacute', 205),
			_Utils_Tuple2('Icirc', 206),
			_Utils_Tuple2('Iuml', 207),
			_Utils_Tuple2('ETH', 208),
			_Utils_Tuple2('Ntilde', 209),
			_Utils_Tuple2('Ograve', 210),
			_Utils_Tuple2('Oacute', 211),
			_Utils_Tuple2('Ocirc', 212),
			_Utils_Tuple2('Otilde', 213),
			_Utils_Tuple2('Ouml', 214),
			_Utils_Tuple2('times', 215),
			_Utils_Tuple2('Oslash', 216),
			_Utils_Tuple2('Ugrave', 217),
			_Utils_Tuple2('Uacute', 218),
			_Utils_Tuple2('Ucirc', 219),
			_Utils_Tuple2('Uuml', 220),
			_Utils_Tuple2('Yacute', 221),
			_Utils_Tuple2('THORN', 222),
			_Utils_Tuple2('szlig', 223),
			_Utils_Tuple2('agrave', 224),
			_Utils_Tuple2('aacute', 225),
			_Utils_Tuple2('acirc', 226),
			_Utils_Tuple2('atilde', 227),
			_Utils_Tuple2('auml', 228),
			_Utils_Tuple2('aring', 229),
			_Utils_Tuple2('aelig', 230),
			_Utils_Tuple2('ccedil', 231),
			_Utils_Tuple2('egrave', 232),
			_Utils_Tuple2('eacute', 233),
			_Utils_Tuple2('ecirc', 234),
			_Utils_Tuple2('euml', 235),
			_Utils_Tuple2('igrave', 236),
			_Utils_Tuple2('iacute', 237),
			_Utils_Tuple2('icirc', 238),
			_Utils_Tuple2('iuml', 239),
			_Utils_Tuple2('eth', 240),
			_Utils_Tuple2('ntilde', 241),
			_Utils_Tuple2('ograve', 242),
			_Utils_Tuple2('oacute', 243),
			_Utils_Tuple2('ocirc', 244),
			_Utils_Tuple2('otilde', 245),
			_Utils_Tuple2('ouml', 246),
			_Utils_Tuple2('divide', 247),
			_Utils_Tuple2('oslash', 248),
			_Utils_Tuple2('ugrave', 249),
			_Utils_Tuple2('uacute', 250),
			_Utils_Tuple2('ucirc', 251),
			_Utils_Tuple2('uuml', 252),
			_Utils_Tuple2('yacute', 253),
			_Utils_Tuple2('thorn', 254),
			_Utils_Tuple2('yuml', 255),
			_Utils_Tuple2('OElig', 338),
			_Utils_Tuple2('oelig', 339),
			_Utils_Tuple2('Scaron', 352),
			_Utils_Tuple2('scaron', 353),
			_Utils_Tuple2('Yuml', 376),
			_Utils_Tuple2('fnof', 402),
			_Utils_Tuple2('circ', 710),
			_Utils_Tuple2('tilde', 732),
			_Utils_Tuple2('Alpha', 913),
			_Utils_Tuple2('Beta', 914),
			_Utils_Tuple2('Gamma', 915),
			_Utils_Tuple2('Delta', 916),
			_Utils_Tuple2('Epsilon', 917),
			_Utils_Tuple2('Zeta', 918),
			_Utils_Tuple2('Eta', 919),
			_Utils_Tuple2('Theta', 920),
			_Utils_Tuple2('Iota', 921),
			_Utils_Tuple2('Kappa', 922),
			_Utils_Tuple2('Lambda', 923),
			_Utils_Tuple2('Mu', 924),
			_Utils_Tuple2('Nu', 925),
			_Utils_Tuple2('Xi', 926),
			_Utils_Tuple2('Omicron', 927),
			_Utils_Tuple2('Pi', 928),
			_Utils_Tuple2('Rho', 929),
			_Utils_Tuple2('Sigma', 931),
			_Utils_Tuple2('Tau', 932),
			_Utils_Tuple2('Upsilon', 933),
			_Utils_Tuple2('Phi', 934),
			_Utils_Tuple2('Chi', 935),
			_Utils_Tuple2('Psi', 936),
			_Utils_Tuple2('Omega', 937),
			_Utils_Tuple2('alpha', 945),
			_Utils_Tuple2('beta', 946),
			_Utils_Tuple2('gamma', 947),
			_Utils_Tuple2('delta', 948),
			_Utils_Tuple2('epsilon', 949),
			_Utils_Tuple2('zeta', 950),
			_Utils_Tuple2('eta', 951),
			_Utils_Tuple2('theta', 952),
			_Utils_Tuple2('iota', 953),
			_Utils_Tuple2('kappa', 954),
			_Utils_Tuple2('lambda', 955),
			_Utils_Tuple2('mu', 956),
			_Utils_Tuple2('nu', 957),
			_Utils_Tuple2('xi', 958),
			_Utils_Tuple2('omicron', 959),
			_Utils_Tuple2('pi', 960),
			_Utils_Tuple2('rho', 961),
			_Utils_Tuple2('sigmaf', 962),
			_Utils_Tuple2('sigma', 963),
			_Utils_Tuple2('tau', 964),
			_Utils_Tuple2('upsilon', 965),
			_Utils_Tuple2('phi', 966),
			_Utils_Tuple2('chi', 967),
			_Utils_Tuple2('psi', 968),
			_Utils_Tuple2('omega', 969),
			_Utils_Tuple2('thetasym', 977),
			_Utils_Tuple2('upsih', 978),
			_Utils_Tuple2('piv', 982),
			_Utils_Tuple2('ensp', 8194),
			_Utils_Tuple2('emsp', 8195),
			_Utils_Tuple2('thinsp', 8201),
			_Utils_Tuple2('zwnj', 8204),
			_Utils_Tuple2('zwj', 8205),
			_Utils_Tuple2('lrm', 8206),
			_Utils_Tuple2('rlm', 8207),
			_Utils_Tuple2('ndash', 8211),
			_Utils_Tuple2('mdash', 8212),
			_Utils_Tuple2('lsquo', 8216),
			_Utils_Tuple2('rsquo', 8217),
			_Utils_Tuple2('sbquo', 8218),
			_Utils_Tuple2('ldquo', 8220),
			_Utils_Tuple2('rdquo', 8221),
			_Utils_Tuple2('bdquo', 8222),
			_Utils_Tuple2('dagger', 8224),
			_Utils_Tuple2('Dagger', 8225),
			_Utils_Tuple2('bull', 8226),
			_Utils_Tuple2('hellip', 8230),
			_Utils_Tuple2('permil', 8240),
			_Utils_Tuple2('prime', 8242),
			_Utils_Tuple2('Prime', 8243),
			_Utils_Tuple2('lsaquo', 8249),
			_Utils_Tuple2('rsaquo', 8250),
			_Utils_Tuple2('oline', 8254),
			_Utils_Tuple2('frasl', 8260),
			_Utils_Tuple2('euro', 8364),
			_Utils_Tuple2('image', 8465),
			_Utils_Tuple2('weierp', 8472),
			_Utils_Tuple2('real', 8476),
			_Utils_Tuple2('trade', 8482),
			_Utils_Tuple2('alefsym', 8501),
			_Utils_Tuple2('larr', 8592),
			_Utils_Tuple2('uarr', 8593),
			_Utils_Tuple2('rarr', 8594),
			_Utils_Tuple2('darr', 8595),
			_Utils_Tuple2('harr', 8596),
			_Utils_Tuple2('crarr', 8629),
			_Utils_Tuple2('lArr', 8656),
			_Utils_Tuple2('uArr', 8657),
			_Utils_Tuple2('rArr', 8658),
			_Utils_Tuple2('dArr', 8659),
			_Utils_Tuple2('hArr', 8660),
			_Utils_Tuple2('forall', 8704),
			_Utils_Tuple2('part', 8706),
			_Utils_Tuple2('exist', 8707),
			_Utils_Tuple2('empty', 8709),
			_Utils_Tuple2('nabla', 8711),
			_Utils_Tuple2('isin', 8712),
			_Utils_Tuple2('notin', 8713),
			_Utils_Tuple2('ni', 8715),
			_Utils_Tuple2('prod', 8719),
			_Utils_Tuple2('sum', 8721),
			_Utils_Tuple2('minus', 8722),
			_Utils_Tuple2('lowast', 8727),
			_Utils_Tuple2('radic', 8730),
			_Utils_Tuple2('prop', 8733),
			_Utils_Tuple2('infin', 8734),
			_Utils_Tuple2('ang', 8736),
			_Utils_Tuple2('and', 8743),
			_Utils_Tuple2('or', 8744),
			_Utils_Tuple2('cap', 8745),
			_Utils_Tuple2('cup', 8746),
			_Utils_Tuple2('int', 8747),
			_Utils_Tuple2('there4', 8756),
			_Utils_Tuple2('sim', 8764),
			_Utils_Tuple2('cong', 8773),
			_Utils_Tuple2('asymp', 8776),
			_Utils_Tuple2('ne', 8800),
			_Utils_Tuple2('equiv', 8801),
			_Utils_Tuple2('le', 8804),
			_Utils_Tuple2('ge', 8805),
			_Utils_Tuple2('sub', 8834),
			_Utils_Tuple2('sup', 8835),
			_Utils_Tuple2('nsub', 8836),
			_Utils_Tuple2('sube', 8838),
			_Utils_Tuple2('supe', 8839),
			_Utils_Tuple2('oplus', 8853),
			_Utils_Tuple2('otimes', 8855),
			_Utils_Tuple2('perp', 8869),
			_Utils_Tuple2('sdot', 8901),
			_Utils_Tuple2('lceil', 8968),
			_Utils_Tuple2('rceil', 8969),
			_Utils_Tuple2('lfloor', 8970),
			_Utils_Tuple2('rfloor', 8971),
			_Utils_Tuple2('lang', 9001),
			_Utils_Tuple2('rang', 9002),
			_Utils_Tuple2('loz', 9674),
			_Utils_Tuple2('spades', 9824),
			_Utils_Tuple2('clubs', 9827),
			_Utils_Tuple2('hearts', 9829),
			_Utils_Tuple2('diams', 9830)
		]));
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		var _v1 = A2($elm$core$Dict$get, first, $dillonkearns$elm_markdown$Markdown$Entity$entities);
		if (_v1.$ === 'Just') {
			var code = _v1.a;
			return $elm$core$String$fromChar(
				$elm$core$Char$fromCode(code));
		} else {
			return match.match;
		}
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceEntities = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$entitiesRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceEntity);
var $dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\+)([!\"#$%&\\\'()*+,./:;<=>?@[\\\\\\]^_`{|}~-])'));
var $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable = A2(
	$elm$regex$Regex$replace,
	$dillonkearns$elm_markdown$Markdown$Helpers$escapableRegex,
	function (regexMatch) {
		var _v0 = regexMatch.submatches;
		if (((_v0.b && (_v0.a.$ === 'Just')) && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
			var backslashes = _v0.a.a;
			var _v1 = _v0.b;
			var escapedStr = _v1.a.a;
			return _Utils_ap(
				A2(
					$elm$core$String$repeat,
					($elm$core$String$length(backslashes) / 2) | 0,
					'\\'),
				escapedStr);
		} else {
			return regexMatch.match;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('&#[Xx]([0-9a-fA-F]{1,8});'));
var $dillonkearns$elm_markdown$Markdown$Entity$hexToInt = function (string) {
	var folder = F2(
		function (hexDigit, _int) {
			return ((_int * 16) + A2(
				$elm$core$Basics$modBy,
				39,
				$elm$core$Char$toCode(hexDigit))) - 9;
		});
	return A3(
		$elm$core$String$foldl,
		folder,
		0,
		$elm$core$String$toLower(string));
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal = function (match) {
	var _v0 = match.submatches;
	if (_v0.b && (_v0.a.$ === 'Just')) {
		var first = _v0.a.a;
		return $dillonkearns$elm_markdown$Markdown$Entity$validUnicode(
			$dillonkearns$elm_markdown$Markdown$Entity$hexToInt(first));
	} else {
		return match.match;
	}
};
var $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals = A2($elm$regex$Regex$replace, $dillonkearns$elm_markdown$Markdown$Entity$hexadecimalRegex, $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimal);
var $dillonkearns$elm_markdown$Markdown$Helpers$formatStr = function (str) {
	var withEscapes = $dillonkearns$elm_markdown$Markdown$Helpers$replaceEscapable(str);
	return $dillonkearns$elm_markdown$Markdown$Helpers$containsAmpersand(withEscapes) ? $dillonkearns$elm_markdown$Markdown$Entity$replaceHexadecimals(
		$dillonkearns$elm_markdown$Markdown$Entity$replaceDecimals(
			$dillonkearns$elm_markdown$Markdown$Entity$replaceEntities(withEscapes))) : withEscapes;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch = function (text) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
		{
			end: 0,
			matches: _List_Nil,
			start: 0,
			text: $dillonkearns$elm_markdown$Markdown$Helpers$formatStr(text),
			textEnd: 0,
			textStart: 0,
			type_: $dillonkearns$elm_markdown$Markdown$InlineParser$NormalType
		});
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch = F3(
	function (rawText, _v2, parsedMatches) {
		var matchModel = _v2.a;
		var updtMatch = $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{
				end: matchModel.end,
				matches: A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches, matchModel.text, _List_Nil, matchModel.matches),
				start: matchModel.start,
				text: matchModel.text,
				textEnd: matchModel.textEnd,
				textStart: matchModel.textStart,
				type_: matchModel.type_
			});
		if (!parsedMatches.b) {
			var finalStr = A2($elm$core$String$dropLeft, matchModel.end, rawText);
			return $elm$core$String$isEmpty(finalStr) ? _List_fromArray(
				[updtMatch]) : _List_fromArray(
				[
					updtMatch,
					$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(finalStr)
				]);
		} else {
			var matchHead = parsedMatches.a.a;
			var matchesTail = parsedMatches.b;
			var _v4 = matchHead.type_;
			if (_v4.$ === 'NormalType') {
				return A2($elm$core$List$cons, updtMatch, parsedMatches);
			} else {
				return _Utils_eq(matchModel.end, matchHead.start) ? A2($elm$core$List$cons, updtMatch, parsedMatches) : ((_Utils_cmp(matchModel.end, matchHead.start) < 0) ? A2(
					$elm$core$List$cons,
					updtMatch,
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A3($elm$core$String$slice, matchModel.end, matchHead.start, rawText)),
						parsedMatches)) : parsedMatches);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches = F3(
	function (rawText, parsedMatches, matches) {
		parseTextMatches:
		while (true) {
			if (!matches.b) {
				if (!parsedMatches.b) {
					return $elm$core$String$isEmpty(rawText) ? _List_Nil : _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(rawText)
						]);
				} else {
					var matchModel = parsedMatches.a.a;
					return (matchModel.start > 0) ? A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$InlineParser$normalMatch(
							A2($elm$core$String$left, matchModel.start, rawText)),
						parsedMatches) : parsedMatches;
				}
			} else {
				var match = matches.a;
				var matchesTail = matches.b;
				var $temp$rawText = rawText,
					$temp$parsedMatches = A3($dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatch, rawText, match, parsedMatches),
					$temp$matches = matchesTail;
				rawText = $temp$rawText;
				parsedMatches = $temp$parsedMatches;
				matches = $temp$matches;
				continue parseTextMatches;
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\<)'));
var $elm$regex$Regex$find = _Regex_findAtMost(_Regex_infinity);
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen = {$: 'AngleBracketOpen'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var delimiter = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketOpen}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketLToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketLTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\>)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose = function (a) {
	return {$: 'AngleBracketClose', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Escaped = {$: 'Escaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped = {$: 'NotEscaped'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: 1,
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$AngleBracketClose($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToAngleBracketRToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketRTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^*])?(\\*+)([^*])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken = F2(
	function (a, b) {
		return {$: 'EmphasisToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation = function (c) {
	switch (c.valueOf()) {
		case '!':
			return true;
		case '\"':
			return true;
		case '#':
			return true;
		case '%':
			return true;
		case '&':
			return true;
		case '\'':
			return true;
		case '(':
			return true;
		case ')':
			return true;
		case '*':
			return true;
		case ',':
			return true;
		case '-':
			return true;
		case '.':
			return true;
		case '/':
			return true;
		case ':':
			return true;
		case ';':
			return true;
		case '?':
			return true;
		case '@':
			return true;
		case '[':
			return true;
		case ']':
			return true;
		case '_':
			return true;
		case '{':
			return true;
		case '}':
			return true;
		case '~':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isPunctuation(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace = function (c) {
	switch (c.valueOf()) {
		case ' ':
			return true;
		case '\u000C':
			return true;
		case '\n':
			return true;
		case '\r':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u00A0':
			return true;
		case '\u2028':
			return true;
		case '\u2029':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace = A2(
	$elm$core$String$foldl,
	F2(
		function (c, accum) {
			return accum || $dillonkearns$elm_markdown$Markdown$InlineParser$isWhitespace(c);
		}),
	false);
var $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank = function (mstring) {
	if (mstring.$ === 'Just') {
		var string = mstring.a;
		return ($elm$core$String$isEmpty(string) || $dillonkearns$elm_markdown$Markdown$InlineParser$containSpace(string)) ? 0 : ($dillonkearns$elm_markdown$Markdown$InlineParser$containPunctuation(string) ? 1 : 2);
	} else {
		return 0;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken = F3(
	function (_char, rawText, regMatch) {
		var _v0 = regMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) && _v0.b.b.b.b) {
			var maybeBackslashes = _v0.a;
			var _v1 = _v0.b;
			var maybeLeftFringe = _v1.a;
			var _v2 = _v1.b;
			var delimiter = _v2.a.a;
			var _v3 = _v2.b;
			var maybeRightFringe = _v3.a;
			var rFringeRank = $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(maybeRightFringe);
			var leftFringeLength = function () {
				if (maybeLeftFringe.$ === 'Just') {
					var left = maybeLeftFringe.a;
					return $elm$core$String$length(left);
				} else {
					return 0;
				}
			}();
			var mLeftFringe = ((!(!regMatch.index)) && (!leftFringeLength)) ? $elm$core$Maybe$Just(
				A3($elm$core$String$slice, regMatch.index - 1, regMatch.index, rawText)) : maybeLeftFringe;
			var backslashesLength = function () {
				if (maybeBackslashes.$ === 'Just') {
					var backslashes = maybeBackslashes.a;
					return $elm$core$String$length(backslashes);
				} else {
					return 0;
				}
			}();
			var isEscaped = ((!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) && (!leftFringeLength)) || function () {
				if ((mLeftFringe.$ === 'Just') && (mLeftFringe.a === '\\')) {
					return true;
				} else {
					return false;
				}
			}();
			var delimiterLength = isEscaped ? ($elm$core$String$length(delimiter) - 1) : $elm$core$String$length(delimiter);
			var lFringeRank = isEscaped ? 1 : $dillonkearns$elm_markdown$Markdown$InlineParser$getFringeRank(mLeftFringe);
			if ((delimiterLength <= 0) || (_Utils_eq(
				_char,
				_Utils_chr('_')) && ((lFringeRank === 2) && (rFringeRank === 2)))) {
				return $elm$core$Maybe$Nothing;
			} else {
				var index = ((regMatch.index + backslashesLength) + leftFringeLength) + (isEscaped ? 1 : 0);
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: delimiterLength,
						meaning: A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisToken,
							_char,
							{leftFringeRank: lFringeRank, rightFringeRank: rFringeRank})
					});
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('*'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$asteriskEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\`+)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken = function (a) {
	return {$: 'CodeToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backtick = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $elm$core$Maybe$Just(
			{
				index: regMatch.index + backslashesLength,
				length: $elm$core$String$length(backtick),
				meaning: $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped) : $dillonkearns$elm_markdown$Markdown$InlineParser$CodeToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped)
			});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToCodeToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$codeTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( {2,}))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken = {$: 'HardLineBreakToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return (!$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength)) ? $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Nothing;
			} else {
				if (_v0.b.b && (_v0.b.a.$ === 'Just')) {
					var _v1 = _v0.b;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	_v0$2:
	while (true) {
		if (_v0.b) {
			if (_v0.a.$ === 'Just') {
				var backslashes = _v0.a.a;
				var backslashesLength = $elm$core$String$length(backslashes);
				return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
					{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken}) : $elm$core$Maybe$Just(
					{index: (regMatch.index + backslashesLength) - 1, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken});
			} else {
				if (_v0.b.b) {
					var _v1 = _v0.b;
					var maybeSpaces = _v1.a;
					return $elm$core$Maybe$Just(
						{
							index: regMatch.index,
							length: $elm$core$String$length(regMatch.match),
							meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakToken
						});
				} else {
					break _v0$2;
				}
			}
		} else {
			break _v0$2;
		}
	}
	return $elm$core$Maybe$Nothing;
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak = false;
var $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(?:(\\\\+)|( *))\\n'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens = function (str) {
	return $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreak ? A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToSoftHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$softAsHardLineBreakTokenRegex, str)) : A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToHardBreakToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$hardBreakTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\])'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose = {$: 'SquareBracketClose'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: 1, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$SquareBracketClose}) : $elm$core$Maybe$Nothing;
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageCloseToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageCloseTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(\\!)?(\\[)'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$Active = {$: 'Active'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken = {$: 'ImageOpenToken'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken = function (a) {
	return {$: 'LinkOpenToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if (((_v0.b && _v0.b.b) && _v0.b.b.b) && (_v0.b.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var maybeImageOpen = _v1.a;
		var _v2 = _v1.b;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var isEscaped = !$dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength);
		var index = isEscaped ? ((regMatch.index + backslashesLength) + 1) : (regMatch.index + backslashesLength);
		if (isEscaped) {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			if (maybeImageOpen.$ === 'Just') {
				return $elm$core$Maybe$Just(
					{index: index, length: 2, meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$ImageOpenToken});
			} else {
				return $elm$core$Maybe$Just(
					{
						index: index,
						length: 1,
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Active)
					});
			}
		}
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToLinkImageOpenToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageOpenTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken = function (a) {
	return {$: 'StrikethroughToken', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken = function (regMatch) {
	var _v0 = regMatch.submatches;
	if ((_v0.b && _v0.b.b) && (_v0.b.a.$ === 'Just')) {
		var maybeBackslashes = _v0.a;
		var _v1 = _v0.b;
		var tilde = _v1.a.a;
		var backslashesLength = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2($elm$core$Maybe$map, $elm$core$String$length, maybeBackslashes));
		var _v2 = $dillonkearns$elm_markdown$Markdown$Helpers$isEven(backslashesLength) ? _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$NotEscaped)) : _Utils_Tuple2(
			$elm$core$String$length(tilde),
			$dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughToken($dillonkearns$elm_markdown$Markdown$InlineParser$Escaped));
		var length = _v2.a;
		var meaning = _v2.b;
		return $elm$core$Maybe$Just(
			{index: regMatch.index + backslashesLength, length: length, meaning: meaning});
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)(~{2,})([^~])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToStrikethroughToken,
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('(\\\\*)([^_])?(\\_+)([^_])?'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens = function (str) {
	return A2(
		$elm$core$List$filterMap,
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$regMatchToEmphasisToken,
			_Utils_chr('_'),
			str),
		A2($elm$regex$Regex$find, $dillonkearns$elm_markdown$Markdown$InlineParser$underlineEmphasisTokenRegex, str));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex = F2(
	function (left, right) {
		if (left.b) {
			var lfirst = left.a;
			var lrest = left.b;
			if (right.b) {
				var rfirst = right.a;
				var rrest = right.b;
				return (_Utils_cmp(lfirst.index, rfirst.index) < 0) ? A2(
					$elm$core$List$cons,
					lfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, lrest, right)) : A2(
					$elm$core$List$cons,
					rfirst,
					A2($dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex, left, rrest));
			} else {
				return left;
			}
		} else {
			return right;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize = function (rawText) {
	return A2(
		$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
		$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketRTokens(rawText),
		A2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
			$dillonkearns$elm_markdown$Markdown$InlineParser$findAngleBracketLTokens(rawText),
			A2(
				$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
				$dillonkearns$elm_markdown$Markdown$InlineParser$findHardBreakTokens(rawText),
				A2(
					$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
					$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageCloseTokens(rawText),
					A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
						$dillonkearns$elm_markdown$Markdown$InlineParser$findLinkImageOpenTokens(rawText),
						A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
							$dillonkearns$elm_markdown$Markdown$InlineParser$findStrikethroughTokens(rawText),
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
								$dillonkearns$elm_markdown$Markdown$InlineParser$findUnderlineEmphasisTokens(rawText),
								A2(
									$dillonkearns$elm_markdown$Markdown$InlineParser$mergeByIndex,
									$dillonkearns$elm_markdown$Markdown$InlineParser$findAsteriskEmphasisTokens(rawText),
									$dillonkearns$elm_markdown$Markdown$InlineParser$findCodeTokens(rawText)))))))));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType = {$: 'CodeType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType = function (a) {
	return {$: 'EmphasisType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType = function (a) {
	return {$: 'HtmlType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType = function (a) {
	return {$: 'ImageType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$Inactive = {$: 'Inactive'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType = function (a) {
	return {$: 'LinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType = {$: 'StrikethroughType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType = function (a) {
	return {$: 'AutolinkType', a: a};
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('%(?:3B|2C|2F|3F|3A|40|26|3D|2B|24|23|25)'));
var $elm$url$Url$percentDecode = _Url_percentDecode;
var $elm$url$Url$percentEncode = _Url_percentEncode;
var $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl = A2(
	$elm$core$Basics$composeR,
	$elm$url$Url$percentEncode,
	A2(
		$elm$regex$Regex$replace,
		$dillonkearns$elm_markdown$Markdown$InlineParser$decodeUrlRegex,
		function (match) {
			return A2(
				$elm$core$Maybe$withDefault,
				match.match,
				$elm$url$Url$percentDecode(match.match));
		}));
var $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([A-Za-z][A-Za-z0-9.+\\-]{1,31}:[^<>\\x00-\\x20]*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$urlRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex = '[^\\[\\]\\\\]*(?:\\\\.[^\\[\\]\\\\]*)*';
var $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\[\\s*(' + ($dillonkearns$elm_markdown$Markdown$Helpers$insideSquareBracketRegex + ')\\s*\\]')));
var $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces = function (original) {
	return original;
};
var $dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel = A2($elm$core$Basics$composeR, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $elm$core$String$toLower);
var $dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle = F2(
	function (rawUrl, maybeTitle) {
		return _Utils_Tuple2(
			$dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(
				$dillonkearns$elm_markdown$Markdown$Helpers$formatStr(rawUrl)),
			A2($elm$core$Maybe$map, $dillonkearns$elm_markdown$Markdown$Helpers$formatStr, maybeTitle));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch = F3(
	function (matchModel, references, maybeRegexMatch) {
		var refLabel = function (str) {
			return $elm$core$String$isEmpty(str) ? matchModel.text : str;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				matchModel.text,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$core$Maybe$Nothing,
					A2(
						$elm$core$Maybe$andThen,
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.submatches;
							},
							$elm$core$List$head),
						maybeRegexMatch))));
		var _v0 = A2(
			$elm$core$Dict$get,
			$dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel(refLabel),
			references);
		if (_v0.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v1 = _v0.a;
			var rawUrl = _v1.a;
			var maybeTitle = _v1.b;
			var type_ = function () {
				var _v3 = matchModel.type_;
				if (_v3.$ === 'ImageType') {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				} else {
					return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle));
				}
			}();
			var regexMatchLength = function () {
				if (maybeRegexMatch.$ === 'Just') {
					var match = maybeRegexMatch.a.match;
					return $elm$core$String$length(match);
				} else {
					return 0;
				}
			}();
			return $elm$core$Maybe$Just(
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{end: matchModel.end + regexMatchLength, type_: type_})));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences = F3(
	function (remainText, _v0, references) {
		var tempMatch = _v0.a;
		var matches = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$refLabelRegex, remainText);
		return A3(
			$dillonkearns$elm_markdown$Markdown$InlineParser$refRegexToMatch,
			tempMatch,
			references,
			$elm$core$List$head(matches));
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars = '\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars = ' \\t\\f\\v\\r\\n';
var $dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex = '(?:<([^<>' + ($dillonkearns$elm_markdown$Markdown$Helpers$lineEndChars + (']*)>|([^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + ('\\(\\)\\\\]*(?:\\\\.[^' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + '\\(\\)\\\\]*)*))')))));
var $dillonkearns$elm_markdown$Markdown$Helpers$titleRegex = '(?:[' + ($dillonkearns$elm_markdown$Markdown$Helpers$whiteSpaceChars + (']+' + ('(?:\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'|' + ('\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"|' + '\\(([^\\)\\\\]*(?:\\\\.[^\\)\\\\]*)*)\\)))?'))));
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^\\(\\s*' + ($dillonkearns$elm_markdown$Markdown$InlineParser$hrefRegex + ($dillonkearns$elm_markdown$Markdown$Helpers$titleRegex + '\\s*\\)'))));
var $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust = function (maybes) {
	var process = F2(
		function (a, maybeFound) {
			if (maybeFound.$ === 'Just') {
				var found = maybeFound.a;
				return $elm$core$Maybe$Just(found);
			} else {
				return a;
			}
		});
	return A3($elm$core$List$foldl, process, $elm$core$Maybe$Nothing, maybes);
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch = F2(
	function (matchModel, regexMatch) {
		var _v0 = regexMatch.submatches;
		if ((((_v0.b && _v0.b.b) && _v0.b.b.b) && _v0.b.b.b.b) && _v0.b.b.b.b.b) {
			var maybeRawUrlAngleBrackets = _v0.a;
			var _v1 = _v0.b;
			var maybeRawUrlWithoutBrackets = _v1.a;
			var _v2 = _v1.b;
			var maybeTitleSingleQuotes = _v2.a;
			var _v3 = _v2.b;
			var maybeTitleDoubleQuotes = _v3.a;
			var _v4 = _v3.b;
			var maybeTitleParenthesis = _v4.a;
			var maybeTitle = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeTitleSingleQuotes, maybeTitleDoubleQuotes, maybeTitleParenthesis]));
			var toMatch = function (rawUrl) {
				return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
					_Utils_update(
						matchModel,
						{
							end: matchModel.end + $elm$core$String$length(regexMatch.match),
							type_: function () {
								var _v5 = matchModel.type_;
								if (_v5.$ === 'ImageType') {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType;
								} else {
									return $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType;
								}
							}()(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareUrlAndTitle, rawUrl, maybeTitle))
						}));
			};
			var maybeRawUrl = $dillonkearns$elm_markdown$Markdown$Helpers$returnFirstJust(
				_List_fromArray(
					[maybeRawUrlAngleBrackets, maybeRawUrlWithoutBrackets]));
			return $elm$core$Maybe$Just(
				toMatch(
					A2($elm$core$Maybe$withDefault, '', maybeRawUrl)));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType = F3(
	function (remainText, _v0, refs) {
		var tempMatch = _v0.a;
		var _v1 = A3($elm$regex$Regex$findAtMost, 1, $dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegex, remainText);
		if (_v1.b) {
			var first = _v1.a;
			var _v2 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$inlineLinkTypeOrImageTypeRegexToMatch, tempMatch, first);
			if (_v2.$ === 'Just') {
				var match = _v2.a;
				return $elm$core$Maybe$Just(match);
			} else {
				return A3(
					$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
					remainText,
					$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
					refs);
			}
		} else {
			return A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineReferences,
				remainText,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(tempMatch),
				refs);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping = F2(
	function (_v0, remainMatches) {
		var match = _v0.a;
		var overlappingMatches = $elm$core$List$filter(
			function (_v1) {
				var testMatch = _v1.a;
				return (_Utils_cmp(match.end, testMatch.start) > 0) && (_Utils_cmp(match.end, testMatch.end) < 0);
			});
		return ($elm$core$List$isEmpty(remainMatches) || $elm$core$List$isEmpty(
			overlappingMatches(remainMatches))) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$List$cons,
				$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match),
				remainMatches)) : $elm$core$Maybe$Nothing;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	$elm$regex$Regex$fromString('^([a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*)$'));
var $dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch = function (_v0) {
	var match = _v0.a;
	return A2($elm$regex$Regex$contains, $dillonkearns$elm_markdown$Markdown$InlineParser$emailRegex, match.text) ? $elm$core$Result$Ok(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			_Utils_update(
				match,
				{
					type_: $dillonkearns$elm_markdown$Markdown$InlineParser$AutolinkType(
						_Utils_Tuple2(
							match.text,
							'mailto:' + $dillonkearns$elm_markdown$Markdown$InlineParser$encodeUrl(match.text)))
				}))) : $elm$core$Result$Err(
		$dillonkearns$elm_markdown$Markdown$InlineParser$Match(match));
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp = F3(
	function (innerTokens, isToken, tokens) {
		findTokenHelp:
		while (true) {
			if (!tokens.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var nextToken = tokens.a;
				var remainingTokens = tokens.b;
				if (isToken(nextToken)) {
					return $elm$core$Maybe$Just(
						_Utils_Tuple3(
							nextToken,
							$elm$core$List$reverse(innerTokens),
							remainingTokens));
				} else {
					var $temp$innerTokens = A2($elm$core$List$cons, nextToken, innerTokens),
						$temp$isToken = isToken,
						$temp$tokens = remainingTokens;
					innerTokens = $temp$innerTokens;
					isToken = $temp$isToken;
					tokens = $temp$tokens;
					continue findTokenHelp;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$findToken = F2(
	function (isToken, tokens) {
		return A3($dillonkearns$elm_markdown$Markdown$InlineParser$findTokenHelp, _List_Nil, isToken, tokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken = F2(
	function (a, b) {
		return {$: 'HtmlToken', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening = {$: 'NotOpening'};
var $elm$parser$Parser$Advanced$getOffset = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.offset, s);
	});
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 'Empty':
					return list;
				case 'AddRight':
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0.a;
		var _v1 = parse(
			{col: 1, context: _List_Nil, indent: 1, offset: 0, row: 1, src: src});
		if (_v1.$ === 'Good') {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken = F2(
	function (rawText, _v0) {
		var match = _v0.a;
		var consumedCharacters = A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (startOffset, htmlTag, endOffset) {
								return {htmlTag: htmlTag, length: endOffset - startOffset};
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$dillonkearns$elm_markdown$HtmlParser$html),
			$elm$parser$Parser$Advanced$getOffset);
		var parsed = A2(
			$elm$parser$Parser$Advanced$run,
			consumedCharacters,
			A2($elm$core$String$dropLeft, match.start, rawText));
		if (parsed.$ === 'Ok') {
			var htmlTag = parsed.a.htmlTag;
			var length = parsed.a.length;
			var htmlToken = A2($dillonkearns$elm_markdown$Markdown$InlineParser$HtmlToken, $dillonkearns$elm_markdown$Markdown$InlineParser$NotOpening, htmlTag);
			return $elm$core$Maybe$Just(
				{index: match.start, length: length, meaning: htmlToken});
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Helpers$ifError = F2(
	function (_function, result) {
		if (result.$ === 'Ok') {
			return result;
		} else {
			var err = result.a;
			return _function(err);
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCloseToken = F2(
	function (htmlModel, token) {
		return false;
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'CodeToken') {
			if (_v0.a.$ === 'Escaped') {
				var _v1 = _v0.a;
				return _Utils_eq(openToken.length - 1, closeToken.length);
			} else {
				var _v2 = _v0.a;
				return _Utils_eq(openToken.length, closeToken.length);
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken = function (token) {
	var _v0 = token.meaning;
	switch (_v0.$) {
		case 'LinkOpenToken':
			return true;
		case 'ImageOpenToken':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken = F2(
	function (closeToken, openToken) {
		var _v0 = openToken.meaning;
		if (_v0.$ === 'EmphasisToken') {
			var openChar = _v0.a;
			var open = _v0.b;
			var _v1 = closeToken.meaning;
			if (_v1.$ === 'EmphasisToken') {
				var closeChar = _v1.a;
				var close = _v1.b;
				return _Utils_eq(openChar, closeChar) ? ((_Utils_eq(open.leftFringeRank, open.rightFringeRank) || _Utils_eq(close.leftFringeRank, close.rightFringeRank)) ? ((!(!A2($elm$core$Basics$modBy, 3, closeToken.length + openToken.length))) || ((!A2($elm$core$Basics$modBy, 3, closeToken.length)) && (!A2($elm$core$Basics$modBy, 3, openToken.length)))) : true) : false;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair = F2(
	function (closeToken, openToken) {
		var _v0 = function () {
			var _v1 = openToken.meaning;
			if (_v1.$ === 'StrikethroughToken') {
				if (_v1.a.$ === 'Escaped') {
					var _v2 = _v1.a;
					return _Utils_Tuple2(true, openToken.length - 1);
				} else {
					var _v3 = _v1.a;
					return _Utils_Tuple2(true, openToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var openTokenIsStrikethrough = _v0.a;
		var openTokenLength = _v0.b;
		var _v4 = function () {
			var _v5 = closeToken.meaning;
			if (_v5.$ === 'StrikethroughToken') {
				if (_v5.a.$ === 'Escaped') {
					var _v6 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length - 1);
				} else {
					var _v7 = _v5.a;
					return _Utils_Tuple2(true, closeToken.length);
				}
			} else {
				return _Utils_Tuple2(false, 0);
			}
		}();
		var closeTokenIsStrikethrough = _v4.a;
		var closeTokenLength = _v4.b;
		return closeTokenIsStrikethrough && (openTokenIsStrikethrough && _Utils_eq(closeTokenLength, openTokenLength));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType = {$: 'HardLineBreakType'};
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch = F2(
	function (token, type_) {
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: token.index + token.length, matches: _List_Nil, start: token.index, text: '', textEnd: 0, textStart: 0, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM = F5(
	function (remaining, tokens, matches, refs, rawText) {
		lineBreakTTM:
		while (true) {
			if (!remaining.b) {
				return matches;
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v1 = token.meaning;
				if (_v1.$ === 'HardLineBreakToken') {
					var $temp$remaining = tokensTail,
						$temp$tokens = tokens,
						$temp$matches = A2(
						$elm$core$List$cons,
						A2($dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch, token, $dillonkearns$elm_markdown$Markdown$InlineParser$HardLineBreakType),
						matches),
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$refs = refs,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					refs = $temp$refs;
					rawText = $temp$rawText;
					continue lineBreakTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens = F2(
	function (_v0, tokensTail) {
		var match = _v0.a;
		return A2(
			$elm$core$List$filter,
			function (token) {
				return _Utils_cmp(token.index, match.end) > -1;
			},
			tokensTail);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch = F6(
	function (closeToken, escaped, matches, references, rawText, _v46) {
		var openToken = _v46.a;
		var remainTokens = _v46.c;
		var result = A2(
			$dillonkearns$elm_markdown$Markdown$Helpers$ifError,
			$dillonkearns$elm_markdown$Markdown$InlineParser$emailAutolinkTypeToMatch,
			$dillonkearns$elm_markdown$Markdown$InlineParser$autolinkToMatch(
				A7(
					$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
					references,
					rawText,
					function (s) {
						return s;
					},
					$dillonkearns$elm_markdown$Markdown$InlineParser$CodeType,
					openToken,
					closeToken,
					_List_Nil)));
		if (result.$ === 'Err') {
			var tempMatch = result.a;
			if (escaped.$ === 'NotEscaped') {
				var _v49 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$htmlToToken, rawText, tempMatch);
				if (_v49.$ === 'Just') {
					var newToken = _v49.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(
							A2($elm$core$List$cons, newToken, remainTokens),
							matches));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			} else {
				return $elm$core$Maybe$Nothing;
			}
		} else {
			var newMatch = result.a;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					remainTokens,
					A2($elm$core$List$cons, newMatch, matches)));
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		codeAutolinkTypeHtmlTagTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v38 = token.meaning;
				switch (_v38.$) {
					case 'CodeToken':
						var isEscaped = _v38.a;
						var _v39 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCodeTokenPair(token),
							tokens);
						if (_v39.$ === 'Just') {
							var code = _v39.a;
							var _v40 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch, token, matches, references, rawText, code);
							var newTokens = _v40.a;
							var newMatches = _v40.b;
							var $temp$remaining = tokensTail,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					case 'AngleBracketClose':
						var isEscaped = _v38.a;
						var isAngleBracketOpen = function (_v45) {
							var meaning = _v45.meaning;
							if (meaning.$ === 'AngleBracketOpen') {
								return true;
							} else {
								return false;
							}
						};
						var _v41 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, isAngleBracketOpen, tokens);
						if (_v41.$ === 'Just') {
							var found = _v41.a;
							var _v42 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$angleBracketsToMatch, token, isEscaped, matches, references, rawText, found);
							if (_v42.$ === 'Just') {
								var _v43 = _v42.a;
								var newTokens = _v43.a;
								var newMatches = _v43.b;
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									newTokens),
									$temp$matches = newMatches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2(
									$elm$core$List$filter,
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
									tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue codeAutolinkTypeHtmlTagTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2(
								$elm$core$List$filter,
								A2($elm$core$Basics$composeL, $elm$core$Basics$not, isAngleBracketOpen),
								tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue codeAutolinkTypeHtmlTagTTM;
						}
					default:
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue codeAutolinkTypeHtmlTagTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$codeToMatch = F5(
	function (closeToken, matches, references, rawText, _v34) {
		var openToken = _v34.a;
		var remainTokens = _v34.c;
		var updatedOpenToken = function () {
			var _v35 = openToken.meaning;
			if ((_v35.$ === 'CodeToken') && (_v35.a.$ === 'Escaped')) {
				var _v36 = _v35.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$CodeType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		emphasisTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v29 = token.meaning;
				if (_v29.$ === 'EmphasisToken') {
					var _char = _v29.a;
					var leftFringeRank = _v29.b.leftFringeRank;
					var rightFringeRank = _v29.b.rightFringeRank;
					if (_Utils_eq(leftFringeRank, rightFringeRank)) {
						if ((!(!rightFringeRank)) && ((!_Utils_eq(
							_char,
							_Utils_chr('_'))) || (rightFringeRank === 1))) {
							var _v30 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v30.$ === 'Just') {
								var found = _v30.a;
								var _v31 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v31.a;
								var match = _v31.b;
								var newTokens = _v31.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = A2($elm$core$List$cons, token, tokens),
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						}
					} else {
						if (_Utils_cmp(leftFringeRank, rightFringeRank) < 0) {
							var $temp$remaining = tokensTail,
								$temp$tokens = A2($elm$core$List$cons, token, tokens),
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue emphasisTTM;
						} else {
							var _v32 = A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
								$dillonkearns$elm_markdown$Markdown$InlineParser$isOpenEmphasisToken(token),
								tokens);
							if (_v32.$ === 'Just') {
								var found = _v32.a;
								var _v33 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch, references, rawText, token, tokensTail, found);
								var newRemaining = _v33.a;
								var match = _v33.b;
								var newTokens = _v33.c;
								var $temp$remaining = newRemaining,
									$temp$tokens = newTokens,
									$temp$matches = A2($elm$core$List$cons, match, matches),
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							} else {
								var $temp$remaining = tokensTail,
									$temp$tokens = tokens,
									$temp$matches = matches,
									$temp$references = references,
									$temp$rawText = rawText;
								remaining = $temp$remaining;
								tokens = $temp$tokens;
								matches = $temp$matches;
								references = $temp$references;
								rawText = $temp$rawText;
								continue emphasisTTM;
							}
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue emphasisTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$emphasisToMatch = F5(
	function (references, rawText, closeToken, tokensTail, _v27) {
		var openToken = _v27.a;
		var innerTokens = _v27.b;
		var remainTokens = _v27.c;
		var remainLength = openToken.length - closeToken.length;
		var updt = (!remainLength) ? {closeToken: closeToken, openToken: openToken, remainTokens: remainTokens, tokensTail: tokensTail} : ((remainLength > 0) ? {
			closeToken: closeToken,
			openToken: _Utils_update(
				openToken,
				{index: openToken.index + remainLength, length: closeToken.length}),
			remainTokens: A2(
				$elm$core$List$cons,
				_Utils_update(
					openToken,
					{length: remainLength}),
				remainTokens),
			tokensTail: tokensTail
		} : {
			closeToken: _Utils_update(
				closeToken,
				{length: openToken.length}),
			openToken: openToken,
			remainTokens: remainTokens,
			tokensTail: A2(
				$elm$core$List$cons,
				_Utils_update(
					closeToken,
					{index: closeToken.index + openToken.length, length: -remainLength}),
				tokensTail)
		});
		var match = A7(
			$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
			references,
			rawText,
			function (s) {
				return s;
			},
			$dillonkearns$elm_markdown$Markdown$InlineParser$EmphasisType(updt.openToken.length),
			updt.openToken,
			updt.closeToken,
			$elm$core$List$reverse(innerTokens));
		return _Utils_Tuple3(updt.tokensTail, match, updt.remainTokens);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$htmlElementTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		htmlElementTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v23 = token.meaning;
				if (_v23.$ === 'HtmlToken') {
					var isOpen = _v23.a;
					var htmlModel = _v23.b;
					if (isOpen.$ === 'NotOpening') {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = A2(
							$elm$core$List$cons,
							A2(
								$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
								token,
								$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
							matches),
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue htmlElementTTM;
					} else {
						var _v25 = A2(
							$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
							$dillonkearns$elm_markdown$Markdown$InlineParser$isCloseToken(htmlModel),
							tokensTail);
						if (_v25.$ === 'Nothing') {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = A2(
								$elm$core$List$cons,
								A2(
									$dillonkearns$elm_markdown$Markdown$InlineParser$tokenToMatch,
									token,
									$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel)),
								matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						} else {
							var _v26 = _v25.a;
							var closeToken = _v26.a;
							var innerTokens = _v26.b;
							var newTail = _v26.c;
							var newMatch = A7(
								$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
								references,
								rawText,
								function (s) {
									return s;
								},
								$dillonkearns$elm_markdown$Markdown$InlineParser$HtmlType(htmlModel),
								token,
								closeToken,
								innerTokens);
							var $temp$remaining = newTail,
								$temp$tokens = tokens,
								$temp$matches = A2($elm$core$List$cons, newMatch, matches),
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue htmlElementTTM;
						}
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue htmlElementTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkImageTypeTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		linkImageTypeTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$emphasisTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v18 = token.meaning;
				if (_v18.$ === 'SquareBracketClose') {
					var _v19 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$findToken, $dillonkearns$elm_markdown$Markdown$InlineParser$isLinkTypeOrImageOpenToken, tokens);
					if (_v19.$ === 'Just') {
						var found = _v19.a;
						var _v20 = A6($dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch, token, tokensTail, matches, references, rawText, found);
						if (_v20.$ === 'Just') {
							var _v21 = _v20.a;
							var x = _v21.a;
							var newMatches = _v21.b;
							var newTokens = _v21.c;
							var $temp$remaining = x,
								$temp$tokens = newTokens,
								$temp$matches = newMatches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						} else {
							var $temp$remaining = tokensTail,
								$temp$tokens = tokens,
								$temp$matches = matches,
								$temp$references = references,
								$temp$rawText = rawText;
							remaining = $temp$remaining;
							tokens = $temp$tokens;
							matches = $temp$matches;
							references = $temp$references;
							rawText = $temp$rawText;
							continue linkImageTypeTTM;
						}
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = tokens,
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue linkImageTypeTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue linkImageTypeTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$linkOrImageTypeToMatch = F6(
	function (closeToken, tokensTail, oldMatches, references, rawText, _v8) {
		var openToken = _v8.a;
		var innerTokens = _v8.b;
		var remainTokens = _v8.c;
		var removeOpenToken = _Utils_Tuple3(
			tokensTail,
			oldMatches,
			_Utils_ap(innerTokens, remainTokens));
		var remainText = A2($elm$core$String$dropLeft, closeToken.index + 1, rawText);
		var inactivateLinkOpenToken = function (token) {
			var _v16 = token.meaning;
			if (_v16.$ === 'LinkOpenToken') {
				return _Utils_update(
					token,
					{
						meaning: $dillonkearns$elm_markdown$Markdown$InlineParser$LinkOpenToken($dillonkearns$elm_markdown$Markdown$InlineParser$Inactive)
					});
			} else {
				return token;
			}
		};
		var findTempMatch = function (isLinkType) {
			return A7(
				$dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch,
				references,
				rawText,
				function (s) {
					return s;
				},
				isLinkType ? $dillonkearns$elm_markdown$Markdown$InlineParser$LinkType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)) : $dillonkearns$elm_markdown$Markdown$InlineParser$ImageType(
					_Utils_Tuple2('', $elm$core$Maybe$Nothing)),
				openToken,
				closeToken,
				$elm$core$List$reverse(innerTokens));
		};
		var _v9 = openToken.meaning;
		switch (_v9.$) {
			case 'ImageOpenToken':
				var tempMatch = findTempMatch(false);
				var _v10 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
				if (_v10.$ === 'Nothing') {
					return $elm$core$Maybe$Just(removeOpenToken);
				} else {
					var match = _v10.a;
					var _v11 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
					if (_v11.$ === 'Just') {
						var matches = _v11.a;
						return $elm$core$Maybe$Just(
							_Utils_Tuple3(
								A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
								matches,
								remainTokens));
					} else {
						return $elm$core$Maybe$Just(removeOpenToken);
					}
				}
			case 'LinkOpenToken':
				if (_v9.a.$ === 'Active') {
					var _v12 = _v9.a;
					var tempMatch = findTempMatch(true);
					var _v13 = A3($dillonkearns$elm_markdown$Markdown$InlineParser$checkForInlineLinkTypeOrImageType, remainText, tempMatch, references);
					if (_v13.$ === 'Nothing') {
						return $elm$core$Maybe$Just(removeOpenToken);
					} else {
						var match = _v13.a;
						var _v14 = A2($dillonkearns$elm_markdown$Markdown$InlineParser$checkParsedAheadOverlapping, match, oldMatches);
						if (_v14.$ === 'Just') {
							var matches = _v14.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple3(
									A2($dillonkearns$elm_markdown$Markdown$InlineParser$removeParsedAheadTokens, match, tokensTail),
									matches,
									A2($elm$core$List$map, inactivateLinkOpenToken, remainTokens)));
						} else {
							return $elm$core$Maybe$Just(removeOpenToken);
						}
					}
				} else {
					var _v15 = _v9.a;
					return $elm$core$Maybe$Just(removeOpenToken);
				}
			default:
				return $elm$core$Maybe$Nothing;
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughTTM = F5(
	function (remaining, tokens, matches, references, rawText) {
		strikethroughTTM:
		while (true) {
			if (!remaining.b) {
				return A5(
					$dillonkearns$elm_markdown$Markdown$InlineParser$lineBreakTTM,
					$elm$core$List$reverse(tokens),
					_List_Nil,
					matches,
					references,
					rawText);
			} else {
				var token = remaining.a;
				var tokensTail = remaining.b;
				var _v5 = token.meaning;
				if (_v5.$ === 'StrikethroughToken') {
					var isEscaped = _v5.a;
					var _v6 = A2(
						$dillonkearns$elm_markdown$Markdown$InlineParser$findToken,
						$dillonkearns$elm_markdown$Markdown$InlineParser$isStrikethroughTokenPair(token),
						tokens);
					if (_v6.$ === 'Just') {
						var content = _v6.a;
						var _v7 = A5($dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch, token, matches, references, rawText, content);
						var newTokens = _v7.a;
						var newMatches = _v7.b;
						var $temp$remaining = tokensTail,
							$temp$tokens = newTokens,
							$temp$matches = newMatches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					} else {
						var $temp$remaining = tokensTail,
							$temp$tokens = A2($elm$core$List$cons, token, tokens),
							$temp$matches = matches,
							$temp$references = references,
							$temp$rawText = rawText;
						remaining = $temp$remaining;
						tokens = $temp$tokens;
						matches = $temp$matches;
						references = $temp$references;
						rawText = $temp$rawText;
						continue strikethroughTTM;
					}
				} else {
					var $temp$remaining = tokensTail,
						$temp$tokens = A2($elm$core$List$cons, token, tokens),
						$temp$matches = matches,
						$temp$references = references,
						$temp$rawText = rawText;
					remaining = $temp$remaining;
					tokens = $temp$tokens;
					matches = $temp$matches;
					references = $temp$references;
					rawText = $temp$rawText;
					continue strikethroughTTM;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$strikethroughToMatch = F5(
	function (closeToken, matches, references, rawText, _v1) {
		var openToken = _v1.a;
		var remainTokens = _v1.c;
		var updatedOpenToken = function () {
			var _v2 = openToken.meaning;
			if ((_v2.$ === 'StrikethroughToken') && (_v2.a.$ === 'Escaped')) {
				var _v3 = _v2.a;
				return _Utils_update(
					openToken,
					{index: openToken.index + 1, length: openToken.length - 1});
			} else {
				return openToken;
			}
		}();
		var match = A7($dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch, references, rawText, $dillonkearns$elm_markdown$Markdown$Helpers$cleanWhitespaces, $dillonkearns$elm_markdown$Markdown$InlineParser$StrikethroughType, updatedOpenToken, closeToken, _List_Nil);
		return _Utils_Tuple2(
			remainTokens,
			A2($elm$core$List$cons, match, matches));
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokenPairToMatch = F7(
	function (references, rawText, processText, type_, openToken, closeToken, innerTokens) {
		var textStart = openToken.index + openToken.length;
		var textEnd = closeToken.index;
		var text = processText(
			A3($elm$core$String$slice, textStart, textEnd, rawText));
		var start = openToken.index;
		var end = closeToken.index + closeToken.length;
		var match = {end: end, matches: _List_Nil, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_};
		var matches = A2(
			$elm$core$List$map,
			function (_v0) {
				var matchModel = _v0.a;
				return A2($dillonkearns$elm_markdown$Markdown$InlineParser$prepareChildMatch, match, matchModel);
			},
			A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, innerTokens, _List_Nil, references, rawText));
		return $dillonkearns$elm_markdown$Markdown$InlineParser$Match(
			{end: end, matches: matches, start: start, text: text, textEnd: textEnd, textStart: textStart, type_: type_});
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches = F4(
	function (tokens, matches, references, rawText) {
		return A5($dillonkearns$elm_markdown$Markdown$InlineParser$codeAutolinkTypeHtmlTagTTM, tokens, _List_Nil, matches, references, rawText);
	});
var $dillonkearns$elm_markdown$Markdown$InlineParser$parse = F2(
	function (refs, rawText_) {
		var rawText = $elm$core$String$trim(rawText_);
		var tokens = $dillonkearns$elm_markdown$Markdown$InlineParser$tokenize(rawText);
		return $dillonkearns$elm_markdown$Markdown$InlineParser$matchesToInlines(
			A3(
				$dillonkearns$elm_markdown$Markdown$InlineParser$parseTextMatches,
				rawText,
				_List_Nil,
				$dillonkearns$elm_markdown$Markdown$InlineParser$organizeMatches(
					A4($dillonkearns$elm_markdown$Markdown$InlineParser$tokensToMatches, tokens, _List_Nil, refs, rawText))));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				' ',
				$elm$parser$Parser$Expecting(' '))),
			$elm$parser$Parser$Advanced$token(
			A2(
				$elm$parser$Parser$Advanced$Token,
				'>',
				$elm$parser$Parser$Expecting('>'))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Char$isAlpha,
					$elm$parser$Parser$Expecting('Alpha')),
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
							c,
							_Utils_chr('-'));
					})),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							':',
							$elm$parser$Parser$Expecting(':'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'@',
							$elm$parser$Parser$Expecting('@'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'\\',
							$elm$parser$Parser$Expecting('\\'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'+',
							$elm$parser$Parser$Expecting('+'))),
						$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'.',
							$elm$parser$Parser$Expecting('.')))
					])))
		]));
var $dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock = $elm$parser$Parser$Advanced$backtrackable(
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (rawLine, _v0) {
				return $dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(rawLine));
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$token(
						A2(
							$elm$parser$Parser$Advanced$Token,
							'<',
							$elm$parser$Parser$Expecting('<'))),
					$dillonkearns$elm_markdown$Markdown$Parser$thisIsDefinitelyNotAnHtmlTag),
				$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
var $dillonkearns$elm_markdown$Markdown$Table$TableHeader = function (a) {
	return {$: 'TableHeader', a: a};
};
var $dillonkearns$elm_markdown$Parser$Token$parseString = function (str) {
	return $elm$parser$Parser$Advanced$token(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$Expecting(str)));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper = function (_v0) {
	var curr = _v0.a;
	var acc = _v0.b;
	var _return = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Done(acc),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Done(
					A2($elm$core$List$cons, cell, acc));
			},
			curr));
	var finishCell = A2(
		$elm$core$Maybe$withDefault,
		$elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2($elm$core$Maybe$Nothing, acc)),
		A2(
			$elm$core$Maybe$map,
			function (cell) {
				return $elm$parser$Parser$Advanced$Loop(
					_Utils_Tuple2(
						$elm$core$Maybe$Nothing,
						A2($elm$core$List$cons, cell, acc)));
			},
			curr));
	var addToCurrent = function (c) {
		return _Utils_ap(
			A2($elm$core$Maybe$withDefault, '', curr),
			c);
	};
	var continueCell = function (c) {
		return $elm$parser$Parser$Advanced$Loop(
			_Utils_Tuple2(
				$elm$core$Maybe$Just(
					addToCurrent(c)),
				acc));
	};
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('|\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return _return;
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v3) {
					return _return;
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('\\'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\\\')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(
						continueCell('|'))),
				$dillonkearns$elm_markdown$Parser$Token$parseString('\\|')),
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$backtrackable(
					$elm$parser$Parser$Advanced$succeed(finishCell)),
				$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (_char, _v4) {
						return continueCell(_char);
					}),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					$elm$core$Basics$always(true),
					$elm$parser$Parser$Problem('No character found')))
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$parseCells = A2(
	$elm$parser$Parser$Advanced$map,
	A2(
		$elm$core$List$foldl,
		F2(
			function (cell, acc) {
				return A2(
					$elm$core$List$cons,
					$elm$core$String$trim(cell),
					acc);
			}),
		_List_Nil),
	A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2($elm$core$Maybe$Nothing, _List_Nil),
		$dillonkearns$elm_markdown$Markdown$TableParser$parseCellHelper));
var $dillonkearns$elm_markdown$Markdown$TableParser$rowParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
					$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
				]))),
	$dillonkearns$elm_markdown$Markdown$TableParser$parseCells);
var $dillonkearns$elm_markdown$Markdown$TableParser$parseHeader = F2(
	function (_v0, headersRow) {
		var columnAlignments = _v0.b;
		var headersWithAlignment = function (headers) {
			return A3(
				$elm$core$List$map2,
				F2(
					function (headerCell, alignment) {
						return {alignment: alignment, label: headerCell};
					}),
				headers,
				columnAlignments);
		};
		var combineHeaderAndDelimiter = function (headers) {
			return _Utils_eq(
				$elm$core$List$length(headers),
				$elm$core$List$length(columnAlignments)) ? $elm$core$Result$Ok(
				$dillonkearns$elm_markdown$Markdown$Table$TableHeader(
					headersWithAlignment(headers))) : $elm$core$Result$Err(
				'Tables must have the same number of header columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(headers)) + (') as delimiter columns (' + ($elm$core$String$fromInt(
					$elm$core$List$length(columnAlignments)) + ')'))));
		};
		var _v1 = A2($elm$parser$Parser$Advanced$run, $dillonkearns$elm_markdown$Markdown$TableParser$rowParser, headersRow);
		if (_v1.$ === 'Ok') {
			var headers = _v1.a;
			return combineHeaderAndDelimiter(headers);
		} else {
			return $elm$core$Result$Err('Unable to parse previous line as a table header');
		}
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock = F2(
	function (language, body) {
		return {body: body, language: language};
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$infoString = function (fenceCharacter) {
	var toInfoString = F2(
		function (str, _v2) {
			var _v1 = $elm$core$String$trim(str);
			if (_v1 === '') {
				return $elm$core$Maybe$Nothing;
			} else {
				var trimmed = _v1;
				return $elm$core$Maybe$Just(trimmed);
			}
		});
	var _v0 = fenceCharacter.kind;
	if (_v0.$ === 'Backtick') {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return (!_Utils_eq(
						c,
						_Utils_chr('`'))) && (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c));
				}));
	} else {
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			toInfoString,
			$elm$parser$Parser$Advanced$chompWhile(
				A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isLineEnd)));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick = {$: 'Backtick'};
var $dillonkearns$elm_markdown$Parser$Token$backtick = A2(
	$elm$parser$Parser$Advanced$Token,
	'`',
	$elm$parser$Parser$Expecting('a \'`\''));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick = {
	_char: _Utils_chr('`'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Backtick,
	token: $dillonkearns$elm_markdown$Parser$Token$backtick
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation = function (_int) {
	switch (_int) {
		case 1:
			return $elm$parser$Parser$Advanced$succeed(0);
		case 2:
			return $elm$parser$Parser$Advanced$succeed(1);
		case 3:
			return $elm$parser$Parser$Advanced$succeed(2);
		case 4:
			return $elm$parser$Parser$Advanced$succeed(3);
		default:
			return $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Expecting('Fenced code blocks should be indented no more than 3 spaces'));
	}
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast = F2(
	function (minLength, fenceCharacter) {
		var builtTokens = A3(
			$elm$core$List$foldl,
			F2(
				function (t, p) {
					return A2($elm$parser$Parser$Advanced$ignorer, p, t);
				}),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
			A2(
				$elm$core$List$repeat,
				minLength,
				$elm$parser$Parser$Advanced$token(fenceCharacter.token)));
		return A2(
			$elm$parser$Parser$Advanced$mapChompedString,
			F2(
				function (str, _v0) {
					return _Utils_Tuple2(
						fenceCharacter,
						$elm$core$String$length(str));
				}),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				builtTokens,
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(fenceCharacter._char))));
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde = {$: 'Tilde'};
var $dillonkearns$elm_markdown$Parser$Token$tilde = A2(
	$elm$parser$Parser$Advanced$Token,
	'~',
	$elm$parser$Parser$Expecting('a `~`'));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde = {
	_char: _Utils_chr('~'),
	kind: $dillonkearns$elm_markdown$Markdown$CodeBlock$Tilde,
	token: $dillonkearns$elm_markdown$Parser$Token$tilde
};
var $dillonkearns$elm_markdown$Whitespace$upToThreeSpaces = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$dillonkearns$elm_markdown$Whitespace$space,
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$dillonkearns$elm_markdown$Whitespace$space,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
					]))),
			$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
		]));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (indent, _v0) {
						var character = _v0.a;
						var length = _v0.b;
						return {character: character, indented: indent, length: length};
					})),
			$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
		A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$CodeBlock$colToIndentation, $elm$parser$Parser$Advanced$getCol)),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$backtick),
				A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, 3, $dillonkearns$elm_markdown$Markdown$CodeBlock$tilde)
			])));
var $elm$parser$Parser$ExpectingEnd = {$: 'ExpectingEnd'};
var $dillonkearns$elm_markdown$Whitespace$isSpace = $elm$core$Basics$eq(
	_Utils_chr(' '));
var $dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence = F2(
	function (minLength, fenceCharacter) {
		return A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
						$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$fenceOfAtLeast, minLength, fenceCharacter)),
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpace)),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine = function (indented) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			A2($dillonkearns$elm_markdown$Parser$Extra$upTo, indented, $dillonkearns$elm_markdown$Whitespace$space)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
			$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
};
var $elm$parser$Parser$Advanced$getSource = $elm$parser$Parser$Advanced$Parser(
	function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, s.src, s);
	});
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp = function (_v0) {
	var fence = _v0.a;
	var body = _v0.b;
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$elm$parser$Parser$Advanced$Done(body)),
				$elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd)),
				A2(
				$elm$parser$Parser$Advanced$mapChompedString,
				F2(
					function (lineEnd, _v1) {
						return $elm$parser$Parser$Advanced$Loop(
							_Utils_Tuple2(
								fence,
								_Utils_ap(body, lineEnd)));
					}),
				$dillonkearns$elm_markdown$Whitespace$lineEnd),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$elm$parser$Parser$Advanced$Done(body)),
					A2($dillonkearns$elm_markdown$Markdown$CodeBlock$closingFence, fence.length, fence.character))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						$elm$parser$Parser$Advanced$succeed(
							F3(
								function (start, end, source) {
									return $elm$parser$Parser$Advanced$Loop(
										_Utils_Tuple2(
											fence,
											_Utils_ap(
												body,
												A3($elm$core$String$slice, start, end, source))));
								})),
						$dillonkearns$elm_markdown$Markdown$CodeBlock$codeBlockLine(fence.indented)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource)
			]));
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock = function (fence) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_Utils_Tuple2(fence, ''),
		$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlockHelp);
};
var $dillonkearns$elm_markdown$Markdown$CodeBlock$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (fence) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$CodeBlock$CodeBlock),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$CodeBlock$infoString(fence.character),
					$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)),
			$dillonkearns$elm_markdown$Markdown$CodeBlock$remainingBlock(fence));
	},
	$dillonkearns$elm_markdown$Markdown$CodeBlock$openingFence);
var $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes = function (headingString) {
	return A2($elm$core$String$endsWith, '#', headingString) ? $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(
		A2($elm$core$String$dropRight, 1, headingString)) : headingString;
};
var $dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence = function (headingString) {
	var droppedTrailingHashesString = $dillonkearns$elm_markdown$Markdown$Heading$dropTrailingHashes(headingString);
	return (A2($elm$core$String$endsWith, ' ', droppedTrailingHashesString) || $elm$core$String$isEmpty(droppedTrailingHashesString)) ? $elm$core$String$trimRight(droppedTrailingHashesString) : headingString;
};
var $dillonkearns$elm_markdown$Parser$Token$hash = A2(
	$elm$parser$Parser$Advanced$Token,
	'#',
	$elm$parser$Parser$Expecting('a `#`'));
var $dillonkearns$elm_markdown$Markdown$Heading$isHash = function (c) {
	if ('#' === c.valueOf()) {
		return true;
	} else {
		return false;
	}
};
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return _Utils_eq(
			c,
			_Utils_chr(' ')) || (_Utils_eq(
			c,
			_Utils_chr('\n')) || _Utils_eq(
			c,
			_Utils_chr('\r')));
	});
var $dillonkearns$elm_markdown$Markdown$Heading$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$RawBlock$Heading),
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (startingSpaces) {
						var startSpace = $elm$core$String$length(startingSpaces);
						return (startSpace >= 4) ? $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Expecting('heading with < 4 spaces in front')) : $elm$parser$Parser$Advanced$succeed(startSpace);
					},
					$elm$parser$Parser$Advanced$getChompedString($elm$parser$Parser$Advanced$spaces))),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$hash)),
		A2(
			$elm$parser$Parser$Advanced$andThen,
			function (additionalHashes) {
				var level = $elm$core$String$length(additionalHashes) + 1;
				return (level >= 7) ? $elm$parser$Parser$Advanced$problem(
					$elm$parser$Parser$Expecting('heading with < 7 #\'s')) : $elm$parser$Parser$Advanced$succeed(level);
			},
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Markdown$Heading$isHash)))),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines('')),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$newline)),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$space),
								$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$tab)
							]))),
				A2(
					$elm$parser$Parser$Advanced$mapChompedString,
					F2(
						function (headingText, _v0) {
							return $dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
								$dillonkearns$elm_markdown$Markdown$Heading$dropClosingSequence(
									$elm$core$String$trim(headingText)));
						}),
					$dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd))
			])));
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.offset, s.row, s.col, s.src);
			var newOffset = _v1.a;
			var newRow = _v1.b;
			var newCol = _v1.c;
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.context)) : A3(
				$elm$parser$Parser$Advanced$Good,
				_Utils_cmp(s.offset, newOffset) < 0,
				_Utils_Tuple0,
				{col: newCol, context: s.context, indent: s.indent, offset: newOffset, row: newRow, src: s.src});
		});
};
var $dillonkearns$elm_markdown$Parser$Token$greaterThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'>',
	$elm$parser$Parser$Expecting('a `>`'));
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {col: col, context: context, row: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {col: s.col, context: newContext, indent: s.indent, offset: s.offset, row: s.row, src: s.src};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0.a;
		return $elm$parser$Parser$Advanced$Parser(
			function (s0) {
				var _v1 = parse(
					A2(
						$elm$parser$Parser$Advanced$changeContext,
						A2(
							$elm$core$List$cons,
							A3($elm$parser$Parser$Advanced$Located, s0.row, s0.col, context),
							s0.context),
						s0));
				if (_v1.$ === 'Good') {
					var p = _v1.a;
					var a = _v1.b;
					var s1 = _v1.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p,
						a,
						A2($elm$parser$Parser$Advanced$changeContext, s0.context, s1));
				} else {
					var step = _v1;
					return step;
				}
			});
	});
var $dillonkearns$elm_markdown$Whitespace$isWhitespace = function (_char) {
	switch (_char.valueOf()) {
		case ' ':
			return true;
		case '\n':
			return true;
		case '\t':
			return true;
		case '\u000B':
			return true;
		case '\u000C':
			return true;
		case '\r':
			return true;
		default:
			return false;
	}
};
var $dillonkearns$elm_markdown$Parser$Token$lessThan = A2(
	$elm$parser$Parser$Advanced$Token,
	'<',
	$elm$parser$Parser$Expecting('a `<`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link destination',
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$url$Url$percentEncode),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$lessThan)),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$greaterThan)),
					$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$greaterThan))),
				$elm$parser$Parser$Advanced$getChompedString(
				$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $dillonkearns$elm_markdown$Whitespace$isWhitespace)))
			])));
var $dillonkearns$elm_markdown$Parser$Token$closingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	']',
	$elm$parser$Parser$Expecting('a `]`'));
var $dillonkearns$elm_markdown$Parser$Token$openingSquareBracket = A2(
	$elm$parser$Parser$Advanced$Token,
	'[',
	$elm$parser$Parser$Expecting('a `[`'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$Helpers$prepareRefLabel),
		$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$openingSquareBracket)),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$closingSquareBracket)),
		$elm$parser$Parser$Advanced$symbol(
			A2(
				$elm$parser$Parser$Advanced$Token,
				']:',
				$elm$parser$Parser$Expecting(']:')))));
var $dillonkearns$elm_markdown$Parser$Token$doubleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\"',
	$elm$parser$Parser$Expecting('a double quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine = function (str) {
	return A2($elm$core$String$contains, '\n\n', str) ? $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Expecting('no blank line')) : $elm$parser$Parser$Advanced$succeed(str);
};
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$chompWhile(
		function (c) {
			return (!$dillonkearns$elm_markdown$Whitespace$isLineEnd(c)) && $dillonkearns$elm_markdown$Whitespace$isWhitespace(c);
		}),
	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
var $dillonkearns$elm_markdown$Whitespace$requiredWhitespace = A2(
	$elm$parser$Parser$Advanced$ignorer,
	A2(
		$elm$parser$Parser$Advanced$chompIf,
		$dillonkearns$elm_markdown$Whitespace$isWhitespace,
		$elm$parser$Parser$Expecting('Required whitespace')),
	$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isWhitespace));
var $dillonkearns$elm_markdown$Parser$Token$singleQuote = A2(
	$elm$parser$Parser$Advanced$Token,
	'\'',
	$elm$parser$Parser$Expecting('a single quote'));
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser = function () {
	var inSingleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$singleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$singleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	var inDoubleQuotes = A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Just),
			$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$hasNoBlankLine,
					$elm$parser$Parser$Advanced$getChompedString(
						$elm$parser$Parser$Advanced$chompUntil($dillonkearns$elm_markdown$Parser$Token$doubleQuote))),
				$elm$parser$Parser$Advanced$symbol($dillonkearns$elm_markdown$Parser$Token$doubleQuote)),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline));
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		'title',
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$Advanced$backtrackable(
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
							$dillonkearns$elm_markdown$Whitespace$requiredWhitespace),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									inDoubleQuotes,
									inSingleQuotes,
									$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing)
								])))),
					A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Maybe$Nothing),
					$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$onlyWhitespaceTillNewline)
				])));
}();
var $dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser = A2(
	$elm$parser$Parser$Advanced$inContext,
	'link reference definition',
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (label, destination, title) {
								return _Utils_Tuple2(
									label,
									{destination: destination, title: title});
							})),
					$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$labelParser,
							$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$dillonkearns$elm_markdown$Whitespace$lineEnd,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
								]))),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
			$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$destinationParser),
		$dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$titleParser));
var $dillonkearns$elm_markdown$ThematicBreak$ThematicBreak = {$: 'ThematicBreak'};
var $dillonkearns$elm_markdown$ThematicBreak$whitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$ThematicBreak$withChar = function (tchar) {
	var token = $dillonkearns$elm_markdown$Parser$Token$parseString(
		$elm$core$String$fromChar(tchar));
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$ThematicBreak$ThematicBreak),
								token),
							$dillonkearns$elm_markdown$ThematicBreak$whitespace),
						token),
					$dillonkearns$elm_markdown$ThematicBreak$whitespace),
				token),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return _Utils_eq(c, tchar) || $dillonkearns$elm_markdown$Whitespace$isSpaceOrTab(c);
				})),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd);
};
var $dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('-')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('*')),
			$dillonkearns$elm_markdown$ThematicBreak$withChar(
			_Utils_chr('_'))
		]));
var $dillonkearns$elm_markdown$ThematicBreak$parser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$dillonkearns$elm_markdown$Whitespace$space),
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Whitespace$space,
								$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
							]))),
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$dillonkearns$elm_markdown$Whitespace$space,
							$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
						]))),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak),
			$dillonkearns$elm_markdown$ThematicBreak$parseThematicBreak
		]));
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne = {$: 'LevelOne'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo = {$: 'LevelTwo'};
var $dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine = F2(
	function (a, b) {
		return {$: 'SetextLine', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Parser$Token$equals = A2(
	$elm$parser$Parser$Advanced$Token,
	'=',
	$elm$parser$Parser$Expecting('a `=`'));
var $dillonkearns$elm_markdown$Parser$Token$minus = A2(
	$elm$parser$Parser$Advanced$Token,
	'-',
	$elm$parser$Parser$Expecting('a `-`'));
var $dillonkearns$elm_markdown$Markdown$Parser$setextLineParser = function () {
	var setextLevel = F3(
		function (level, levelToken, levelChar) {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(level),
					$elm$parser$Parser$Advanced$token(levelToken)),
				$elm$parser$Parser$Advanced$chompWhile(
					$elm$core$Basics$eq(levelChar)));
		});
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (raw, level) {
				return A2($dillonkearns$elm_markdown$Markdown$RawBlock$SetextLine, level, raw);
			}),
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$dillonkearns$elm_markdown$Whitespace$upToThreeSpaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$oneOf(
						_List_fromArray(
							[
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelOne,
								$dillonkearns$elm_markdown$Parser$Token$equals,
								_Utils_chr('=')),
								A3(
								setextLevel,
								$dillonkearns$elm_markdown$Markdown$RawBlock$LevelTwo,
								$dillonkearns$elm_markdown$Parser$Token$minus,
								_Utils_chr('-'))
							])),
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
				$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)));
}();
var $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter = function (a) {
	return {$: 'TableDelimiter', a: a};
};
var $dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace = $elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab);
var $dillonkearns$elm_markdown$Parser$Extra$maybeChomp = function (condition) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$chompIf,
				condition,
				$elm$parser$Parser$Problem('Character not found')),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			]));
};
var $dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst = function (columns) {
	return $elm$core$List$isEmpty(columns) ? $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Parser$Token$parseString('|'),
				$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0)
			])) : $dillonkearns$elm_markdown$Parser$Token$parseString('|');
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp = function (revDelimiterColumns) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
					},
					$dillonkearns$elm_markdown$Parser$Token$parseString('|\n'))),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v1) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$dillonkearns$elm_markdown$Parser$Token$parseString('\n')),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revDelimiterColumns);
				},
				$elm$parser$Parser$Advanced$end(
					$elm$parser$Parser$Expecting('end'))),
				$elm$parser$Parser$Advanced$backtrackable(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							$elm$parser$Parser$Advanced$Done(revDelimiterColumns)),
						$dillonkearns$elm_markdown$Parser$Token$parseString('|')),
					$elm$parser$Parser$Advanced$end(
						$elm$parser$Parser$Expecting('end')))),
				A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(
							function (column) {
								return $elm$parser$Parser$Advanced$Loop(
									A2($elm$core$List$cons, column, revDelimiterColumns));
							}),
						$dillonkearns$elm_markdown$Markdown$TableParser$requirePipeIfNotFirst(revDelimiterColumns)),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getChompedString(
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2(
									$elm$parser$Parser$Advanced$ignorer,
									$elm$parser$Parser$Advanced$succeed(_Utils_Tuple0),
									$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
										function (c) {
											return _Utils_eq(
												c,
												_Utils_chr(':'));
										})),
								$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore(
									function (c) {
										return _Utils_eq(
											c,
											_Utils_chr('-'));
									})),
							$dillonkearns$elm_markdown$Parser$Extra$maybeChomp(
								function (c) {
									return _Utils_eq(
										c,
										_Utils_chr(':'));
								}))),
					$dillonkearns$elm_markdown$Markdown$TableParser$chompSinglelineWhitespace))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Block$AlignCenter = {$: 'AlignCenter'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignLeft = {$: 'AlignLeft'};
var $dillonkearns$elm_markdown$Markdown$Block$AlignRight = {$: 'AlignRight'};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment = function (cell) {
	var _v0 = _Utils_Tuple2(
		A2($elm$core$String$startsWith, ':', cell),
		A2($elm$core$String$endsWith, ':', cell));
	if (_v0.a) {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignCenter);
		} else {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignLeft);
		}
	} else {
		if (_v0.b) {
			return $elm$core$Maybe$Just($dillonkearns$elm_markdown$Markdown$Block$AlignRight);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (delimiterRow) {
		var trimmed = delimiterRow.a.trimmed;
		var headers = delimiterRow.b;
		return $elm$core$List$isEmpty(headers) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Expecting('Must have at least one column in delimiter row.')) : ((($elm$core$List$length(headers) === 1) && (!(A2($elm$core$String$startsWith, '|', trimmed) && A2($elm$core$String$endsWith, '|', trimmed)))) ? $elm$parser$Parser$Advanced$problem(
			$elm$parser$Parser$Problem('Tables with a single column must have pipes at the start and end of the delimiter row to avoid ambiguity.')) : $elm$parser$Parser$Advanced$succeed(delimiterRow));
	},
	A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (delimiterText, revDelimiterColumns) {
				return A2(
					$dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow,
					{
						raw: delimiterText,
						trimmed: $elm$core$String$trim(delimiterText)
					},
					A2(
						$elm$core$List$map,
						$dillonkearns$elm_markdown$Markdown$TableParser$delimiterToAlignment,
						$elm$core$List$reverse(revDelimiterColumns)));
			}),
		A2($elm$parser$Parser$Advanced$loop, _List_Nil, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowHelp)));
var $dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph = A2($elm$parser$Parser$Advanced$map, $dillonkearns$elm_markdown$Markdown$RawBlock$TableDelimiter, $dillonkearns$elm_markdown$Markdown$TableParser$delimiterRowParser);
var $elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			$elm$core$List$any,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, isOkay),
			list);
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength = F2(
	function (expectedLength, row) {
		var rowLength = $elm$core$List$length(row);
		var _v0 = A2($elm$core$Basics$compare, expectedLength, rowLength);
		switch (_v0.$) {
			case 'LT':
				return A2($elm$core$List$take, expectedLength, row);
			case 'EQ':
				return row;
			default:
				return _Utils_ap(
					row,
					A2($elm$core$List$repeat, expectedLength - rowLength, ''));
		}
	});
var $dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser = function (expectedRowLength) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (row) {
			return ($elm$core$List$isEmpty(row) || A2($elm$core$List$all, $elm$core$String$isEmpty, row)) ? $elm$parser$Parser$Advanced$problem(
				$elm$parser$Parser$Problem('A line must have at least one column')) : $elm$parser$Parser$Advanced$succeed(
				A2($dillonkearns$elm_markdown$Markdown$TableParser$standardizeRowLength, expectedRowLength, row));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$rowParser);
};
var $dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted = function (_v0) {
	var headers = _v0.a;
	var body = _v0.b;
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (row) {
			return $dillonkearns$elm_markdown$Markdown$RawBlock$Table(
				A2(
					$dillonkearns$elm_markdown$Markdown$Table$Table,
					headers,
					_Utils_ap(
						body,
						_List_fromArray(
							[row]))));
		},
		$dillonkearns$elm_markdown$Markdown$TableParser$bodyRowParser(
			$elm$core$List$length(headers)));
};
var $dillonkearns$elm_markdown$Markdown$Block$H1 = {$: 'H1'};
var $dillonkearns$elm_markdown$Markdown$Block$H2 = {$: 'H2'};
var $dillonkearns$elm_markdown$Markdown$Block$H3 = {$: 'H3'};
var $dillonkearns$elm_markdown$Markdown$Block$H4 = {$: 'H4'};
var $dillonkearns$elm_markdown$Markdown$Block$H5 = {$: 'H5'};
var $dillonkearns$elm_markdown$Markdown$Block$H6 = {$: 'H6'};
var $dillonkearns$elm_markdown$Markdown$Parser$toHeading = function (level) {
	switch (level) {
		case 1:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H1);
		case 2:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H2);
		case 3:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H3);
		case 4:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H4);
		case 5:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H5);
		case 6:
			return $elm$core$Result$Ok($dillonkearns$elm_markdown$Markdown$Block$H6);
		default:
			return $elm$core$Result$Err(
				$elm$parser$Parser$Expecting(
					'A heading with 1 to 6 #\'s, but found ' + $elm$core$String$fromInt(level)));
	}
};
var $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem = {$: 'EmptyItem'};
var $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem = function (a) {
	return {$: 'PlainItem', a: a};
};
var $dillonkearns$elm_markdown$Markdown$ListItem$TaskItem = F2(
	function (a, b) {
		return {$: 'TaskItem', a: a, b: b};
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem = F4(
	function (markerStartPos, listMarker, markerEndPos, _v0) {
		var bodyStartPos = _v0.a;
		var item = _v0.b;
		var spaceNum = bodyStartPos - markerEndPos;
		if (spaceNum <= 4) {
			return _Utils_Tuple3(listMarker, bodyStartPos - markerStartPos, item);
		} else {
			var intendedCodeItem = function () {
				switch (item.$) {
					case 'TaskItem':
						var completion = item.a;
						var string = item.b;
						return A2(
							$dillonkearns$elm_markdown$Markdown$ListItem$TaskItem,
							completion,
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					case 'PlainItem':
						var string = item.a;
						return $dillonkearns$elm_markdown$Markdown$ListItem$PlainItem(
							_Utils_ap(
								A2($elm$core$String$repeat, spaceNum - 1, ' '),
								string));
					default:
						return $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem;
				}
			}();
			return _Utils_Tuple3(listMarker, (markerEndPos - markerStartPos) + 1, intendedCodeItem);
		}
	});
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed(
		function (bodyStartPos) {
			return _Utils_Tuple2(bodyStartPos, $dillonkearns$elm_markdown$Markdown$ListItem$EmptyItem);
		}),
	A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getCol, $dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$ListItem$Complete = {$: 'Complete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$Incomplete = {$: 'Incomplete'};
var $dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[x] ',
					$elm$parser$Parser$ExpectingSymbol('[x] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Complete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[X] ',
					$elm$parser$Parser$ExpectingSymbol('[X] ')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$Incomplete),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'[ ] ',
					$elm$parser$Parser$ExpectingSymbol('[ ] '))))
		]));
var $dillonkearns$elm_markdown$Markdown$ListItem$parser = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$TaskItem),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$dillonkearns$elm_markdown$Markdown$ListItem$taskItemParser,
					$elm$parser$Parser$Advanced$chompWhile($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab))),
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$ListItem$PlainItem)
			])),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
		$dillonkearns$elm_markdown$Helpers$lineEndOrEnd));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (bodyStartPos, item) {
						return _Utils_Tuple2(bodyStartPos, item);
					})),
			$dillonkearns$elm_markdown$Parser$Extra$chompOneOrMore($dillonkearns$elm_markdown$Whitespace$isSpaceOrTab)),
		$elm$parser$Parser$Advanced$getCol),
	$dillonkearns$elm_markdown$Markdown$ListItem$parser);
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk = {$: 'Asterisk'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Minus = {$: 'Minus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$Plus = {$: 'Plus'};
var $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Minus),
				A2($dillonkearns$elm_markdown$Parser$Extra$upTo, 3, $dillonkearns$elm_markdown$Whitespace$space)),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'-',
					$elm$parser$Parser$ExpectingSymbol('-')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Plus),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'+',
					$elm$parser$Parser$ExpectingSymbol('+')))),
			A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$Asterisk),
			$elm$parser$Parser$Advanced$symbol(
				A2(
					$elm$parser$Parser$Advanced$Token,
					'*',
					$elm$parser$Parser$ExpectingSymbol('*'))))
		]));
var $dillonkearns$elm_markdown$Markdown$UnorderedList$parser = function (previousWasBody) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($dillonkearns$elm_markdown$Markdown$UnorderedList$getIntendedCodeItem),
					$elm$parser$Parser$Advanced$getCol),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListMarkerParser)),
			$elm$parser$Parser$Advanced$getCol),
		previousWasBody ? $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser : $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListEmptyItemParser, $dillonkearns$elm_markdown$Markdown$UnorderedList$unorderedListItemBodyParser])));
};
var $dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock = function (previousWasBody) {
	var parseListItem = F3(
		function (listmarker, intended, unparsedListItem) {
			switch (unparsedListItem.$) {
				case 'TaskItem':
					var completion = unparsedListItem.a;
					var body = unparsedListItem.b;
					return {
						body: body,
						marker: listmarker,
						task: $elm$core$Maybe$Just(
							function () {
								if (completion.$ === 'Complete') {
									return true;
								} else {
									return false;
								}
							}())
					};
				case 'PlainItem':
					var body = unparsedListItem.a;
					return {body: body, marker: listmarker, task: $elm$core$Maybe$Nothing};
				default:
					return {body: '', marker: listmarker, task: $elm$core$Maybe$Nothing};
			}
		});
	return A2(
		$elm$parser$Parser$Advanced$map,
		function (_v0) {
			var listmarker = _v0.a;
			var intended = _v0.b;
			var unparsedListItem = _v0.c;
			return A4(
				$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
				true,
				intended,
				_List_Nil,
				A3(parseListItem, listmarker, intended, unparsedListItem));
		},
		$dillonkearns$elm_markdown$Markdown$UnorderedList$parser(previousWasBody));
};
var $dillonkearns$elm_markdown$Markdown$Parser$childToBlocks = F2(
	function (node, blocks) {
		switch (node.$) {
			case 'Element':
				var tag = node.a;
				var attributes = node.b;
				var children = node.c;
				var _v99 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
				if (_v99.$ === 'Ok') {
					var childrenAsBlocks = _v99.a;
					var block = $dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, childrenAsBlocks));
					return $elm$core$Result$Ok(
						A2($elm$core$List$cons, block, blocks));
				} else {
					var err = _v99.a;
					return $elm$core$Result$Err(err);
				}
			case 'Text':
				var innerText = node.a;
				var _v100 = $dillonkearns$elm_markdown$Markdown$Parser$parse(innerText);
				if (_v100.$ === 'Ok') {
					var value = _v100.a;
					return $elm$core$Result$Ok(
						_Utils_ap(
							$elm$core$List$reverse(value),
							blocks));
				} else {
					var error = _v100.a;
					return $elm$core$Result$Err(
						$elm$parser$Parser$Expecting(
							A2(
								$elm$core$String$join,
								'\n',
								A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error))));
				}
			case 'Comment':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)),
						blocks));
			case 'Cdata':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)),
						blocks));
			case 'ProcessingInstruction':
				var string = node.a;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)),
						blocks));
			default:
				var declarationType = node.a;
				var content = node.b;
				return $elm$core$Result$Ok(
					A2(
						$elm$core$List$cons,
						$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)),
						blocks));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$completeBlocks = function (state) {
	var _v84 = state.rawBlocks;
	_v84$5:
	while (true) {
		if (_v84.b) {
			switch (_v84.a.$) {
				case 'BlockQuote':
					var body2 = _v84.a.a;
					var rest = _v84.b;
					var _v85 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						body2);
					if (_v85.$ === 'Ok') {
						var value = _v85.a;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
									rest)
							});
					} else {
						var error = _v85.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(error)));
					}
				case 'UnorderedListBlock':
					var _v86 = _v84.a;
					var tight = _v86.a;
					var intended = _v86.b;
					var closeListItems = _v86.c;
					var openListItem = _v86.d;
					var rest = _v84.b;
					var _v87 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem.body);
					if (_v87.$ === 'Ok') {
						var value = _v87.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A4(
										$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
										tight2,
										intended,
										A2(
											$elm$core$List$cons,
											{body: value.rawBlocks, task: openListItem.task},
											closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v87.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'OrderedListBlock':
					var _v92 = _v84.a;
					var tight = _v92.a;
					var intended = _v92.b;
					var marker = _v92.c;
					var order = _v92.d;
					var closeListItems = _v92.e;
					var openListItem = _v92.f;
					var rest = _v84.b;
					var _v93 = A2(
						$elm$parser$Parser$Advanced$run,
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
						openListItem);
					if (_v93.$ === 'Ok') {
						var value = _v93.a;
						var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
						return $elm$parser$Parser$Advanced$succeed(
							{
								linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
								rawBlocks: A2(
									$elm$core$List$cons,
									A6(
										$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
										tight2,
										intended,
										marker,
										order,
										A2($elm$core$List$cons, value.rawBlocks, closeListItems),
										openListItem),
									rest)
							});
					} else {
						var e = _v93.a;
						return $elm$parser$Parser$Advanced$problem(
							$elm$parser$Parser$Problem(
								$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
					}
				case 'BlankLine':
					if (_v84.b.b) {
						switch (_v84.b.a.$) {
							case 'UnorderedListBlock':
								var _v88 = _v84.a;
								var _v89 = _v84.b;
								var _v90 = _v89.a;
								var tight = _v90.a;
								var intended = _v90.b;
								var closeListItems = _v90.c;
								var openListItem = _v90.d;
								var rest = _v89.b;
								var _v91 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem.body);
								if (_v91.$ === 'Ok') {
									var value = _v91.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A4(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
													tight2,
													intended,
													A2(
														$elm$core$List$cons,
														{body: value.rawBlocks, task: openListItem.task},
														closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v91.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							case 'OrderedListBlock':
								var _v94 = _v84.a;
								var _v95 = _v84.b;
								var _v96 = _v95.a;
								var tight = _v96.a;
								var intended = _v96.b;
								var marker = _v96.c;
								var order = _v96.d;
								var closeListItems = _v96.e;
								var openListItem = _v96.f;
								var rest = _v95.b;
								var _v97 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem);
								if (_v97.$ === 'Ok') {
									var value = _v97.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												A6(
													$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
													tight2,
													intended,
													marker,
													order,
													A2($elm$core$List$cons, value.rawBlocks, closeListItems),
													openListItem),
												rest)
										});
								} else {
									var e = _v97.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
							default:
								break _v84$5;
						}
					} else {
						break _v84$5;
					}
				default:
					break _v84$5;
			}
		} else {
			break _v84$5;
		}
	}
	return $elm$parser$Parser$Advanced$succeed(state);
};
var $dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks = F2(
	function (state, newRawBlock) {
		var _v41 = _Utils_Tuple2(newRawBlock, state.rawBlocks);
		_v41$13:
		while (true) {
			if (_v41.b.b) {
				switch (_v41.b.a.$) {
					case 'CodeBlock':
						if (_v41.a.$ === 'CodeBlock') {
							var block1 = _v41.a.a;
							var _v42 = _v41.b;
							var block2 = _v42.a.a;
							var rest = _v42.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock(
											{
												body: A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2.body, block1.body),
												language: $elm$core$Maybe$Nothing
											}),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'IndentedCodeBlock':
						switch (_v41.a.$) {
							case 'IndentedCodeBlock':
								var block1 = _v41.a.a;
								var _v43 = _v41.b;
								var block2 = _v43.a.a;
								var rest = _v43.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block2, block1)),
											rest)
									});
							case 'BlankLine':
								var _v44 = _v41.a;
								var _v45 = _v41.b;
								var block = _v45.a.a;
								var rest = _v45.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$IndentedCodeBlock(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, block, '\n')),
											rest)
									});
							default:
								break _v41$13;
						}
					case 'BlockQuote':
						var _v46 = _v41.b;
						var body2 = _v46.a.a;
						var rest = _v46.b;
						switch (newRawBlock.$) {
							case 'BlockQuote':
								var body1 = newRawBlock.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A2($dillonkearns$elm_markdown$Markdown$Parser$joinStringsPreserveAll, body2, body1)),
											rest)
									});
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$BlockQuote(
												A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1)),
											rest)
									});
							default:
								var _v48 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									body2);
								if (_v48.$ === 'Ok') {
									var value = _v48.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$ParsedBlockQuote(value.rawBlocks),
													rest))
										});
								} else {
									var e = _v48.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'UnorderedListBlock':
						var _v49 = _v41.b;
						var _v50 = _v49.a;
						var tight = _v50.a;
						var intended1 = _v50.b;
						var closeListItems2 = _v50.c;
						var openListItem2 = _v50.d;
						var rest = _v49.b;
						switch (newRawBlock.$) {
							case 'UnorderedListBlock':
								var intended2 = newRawBlock.b;
								var closeListItems1 = newRawBlock.c;
								var openListItem1 = newRawBlock.d;
								if (_Utils_eq(openListItem2.marker, openListItem1.marker)) {
									var _v52 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v52.$ === 'Ok') {
										var value = _v52.a;
										return A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														false,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											}) : $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended2,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v52.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v53 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v53.$ === 'Ok') {
										var value = _v53.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight2,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem1),
														rest))
											});
									} else {
										var e = _v53.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A4(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
												tight,
												intended1,
												closeListItems2,
												_Utils_update(
													openListItem2,
													{
														body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem2.body, body1)
													})),
											rest)
									});
							default:
								var _v54 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2.body);
								if (_v54.$ === 'Ok') {
									var value = _v54.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight2,
														intended1,
														A2(
															$elm$core$List$cons,
															{body: value.rawBlocks, task: openListItem2.task},
															closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v54.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OrderedListBlock':
						var _v55 = _v41.b;
						var _v56 = _v55.a;
						var tight = _v56.a;
						var intended1 = _v56.b;
						var marker = _v56.c;
						var order = _v56.d;
						var closeListItems2 = _v56.e;
						var openListItem2 = _v56.f;
						var rest = _v55.b;
						switch (newRawBlock.$) {
							case 'OrderedListBlock':
								var intended2 = newRawBlock.b;
								var marker2 = newRawBlock.c;
								var closeListItems1 = newRawBlock.e;
								var openListItem1 = newRawBlock.f;
								if (_Utils_eq(marker, marker2)) {
									var _v58 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v58.$ === 'Ok') {
										var value = _v58.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended2,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem1),
													rest)
											});
									} else {
										var e = _v58.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								} else {
									var _v59 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v59.$ === 'Ok') {
										var value = _v59.a;
										var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
										return $elm$parser$Parser$Advanced$succeed(
											{
												linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
												rawBlocks: A2(
													$elm$core$List$cons,
													newRawBlock,
													A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															tight2,
															intended1,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem2),
														rest))
											});
									} else {
										var e = _v59.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								}
							case 'OpenBlockOrParagraph':
								var body1 = newRawBlock.a.a;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended1, marker, order, closeListItems2, openListItem2 + ('\n' + body1)),
											rest)
									});
							default:
								var _v60 = A2(
									$elm$parser$Parser$Advanced$run,
									$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
									openListItem2);
								if (_v60.$ === 'Ok') {
									var value = _v60.a;
									var tight2 = A2($elm$core$List$member, $dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine, value.rawBlocks) ? false : tight;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
											rawBlocks: A2(
												$elm$core$List$cons,
												newRawBlock,
												A2(
													$elm$core$List$cons,
													A6(
														$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
														tight2,
														intended1,
														marker,
														order,
														A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
														openListItem2),
													rest))
										});
								} else {
									var e = _v60.a;
									return $elm$parser$Parser$Advanced$problem(
										$elm$parser$Parser$Problem(
											$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
								}
						}
					case 'OpenBlockOrParagraph':
						switch (_v41.a.$) {
							case 'OpenBlockOrParagraph':
								var body1 = _v41.a.a.a;
								var _v61 = _v41.b;
								var body2 = _v61.a.a.a;
								var rest = _v61.b;
								return $elm$parser$Parser$Advanced$succeed(
									{
										linkReferenceDefinitions: state.linkReferenceDefinitions,
										rawBlocks: A2(
											$elm$core$List$cons,
											$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
												$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
													A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', body2, body1))),
											rest)
									});
							case 'SetextLine':
								if (_v41.a.a.$ === 'LevelOne') {
									var _v62 = _v41.a;
									var _v63 = _v62.a;
									var _v64 = _v41.b;
									var unparsedInlines = _v64.a.a;
									var rest = _v64.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 1, unparsedInlines),
												rest)
										});
								} else {
									var _v65 = _v41.a;
									var _v66 = _v65.a;
									var _v67 = _v41.b;
									var unparsedInlines = _v67.a.a;
									var rest = _v67.b;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												A2($dillonkearns$elm_markdown$Markdown$RawBlock$Heading, 2, unparsedInlines),
												rest)
										});
								}
							case 'TableDelimiter':
								var _v68 = _v41.a.a;
								var text = _v68.a;
								var alignments = _v68.b;
								var _v69 = _v41.b;
								var rawHeaders = _v69.a.a.a;
								var rest = _v69.b;
								var _v70 = A2(
									$dillonkearns$elm_markdown$Markdown$TableParser$parseHeader,
									A2($dillonkearns$elm_markdown$Markdown$Table$TableDelimiterRow, text, alignments),
									rawHeaders);
								if (_v70.$ === 'Ok') {
									var headers = _v70.a.a;
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$Table(
													A2($dillonkearns$elm_markdown$Markdown$Table$Table, headers, _List_Nil)),
												rest)
										});
								} else {
									return $elm$parser$Parser$Advanced$succeed(
										{
											linkReferenceDefinitions: state.linkReferenceDefinitions,
											rawBlocks: A2(
												$elm$core$List$cons,
												$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
													$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(
														A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', rawHeaders, text.raw))),
												rest)
										});
								}
							default:
								break _v41$13;
						}
					case 'Table':
						if (_v41.a.$ === 'Table') {
							var updatedTable = _v41.a.a;
							var _v71 = _v41.b;
							var rest = _v71.b;
							return $elm$parser$Parser$Advanced$succeed(
								{
									linkReferenceDefinitions: state.linkReferenceDefinitions,
									rawBlocks: A2(
										$elm$core$List$cons,
										$dillonkearns$elm_markdown$Markdown$RawBlock$Table(updatedTable),
										rest)
								});
						} else {
							break _v41$13;
						}
					case 'BlankLine':
						if (_v41.b.b.b) {
							switch (_v41.b.b.a.$) {
								case 'OrderedListBlock':
									var _v72 = _v41.b;
									var _v73 = _v72.a;
									var _v74 = _v72.b;
									var _v75 = _v74.a;
									var tight = _v75.a;
									var intended1 = _v75.b;
									var marker = _v75.c;
									var order = _v75.d;
									var closeListItems2 = _v75.e;
									var openListItem2 = _v75.f;
									var rest = _v74.b;
									var _v76 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2);
									if (_v76.$ === 'Ok') {
										var value = _v76.a;
										if (newRawBlock.$ === 'OrderedListBlock') {
											var intended2 = newRawBlock.b;
											var openListItem = newRawBlock.f;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A6(
															$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
															false,
															intended2,
															marker,
															order,
															A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A6(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock,
																	tight,
																	intended1,
																	marker,
																	order,
																	A2($elm$core$List$cons, value.rawBlocks, closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v76.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								case 'UnorderedListBlock':
									var _v78 = _v41.b;
									var _v79 = _v78.a;
									var _v80 = _v78.b;
									var _v81 = _v80.a;
									var tight = _v81.a;
									var intended1 = _v81.b;
									var closeListItems2 = _v81.c;
									var openListItem2 = _v81.d;
									var rest = _v80.b;
									var _v82 = A2(
										$elm$parser$Parser$Advanced$run,
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
										openListItem2.body);
									if (_v82.$ === 'Ok') {
										var value = _v82.a;
										if (newRawBlock.$ === 'UnorderedListBlock') {
											var openListItem = newRawBlock.d;
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															false,
															intended1,
															A2(
																$elm$core$List$cons,
																{body: value.rawBlocks, task: openListItem2.task},
																closeListItems2),
															openListItem),
														rest)
												});
										} else {
											return $elm$parser$Parser$Advanced$succeed(
												{
													linkReferenceDefinitions: _Utils_ap(state.linkReferenceDefinitions, value.linkReferenceDefinitions),
													rawBlocks: A2(
														$elm$core$List$cons,
														newRawBlock,
														A2(
															$elm$core$List$cons,
															$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
															A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended1,
																	A2(
																		$elm$core$List$cons,
																		{body: value.rawBlocks, task: openListItem2.task},
																		closeListItems2),
																	openListItem2),
																rest)))
												});
										}
									} else {
										var e = _v82.a;
										return $elm$parser$Parser$Advanced$problem(
											$elm$parser$Parser$Problem(
												$dillonkearns$elm_markdown$Markdown$Parser$deadEndsToString(e)));
									}
								default:
									break _v41$13;
							}
						} else {
							break _v41$13;
						}
					default:
						break _v41$13;
				}
			} else {
				break _v41$13;
			}
		}
		return $elm$parser$Parser$Advanced$succeed(
			{
				linkReferenceDefinitions: state.linkReferenceDefinitions,
				rawBlocks: A2($elm$core$List$cons, newRawBlock, state.rawBlocks)
			});
	});
var $dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper = F2(
	function (referencesDict, _v36) {
		var unparsedInlines = _v36.a;
		var mappedReferencesDict = $elm$core$Dict$fromList(
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapSecond(
					function (_v37) {
						var destination = _v37.destination;
						var title = _v37.title;
						return _Utils_Tuple2(destination, title);
					}),
				referencesDict));
		return A2(
			$elm$core$List$map,
			$dillonkearns$elm_markdown$Markdown$Parser$mapInline,
			A2($dillonkearns$elm_markdown$Markdown$InlineParser$parse, mappedReferencesDict, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$mapInline = function (inline) {
	switch (inline.$) {
		case 'Text':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Text(string);
		case 'HardLineBreak':
			return $dillonkearns$elm_markdown$Markdown$Block$HardLineBreak;
		case 'CodeInline':
			var string = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$CodeSpan(string);
		case 'Link':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Link,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'Image':
			var string = inline.a;
			var maybeString = inline.b;
			var inlines = inline.c;
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$Image,
				string,
				maybeString,
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
		case 'HtmlInline':
			var node = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlInline(
				$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(node));
		case 'Emphasis':
			var level = inline.a;
			var inlines = inline.b;
			switch (level) {
				case 1:
					return $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				case 2:
					return $dillonkearns$elm_markdown$Markdown$Block$Strong(
						A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
				default:
					return $dillonkearns$elm_markdown$Markdown$Helpers$isEven(level) ? $dillonkearns$elm_markdown$Markdown$Block$Strong(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 2, inlines))
							])) : $dillonkearns$elm_markdown$Markdown$Block$Emphasis(
						_List_fromArray(
							[
								$dillonkearns$elm_markdown$Markdown$Parser$mapInline(
								A2($dillonkearns$elm_markdown$Markdown$Inline$Emphasis, level - 1, inlines))
							]));
			}
		default:
			var inlines = inline.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Strikethrough(
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$mapInline, inlines));
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock = function (node) {
	switch (node.$) {
		case 'Text':
			var innerText = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment('TODO this never happens, but use types to drop this case.');
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			var parseChild = function (child) {
				if (child.$ === 'Text') {
					var text = child.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks(text);
				} else {
					return _List_fromArray(
						[
							$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(
							$dillonkearns$elm_markdown$Markdown$Parser$nodeToRawBlock(child))
						]);
				}
			};
			return A3(
				$dillonkearns$elm_markdown$Markdown$Block$HtmlElement,
				tag,
				attributes,
				A2($elm$core$List$concatMap, parseChild, children));
		case 'Comment':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string);
		case 'Cdata':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$Cdata(string);
		case 'ProcessingInstruction':
			var string = node.a;
			return $dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string);
		default:
			var declarationType = node.a;
			var content = node.b;
			return A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content);
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks = function (children) {
	return A2($dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp, children, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocksHelp = F2(
	function (remaining, soFar) {
		nodesToBlocksHelp:
		while (true) {
			if (remaining.b) {
				var node = remaining.a;
				var rest = remaining.b;
				var _v31 = A2($dillonkearns$elm_markdown$Markdown$Parser$childToBlocks, node, soFar);
				if (_v31.$ === 'Ok') {
					var newSoFar = _v31.a;
					var $temp$remaining = rest,
						$temp$soFar = newSoFar;
					remaining = $temp$remaining;
					soFar = $temp$soFar;
					continue nodesToBlocksHelp;
				} else {
					var e = _v31.a;
					return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(
					$elm$core$List$reverse(soFar));
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parse = function (input) {
	var _v27 = A2(
		$elm$parser$Parser$Advanced$run,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser(),
			$dillonkearns$elm_markdown$Helpers$endOfFile),
		input);
	if (_v27.$ === 'Err') {
		var e = _v27.a;
		return $elm$core$Result$Err(e);
	} else {
		var v = _v27.a;
		var _v28 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(v);
		if (_v28.$ === 'Err') {
			var e = _v28.a;
			return A2(
				$elm$parser$Parser$Advanced$run,
				$elm$parser$Parser$Advanced$problem(e),
				'');
		} else {
			var blocks = _v28.a;
			var isNotEmptyParagraph = function (block) {
				if ((block.$ === 'Paragraph') && (!block.a.b)) {
					return false;
				} else {
					return true;
				}
			};
			return $elm$core$Result$Ok(
				A2($elm$core$List$filter, isNotEmptyParagraph, blocks));
		}
	}
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines = function (state) {
	return A3($dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp, state, state.rawBlocks, _List_Nil);
};
var $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlinesHelp = F3(
	function (state, rawBlocks, parsedBlocks) {
		parseAllInlinesHelp:
		while (true) {
			if (rawBlocks.b) {
				var rawBlock = rawBlocks.a;
				var rest = rawBlocks.b;
				var _v26 = A2($dillonkearns$elm_markdown$Markdown$Parser$parseInlines, state.linkReferenceDefinitions, rawBlock);
				switch (_v26.$) {
					case 'ParsedBlock':
						var newParsedBlock = _v26.a;
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = A2($elm$core$List$cons, newParsedBlock, parsedBlocks);
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					case 'EmptyBlock':
						var $temp$state = state,
							$temp$rawBlocks = rest,
							$temp$parsedBlocks = parsedBlocks;
						state = $temp$state;
						rawBlocks = $temp$rawBlocks;
						parsedBlocks = $temp$parsedBlocks;
						continue parseAllInlinesHelp;
					default:
						var e = _v26.a;
						return $elm$core$Result$Err(e);
				}
			} else {
				return $elm$core$Result$Ok(parsedBlocks);
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines = F2(
	function (linkReferences, header) {
		return A2(
			$elm$core$List$map,
			function (_v24) {
				var label = _v24.label;
				var alignment = _v24.alignment;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
					linkReferences,
					function (parsedHeaderLabel) {
						return {alignment: alignment, label: parsedHeaderLabel};
					},
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(label));
			},
			header);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseInlines = F2(
	function (linkReferences, rawBlock) {
		switch (rawBlock.$) {
			case 'Heading':
				var level = rawBlock.a;
				var unparsedInlines = rawBlock.b;
				var _v17 = $dillonkearns$elm_markdown$Markdown$Parser$toHeading(level);
				if (_v17.$ === 'Ok') {
					var parsedLevel = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						A2(
							$dillonkearns$elm_markdown$Markdown$Block$Heading,
							parsedLevel,
							A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
				} else {
					var e = _v17.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'OpenBlockOrParagraph':
				var unparsedInlines = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines)));
			case 'Html':
				var html = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlBlock(html));
			case 'UnorderedListBlock':
				var tight = rawBlock.a;
				var intended = rawBlock.b;
				var unparsedItems = rawBlock.c;
				var parseItem = F2(
					function (rawBlockTask, rawBlocks) {
						var blocksTask = function () {
							if (rawBlockTask.$ === 'Just') {
								if (!rawBlockTask.a) {
									return $dillonkearns$elm_markdown$Markdown$Block$IncompleteTask;
								} else {
									return $dillonkearns$elm_markdown$Markdown$Block$CompletedTask;
								}
							} else {
								return $dillonkearns$elm_markdown$Markdown$Block$NoTask;
							}
						}();
						var blocks = function () {
							var _v18 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
								{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
							if (_v18.$ === 'Ok') {
								var parsedBlocks = _v18.a;
								return parsedBlocks;
							} else {
								var e = _v18.a;
								return _List_Nil;
							}
						}();
						return A2($dillonkearns$elm_markdown$Markdown$Block$ListItem, blocksTask, blocks);
					});
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$UnorderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						$elm$core$List$reverse(
							A2(
								$elm$core$List$map,
								function (item) {
									return A2(parseItem, item.task, item.body);
								},
								unparsedItems))));
			case 'OrderedListBlock':
				var tight = rawBlock.a;
				var startingIndex = rawBlock.d;
				var unparsedItems = rawBlock.e;
				var parseItem = function (rawBlocks) {
					var _v20 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
						{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
					if (_v20.$ === 'Ok') {
						var parsedBlocks = _v20.a;
						return parsedBlocks;
					} else {
						var e = _v20.a;
						return _List_Nil;
					}
				};
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A3(
						$dillonkearns$elm_markdown$Markdown$Block$OrderedList,
						$dillonkearns$elm_markdown$Markdown$Parser$isTightBoolToListDisplay(tight),
						startingIndex,
						$elm$core$List$reverse(
							A2($elm$core$List$map, parseItem, unparsedItems))));
			case 'CodeBlock':
				var codeBlock = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(codeBlock));
			case 'ThematicBreak':
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock($dillonkearns$elm_markdown$Markdown$Block$ThematicBreak);
			case 'BlankLine':
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'BlockQuote':
				var rawBlocks = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$EmptyBlock;
			case 'ParsedBlockQuote':
				var rawBlocks = rawBlock.a;
				var _v21 = $dillonkearns$elm_markdown$Markdown$Parser$parseAllInlines(
					{linkReferenceDefinitions: linkReferences, rawBlocks: rawBlocks});
				if (_v21.$ === 'Ok') {
					var parsedBlocks = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
						$dillonkearns$elm_markdown$Markdown$Block$BlockQuote(parsedBlocks));
				} else {
					var e = _v21.a;
					return $dillonkearns$elm_markdown$Markdown$Parser$InlineProblem(e);
				}
			case 'IndentedCodeBlock':
				var codeBlockBody = rawBlock.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$CodeBlock(
						{body: codeBlockBody, language: $elm$core$Maybe$Nothing}));
			case 'Table':
				var _v22 = rawBlock.a;
				var header = _v22.a;
				var rows = _v22.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					A2(
						$dillonkearns$elm_markdown$Markdown$Block$Table,
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseHeaderInlines, linkReferences, header),
						A2($dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines, linkReferences, rows)));
			case 'TableDelimiter':
				var _v23 = rawBlock.a;
				var text = _v23.a;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(text.raw))));
			default:
				var raw = rawBlock.b;
				return $dillonkearns$elm_markdown$Markdown$Parser$ParsedBlock(
					$dillonkearns$elm_markdown$Markdown$Block$Paragraph(
						A2(
							$dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper,
							linkReferences,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(raw))));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRawInline = F3(
	function (linkReferences, wrap, unparsedInlines) {
		return wrap(
			A2($dillonkearns$elm_markdown$Markdown$Parser$inlineParseHelper, linkReferences, unparsedInlines));
	});
var $dillonkearns$elm_markdown$Markdown$Parser$parseRowInlines = F2(
	function (linkReferences, rows) {
		return A2(
			$elm$core$List$map,
			function (row) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A3(
							$dillonkearns$elm_markdown$Markdown$Parser$parseRawInline,
							linkReferences,
							$elm$core$Basics$identity,
							$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(column));
					},
					row);
			},
			rows);
	});
var $dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock = function (revStmts) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v2) {
					return $elm$parser$Parser$Advanced$Done(revStmts);
				},
				$dillonkearns$elm_markdown$Helpers$endOfFile),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (reference) {
					return $elm$parser$Parser$Advanced$Loop(
						A2($dillonkearns$elm_markdown$Markdown$Parser$addReference, revStmts, reference));
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$LinkReferenceDefinition$parser)),
				function () {
				var _v3 = revStmts.rawBlocks;
				_v3$6:
				while (true) {
					if (_v3.b) {
						switch (_v3.a.$) {
							case 'OpenBlockOrParagraph':
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser()));
							case 'Table':
								var table = _v3.a.a;
								return A2(
									$elm$parser$Parser$Advanced$map,
									function (block) {
										return $elm$parser$Parser$Advanced$Loop(block);
									},
									A2(
										$elm$parser$Parser$Advanced$andThen,
										$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
										$elm$parser$Parser$Advanced$oneOf(
											_List_fromArray(
												[
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser(),
													$dillonkearns$elm_markdown$Markdown$Parser$tableRowIfTableStarted(table)
												]))));
							case 'UnorderedListBlock':
								var _v4 = _v3.a;
								var tight = _v4.a;
								var intended = _v4.b;
								var closeListItems = _v4.c;
								var openListItem = _v4.d;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A4(
															$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
															tight,
															intended,
															closeListItems,
															_Utils_update(
																openListItem,
																{
																	body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																})),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A4(
														$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
														tight,
														intended,
														closeListItems,
														_Utils_update(
															openListItem,
															{
																body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
															})),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v5) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'OrderedListBlock':
								var _v10 = _v3.a;
								var tight = _v10.a;
								var intended = _v10.b;
								var marker = _v10.c;
								var order = _v10.d;
								var closeListItems = _v10.e;
								var openListItem = _v10.f;
								var rest = _v3.b;
								var completeOrMergeUnorderedListBlockBlankLine = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
													A2(
														$elm$core$List$cons,
														A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
														rest))
											});
									});
								var completeOrMergeUnorderedListBlock = F2(
									function (state, newString) {
										return _Utils_update(
											state,
											{
												rawBlocks: A2(
													$elm$core$List$cons,
													A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
													rest)
											});
									});
								return $elm$parser$Parser$Advanced$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												function (_v11) {
													return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
												},
												$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$map,
												completeOrMergeUnorderedListBlock(revStmts),
												A2(
													$elm$parser$Parser$Advanced$keeper,
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
														$elm$parser$Parser$Advanced$symbol(
															A2(
																$elm$parser$Parser$Advanced$Token,
																A2($elm$core$String$repeat, intended, ' '),
																$elm$parser$Parser$ExpectingSymbol('Indentation')))),
													A2(
														$elm$parser$Parser$Advanced$ignorer,
														$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
														$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
											A2(
											$elm$parser$Parser$Advanced$map,
											function (block) {
												return $elm$parser$Parser$Advanced$Loop(block);
											},
											A2(
												$elm$parser$Parser$Advanced$andThen,
												$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
												$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList()))
										]));
							case 'BlankLine':
								if (_v3.b.b) {
									switch (_v3.b.a.$) {
										case 'UnorderedListBlock':
											var _v6 = _v3.a;
											var _v7 = _v3.b;
											var _v8 = _v7.a;
											var tight = _v8.a;
											var intended = _v8.b;
											var closeListItems = _v8.c;
											var openListItem = _v8.d;
											var rest = _v7.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A4(
																		$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																		tight,
																		intended,
																		closeListItems,
																		_Utils_update(
																			openListItem,
																			{
																				body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '', openListItem.body, newString)
																			})),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A4(
																	$dillonkearns$elm_markdown$Markdown$RawBlock$UnorderedListBlock,
																	tight,
																	intended,
																	closeListItems,
																	_Utils_update(
																		openListItem,
																		{
																			body: A3($dillonkearns$elm_markdown$Markdown$Parser$joinRawStringsWith, '\n', openListItem.body, newString)
																		})),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem.body) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v9) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										case 'OrderedListBlock':
											var _v12 = _v3.a;
											var _v13 = _v3.b;
											var _v14 = _v13.a;
											var tight = _v14.a;
											var intended = _v14.b;
											var marker = _v14.c;
											var order = _v14.d;
											var closeListItems = _v14.e;
											var openListItem = _v14.f;
											var rest = _v13.b;
											var completeOrMergeUnorderedListBlockBlankLine = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																$dillonkearns$elm_markdown$Markdown$RawBlock$BlankLine,
																A2(
																	$elm$core$List$cons,
																	A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																	rest))
														});
												});
											var completeOrMergeUnorderedListBlock = F2(
												function (state, newString) {
													return _Utils_update(
														state,
														{
															rawBlocks: A2(
																$elm$core$List$cons,
																A6($dillonkearns$elm_markdown$Markdown$RawBlock$OrderedListBlock, tight, intended, marker, order, closeListItems, openListItem + ('\n' + newString)),
																rest)
														});
												});
											return ($elm$core$String$trim(openListItem) === '') ? A2(
												$elm$parser$Parser$Advanced$map,
												function (block) {
													return $elm$parser$Parser$Advanced$Loop(block);
												},
												A2(
													$elm$parser$Parser$Advanced$andThen,
													$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
													$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser())) : $elm$parser$Parser$Advanced$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															function (_v15) {
																return A2(completeOrMergeUnorderedListBlockBlankLine, revStmts, '\n');
															},
															$dillonkearns$elm_markdown$Markdown$Parser$blankLine)),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$map,
															completeOrMergeUnorderedListBlock(revStmts),
															A2(
																$elm$parser$Parser$Advanced$keeper,
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
																	$elm$parser$Parser$Advanced$symbol(
																		A2(
																			$elm$parser$Parser$Advanced$Token,
																			A2($elm$core$String$repeat, intended, ' '),
																			$elm$parser$Parser$ExpectingSymbol('Indentation')))),
																A2(
																	$elm$parser$Parser$Advanced$ignorer,
																	$elm$parser$Parser$Advanced$getChompedString($dillonkearns$elm_markdown$Helpers$chompUntilLineEndOrEnd),
																	$dillonkearns$elm_markdown$Helpers$lineEndOrEnd)))),
														A2(
														$elm$parser$Parser$Advanced$map,
														function (block) {
															return $elm$parser$Parser$Advanced$Loop(block);
														},
														A2(
															$elm$parser$Parser$Advanced$andThen,
															$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
															$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()))
													]));
										default:
											break _v3$6;
									}
								} else {
									break _v3$6;
								}
							default:
								break _v3$6;
						}
					} else {
						break _v3$6;
					}
				}
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (block) {
						return $elm$parser$Parser$Advanced$Loop(block);
					},
					A2(
						$elm$parser$Parser$Advanced$andThen,
						$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
						$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser()));
			}(),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (block) {
					return $elm$parser$Parser$Advanced$Loop(block);
				},
				A2(
					$elm$parser$Parser$Advanced$andThen,
					$dillonkearns$elm_markdown$Markdown$Parser$completeOrMergeBlocks(revStmts),
					$dillonkearns$elm_markdown$Markdown$Parser$openBlockOrParagraphParser))
			]));
};
var $dillonkearns$elm_markdown$Markdown$Parser$textNodeToBlocks = function (textNodeValue) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		$dillonkearns$elm_markdown$Markdown$Parser$parse(textNodeValue));
};
var $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode = function (xmlNode) {
	switch (xmlNode.$) {
		case 'Text':
			var innerText = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$OpenBlockOrParagraph(
					$dillonkearns$elm_markdown$Markdown$RawBlock$UnparsedInlines(innerText)));
		case 'Element':
			var tag = xmlNode.a;
			var attributes = xmlNode.b;
			var children = xmlNode.c;
			var _v1 = $dillonkearns$elm_markdown$Markdown$Parser$nodesToBlocks(children);
			if (_v1.$ === 'Ok') {
				var parsedChildren = _v1.a;
				return $elm$parser$Parser$Advanced$succeed(
					$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
						A3($dillonkearns$elm_markdown$Markdown$Block$HtmlElement, tag, attributes, parsedChildren)));
			} else {
				var err = _v1.a;
				return $elm$parser$Parser$Advanced$problem(err);
			}
		case 'Comment':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$HtmlComment(string)));
		case 'Cdata':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$Cdata(string)));
		case 'ProcessingInstruction':
			var string = xmlNode.a;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					$dillonkearns$elm_markdown$Markdown$Block$ProcessingInstruction(string)));
		default:
			var declarationType = xmlNode.a;
			var content = xmlNode.b;
			return $elm$parser$Parser$Advanced$succeed(
				$dillonkearns$elm_markdown$Markdown$RawBlock$Html(
					A2($dillonkearns$elm_markdown$Markdown$Block$HtmlDeclaration, declarationType, content)));
	}
};
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser() {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		$dillonkearns$elm_markdown$Markdown$Parser$completeBlocks,
		A2(
			$elm$parser$Parser$Advanced$loop,
			{linkReferenceDefinitions: _List_Nil, rawBlocks: _List_Nil},
			$dillonkearns$elm_markdown$Markdown$Parser$stepRawBlock));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$indentedCodeBlock,
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v40) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$setextLineParser),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v39) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(true),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(true),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser(),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Parser$tableDelimiterInOpenParagraph)
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$dillonkearns$elm_markdown$Markdown$Parser$parseAsParagraphInsteadOfHtmlBlock,
				$dillonkearns$elm_markdown$Markdown$Parser$blankLine,
				$dillonkearns$elm_markdown$Markdown$Parser$blockQuote,
				A2(
				$elm$parser$Parser$Advanced$map,
				$dillonkearns$elm_markdown$Markdown$RawBlock$CodeBlock,
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$CodeBlock$parser)),
				A2(
				$elm$parser$Parser$Advanced$map,
				function (_v38) {
					return $dillonkearns$elm_markdown$Markdown$RawBlock$ThematicBreak;
				},
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$ThematicBreak$parser)),
				$dillonkearns$elm_markdown$Markdown$Parser$unorderedListBlock(false),
				$dillonkearns$elm_markdown$Markdown$Parser$orderedListBlock(false),
				$elm$parser$Parser$Advanced$backtrackable($dillonkearns$elm_markdown$Markdown$Heading$parser),
				$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser()
			]));
}
function $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser() {
	return A2($elm$parser$Parser$Advanced$andThen, $dillonkearns$elm_markdown$Markdown$Parser$xmlNodeToHtmlNode, $dillonkearns$elm_markdown$HtmlParser$html);
}
try {
	var $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$rawBlockParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$rawBlockParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockNotAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockNotAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterOpenBlockOrParagraphParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterOpenBlockOrParagraphParser;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$mergeableBlockAfterList = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$mergeableBlockAfterList;
	};
	var $dillonkearns$elm_markdown$Markdown$Parser$htmlParser = $dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser();
	$dillonkearns$elm_markdown$Markdown$Parser$cyclic$htmlParser = function () {
		return $dillonkearns$elm_markdown$Markdown$Parser$htmlParser;
	};
} catch ($) {
	throw 'Some top-level definitions from `Markdown.Parser` are causing infinite recursion:\n\n  ┌─────┐\n  │    childToBlocks\n  │     ↓\n  │    rawBlockParser\n  │     ↓\n  │    completeBlocks\n  │     ↓\n  │    completeOrMergeBlocks\n  │     ↓\n  │    mergeableBlockNotAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterOpenBlockOrParagraphParser\n  │     ↓\n  │    mergeableBlockAfterList\n  │     ↓\n  │    htmlParser\n  │     ↓\n  │    inlineParseHelper\n  │     ↓\n  │    mapInline\n  │     ↓\n  │    nodeToRawBlock\n  │     ↓\n  │    nodesToBlocks\n  │     ↓\n  │    nodesToBlocksHelp\n  │     ↓\n  │    parse\n  │     ↓\n  │    parseAllInlines\n  │     ↓\n  │    parseAllInlinesHelp\n  │     ↓\n  │    parseHeaderInlines\n  │     ↓\n  │    parseInlines\n  │     ↓\n  │    parseRawInline\n  │     ↓\n  │    parseRowInlines\n  │     ↓\n  │    stepRawBlock\n  │     ↓\n  │    textNodeToBlocks\n  │     ↓\n  │    xmlNodeToHtmlNode\n  └─────┘\n\nThese errors are very tricky, so read https://elm-lang.org/0.19.1/bad-recursion to learn how to fix it!';}
var $dillonkearns$elm_markdown$Markdown$Renderer$combineResults = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$foldl = F3(
	function (_function, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var block = list.a;
				var remainingBlocks = list.b;
				switch (block.$) {
					case 'HtmlBlock':
						var html = block.a;
						if (html.$ === 'HtmlElement') {
							var children = html.c;
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = _Utils_ap(children, remainingBlocks);
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						} else {
							var $temp$function = _function,
								$temp$acc = A2(_function, block, acc),
								$temp$list = remainingBlocks;
							_function = $temp$function;
							acc = $temp$acc;
							list = $temp$list;
							continue foldl;
						}
					case 'UnorderedList':
						var tight = block.a;
						var blocks = block.b;
						var childBlocks = A2(
							$elm$core$List$concatMap,
							function (_v3) {
								var children = _v3.b;
								return children;
							},
							blocks);
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(childBlocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'OrderedList':
						var _int = block.b;
						var blocks = block.c;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(
							$elm$core$List$concat(blocks),
							remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'BlockQuote':
						var blocks = block.a;
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = _Utils_ap(blocks, remainingBlocks);
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Heading':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Paragraph':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'Table':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					case 'CodeBlock':
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
					default:
						var $temp$function = _function,
							$temp$acc = A2(_function, block, acc),
							$temp$list = remainingBlocks;
						_function = $temp$function;
						acc = $temp$acc;
						list = $temp$list;
						continue foldl;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText = function (block) {
	switch (block.$) {
		case 'Paragraph':
			var inlines = block.a;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'HtmlBlock':
			var html = block.a;
			if (html.$ === 'HtmlElement') {
				var blocks = html.c;
				return A3(
					$dillonkearns$elm_markdown$Markdown$Block$foldl,
					F2(
						function (nestedBlock, soFar) {
							return _Utils_ap(
								soFar,
								$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(nestedBlock));
						}),
					'',
					blocks);
			} else {
				return '';
			}
		case 'UnorderedList':
			var tight = block.a;
			var items = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (_v4) {
						var task = _v4.a;
						var blocks = _v4.b;
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'OrderedList':
			var tight = block.a;
			var _int = block.b;
			var items = block.c;
			return A2(
				$elm$core$String$join,
				'\n',
				A2(
					$elm$core$List$map,
					function (blocks) {
						return A2(
							$elm$core$String$join,
							'\n',
							A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
					},
					items));
		case 'BlockQuote':
			var blocks = block.a;
			return A2(
				$elm$core$String$join,
				'\n',
				A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText, blocks));
		case 'Heading':
			var headingLevel = block.a;
			var inlines = block.b;
			return $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines);
		case 'Table':
			var header = block.a;
			var rows = block.b;
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$concat(
					_List_fromArray(
						[
							A2(
							$elm$core$List$map,
							$dillonkearns$elm_markdown$Markdown$Block$extractInlineText,
							A2(
								$elm$core$List$map,
								function ($) {
									return $.label;
								},
								header)),
							$elm$core$List$concat(
							A2(
								$elm$core$List$map,
								$elm$core$List$map($dillonkearns$elm_markdown$Markdown$Block$extractInlineText),
								rows))
						])));
		case 'CodeBlock':
			var body = block.a.body;
			return body;
		default:
			return '';
	}
};
var $dillonkearns$elm_markdown$Markdown$Block$extractInlineText = function (inlines) {
	return A3($elm$core$List$foldl, $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp, '', inlines);
};
var $dillonkearns$elm_markdown$Markdown$Block$extractTextHelp = F2(
	function (inline, text) {
		switch (inline.$) {
			case 'Text':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'HardLineBreak':
				return text + ' ';
			case 'CodeSpan':
				var str = inline.a;
				return _Utils_ap(text, str);
			case 'Link':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Image':
				var inlines = inline.c;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'HtmlInline':
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var blocks = html.c;
					return A3(
						$dillonkearns$elm_markdown$Markdown$Block$foldl,
						F2(
							function (block, soFar) {
								return _Utils_ap(
									soFar,
									$dillonkearns$elm_markdown$Markdown$Block$extractInlineBlockText(block));
							}),
						text,
						blocks);
				} else {
					return text;
				}
			case 'Strong':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			case 'Emphasis':
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
			default:
				var inlines = inline.a;
				return _Utils_ap(
					text,
					$dillonkearns$elm_markdown$Markdown$Block$extractInlineText(inlines));
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtml = F5(
	function (tagName, attributes, children, _v0, renderedChildren) {
		var htmlRenderer = _v0.a;
		return A2(
			$elm$core$Result$andThen,
			function (okChildren) {
				return A2(
					$elm$core$Result$map,
					function (myRenderer) {
						return myRenderer(okChildren);
					},
					A3(htmlRenderer, tagName, attributes, children));
			},
			$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(renderedChildren));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$foldThing = F3(
	function (renderer, topLevelInline, soFar) {
		var _v12 = A2($dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline, renderer, topLevelInline);
		if (_v12.$ === 'Just') {
			var inline = _v12.a;
			return A2($elm$core$List$cons, inline, soFar);
		} else {
			return soFar;
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelper = F2(
	function (renderer, blocks) {
		return A2(
			$elm$core$List$filterMap,
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle(renderer),
			blocks);
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle = function (renderer) {
	return function (block) {
		switch (block.$) {
			case 'Heading':
				var level = block.a;
				var content = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (children) {
							return renderer.heading(
								{
									children: children,
									level: level,
									rawText: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(content)
								});
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'Paragraph':
				var content = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.paragraph,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content)));
			case 'HtmlBlock':
				var html = block.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			case 'UnorderedList':
				var tight = block.a;
				var items = block.b;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return renderer.unorderedList(
								A2(
									$elm$core$List$map,
									function (_v7) {
										var task = _v7.a;
										var children = _v7.b;
										return A2(
											$dillonkearns$elm_markdown$Markdown$Block$ListItem,
											task,
											$elm$core$List$concat(children));
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (_v4) {
									var task = _v4.a;
									var children = _v4.b;
									return A2(
										$elm$core$Result$map,
										$dillonkearns$elm_markdown$Markdown$Block$ListItem(task),
										$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
											function (blocks) {
												return A2(
													$elm$core$List$filterMap,
													function (listItemBlock) {
														var _v5 = _Utils_Tuple2(tight, listItemBlock);
														if ((_v5.a.$ === 'Tight') && (_v5.b.$ === 'Paragraph')) {
															var _v6 = _v5.a;
															var content = _v5.b.a;
															return $elm$core$Maybe$Just(
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
														} else {
															return A2(
																$elm$core$Maybe$map,
																$elm$core$Result$map($elm$core$List$singleton),
																A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
														}
													},
													blocks);
											}(children)));
								},
								items))));
			case 'OrderedList':
				var tight = block.a;
				var startingIndex = block.b;
				var items = block.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						function (listItems) {
							return A2(
								renderer.orderedList,
								startingIndex,
								A2(
									$elm$core$List$map,
									function (children) {
										return $elm$core$List$concat(children);
									},
									listItems));
						},
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2(
								$elm$core$List$map,
								function (itemsblocks) {
									return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
										function (blocks) {
											return A2(
												$elm$core$List$filterMap,
												function (listItemBlock) {
													var _v8 = _Utils_Tuple2(tight, listItemBlock);
													if ((_v8.a.$ === 'Tight') && (_v8.b.$ === 'Paragraph')) {
														var _v9 = _v8.a;
														var content = _v8.b.a;
														return $elm$core$Maybe$Just(
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, content));
													} else {
														return A2(
															$elm$core$Maybe$map,
															$elm$core$Result$map($elm$core$List$singleton),
															A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelperSingle, renderer, listItemBlock));
													}
												},
												blocks);
										}(itemsblocks));
								},
								items))));
			case 'CodeBlock':
				var codeBlock = block.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeBlock(codeBlock)));
			case 'ThematicBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.thematicBreak));
			case 'BlockQuote':
				var nestedBlocks = block.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.blockQuote,
						$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
							A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, nestedBlocks))));
			default:
				var header = block.a;
				var rows = block.b;
				var renderedHeaderCells = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2(
						$elm$core$List$map,
						function (_v11) {
							var label = _v11.label;
							var alignment = _v11.alignment;
							return A2(
								$elm$core$Result$map,
								$elm$core$Tuple$pair(alignment),
								A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, label));
						},
						header));
				var renderedHeader = A2(
					$elm$core$Result$map,
					function (listListView) {
						return renderer.tableHeader(
							$elm$core$List$singleton(
								renderer.tableRow(
									A2(
										$elm$core$List$map,
										function (_v10) {
											var maybeAlignment = _v10.a;
											var item = _v10.b;
											return A2(renderer.tableHeaderCell, maybeAlignment, item);
										},
										listListView))));
					},
					renderedHeaderCells);
				var renderedBody = function (r) {
					return $elm$core$List$isEmpty(r) ? _List_Nil : _List_fromArray(
						[
							renderer.tableBody(r)
						]);
				};
				var alignmentForColumn = function (columnIndex) {
					return A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.alignment;
						},
						$elm$core$List$head(
							A2($elm$core$List$drop, columnIndex, header)));
				};
				var renderRow = function (cells) {
					return A2(
						$elm$core$Result$map,
						renderer.tableRow,
						A2(
							$elm$core$Result$map,
							$elm$core$List$indexedMap(
								F2(
									function (index, cell) {
										return A2(
											renderer.tableCell,
											alignmentForColumn(index),
											cell);
									})),
							$dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
								A2(
									$elm$core$List$map,
									$dillonkearns$elm_markdown$Markdown$Renderer$renderStyled(renderer),
									cells))));
				};
				var renderedRows = $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
					A2($elm$core$List$map, renderRow, rows));
				return $elm$core$Maybe$Just(
					A3(
						$elm$core$Result$map2,
						F2(
							function (h, r) {
								return renderer.table(
									A2(
										$elm$core$List$cons,
										h,
										renderedBody(r)));
							}),
						renderedHeader,
						renderedRows));
		}
	};
};
var $dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode = F4(
	function (renderer, tag, attributes, children) {
		return A5(
			$dillonkearns$elm_markdown$Markdown$Renderer$renderHtml,
			tag,
			attributes,
			children,
			renderer.html,
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, children));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderSingleInline = F2(
	function (renderer, inline) {
		switch (inline.$) {
			case 'Strong':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strong,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Emphasis':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.emphasis,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Strikethrough':
				var innerInlines = inline.a;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$map,
						renderer.strikethrough,
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, innerInlines)));
			case 'Image':
				var src = inline.a;
				var title = inline.b;
				var children = inline.c;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.image(
							{
								alt: $dillonkearns$elm_markdown$Markdown$Block$extractInlineText(children),
								src: src,
								title: title
							})));
			case 'Text':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.text(string)));
			case 'CodeSpan':
				var string = inline.a;
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(
						renderer.codeSpan(string)));
			case 'Link':
				var destination = inline.a;
				var title = inline.b;
				var inlines = inline.c;
				return $elm$core$Maybe$Just(
					A2(
						$elm$core$Result$andThen,
						function (children) {
							return $elm$core$Result$Ok(
								A2(
									renderer.link,
									{destination: destination, title: title},
									children));
						},
						A2($dillonkearns$elm_markdown$Markdown$Renderer$renderStyled, renderer, inlines)));
			case 'HardLineBreak':
				return $elm$core$Maybe$Just(
					$elm$core$Result$Ok(renderer.hardLineBreak));
			default:
				var html = inline.a;
				if (html.$ === 'HtmlElement') {
					var tag = html.a;
					var attributes = html.b;
					var children = html.c;
					return $elm$core$Maybe$Just(
						A4($dillonkearns$elm_markdown$Markdown$Renderer$renderHtmlNode, renderer, tag, attributes, children));
				} else {
					return $elm$core$Maybe$Nothing;
				}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$renderStyled = F2(
	function (renderer, styledStrings) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A3(
				$elm$core$List$foldr,
				$dillonkearns$elm_markdown$Markdown$Renderer$foldThing(renderer),
				_List_Nil,
				styledStrings));
	});
var $dillonkearns$elm_markdown$Markdown$Renderer$render = F2(
	function (renderer, ast) {
		return $dillonkearns$elm_markdown$Markdown$Renderer$combineResults(
			A2($dillonkearns$elm_markdown$Markdown$Renderer$renderHelper, renderer, ast));
	});
var $mdgriffith$elm_ui$Element$Font$center = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textCenter);
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 'Rgba', a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $mdgriffith$elm_ui$Element$rgba255 = F4(
	function (red, green, blue, a) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, a);
	});
var $author$project$Theme$colorPalette = {
	amaranth: A3($mdgriffith$elm_ui$Element$rgb255, 239, 45, 86),
	charlestonGreen: A3($mdgriffith$elm_ui$Element$rgb255, 44, 44, 44),
	darkMediumGray: A3($mdgriffith$elm_ui$Element$rgb255, 170, 170, 170),
	eerieBlack: A3($mdgriffith$elm_ui$Element$rgb255, 23, 23, 23),
	eerieBlackDarker: A3($mdgriffith$elm_ui$Element$rgb255, 18, 18, 18),
	eerieBlackDarkerTransparent: A4($mdgriffith$elm_ui$Element$rgba255, 18, 18, 18, 0.9),
	eerieBlackLighter: A3($mdgriffith$elm_ui$Element$rgb255, 36, 36, 36),
	eerieBlackLighterTransparent: A4($mdgriffith$elm_ui$Element$rgba255, 36, 36, 36, 0.9),
	eerieBlackLightest: A3($mdgriffith$elm_ui$Element$rgb255, 45, 45, 45),
	eerieBlackLightestTransparent: A4($mdgriffith$elm_ui$Element$rgba255, 45, 45, 45, 0.9),
	middleGreen: A3($mdgriffith$elm_ui$Element$rgb255, 82, 170, 94),
	platinum: A3($mdgriffith$elm_ui$Element$rgb255, 233, 233, 233),
	richBlack: A3($mdgriffith$elm_ui$Element$rgb255, 3, 3, 3),
	turquoiseGreen: A3($mdgriffith$elm_ui$Element$rgb255, 160, 208, 167)
};
var $author$project$Theme$textSizes = {
	desktop: {bannerText: 30, button: 20, copy: 16, _default: 14, footer: 14, heading: 35, navLink: 14, pageHeading: 24, projectDescription: 18, projectTitle: 25, siteTitle: 36, subHeading: 20, testimonialAuthorName: 15, testimonialAuthorTitle: 11, testimonialCopy: 20},
	phone: {bannerText: 14, button: 14, copy: 14, _default: 10, footer: 10, heading: 25, menuOpenClose: 20, navLink: 10, pageHeading: 18, projectDescription: 12, projectTitle: 16, siteTitle: 20, subHeading: 14, testimonialAuthorName: 12, testimonialAuthorTitle: 10, testimonialCopy: 16}
};
var $author$project$Theme$theme = {bgColor: $author$project$Theme$colorPalette.richBlack, componentHoverColor: $author$project$Theme$colorPalette.eerieBlackLightest, componentHoverColorTransparent: $author$project$Theme$colorPalette.eerieBlackLightestTransparent, contentBgColor: $author$project$Theme$colorPalette.eerieBlack, contentBgColorDarker: $author$project$Theme$colorPalette.eerieBlackDarker, contentBgColorDarkerTransparent: $author$project$Theme$colorPalette.eerieBlackDarkerTransparent, contentBgColorLighter: $author$project$Theme$colorPalette.eerieBlackLighter, contentBgColorLighterTransparent: $author$project$Theme$colorPalette.eerieBlackLighterTransparent, fontColor: $author$project$Theme$colorPalette.darkMediumGray, fontColorLighter: $author$project$Theme$colorPalette.platinum, fontLinkColor: $author$project$Theme$colorPalette.middleGreen, fontLinkHoverColor: $author$project$Theme$colorPalette.turquoiseGreen, navLinkColor: $author$project$Theme$colorPalette.darkMediumGray, navLinkHoverColor: $author$project$Theme$colorPalette.platinum, pageTitleColor: $author$project$Theme$colorPalette.middleGreen, siteTitleColor: $author$project$Theme$colorPalette.middleGreen, textSizes: $author$project$Theme$textSizes};
var $author$project$Styles$defaultBoxShadow = {
	blur: 8,
	color: $author$project$Theme$theme.contentBgColorDarker,
	offset: _Utils_Tuple2(1, 5),
	size: 0.001
};
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$light = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textLight);
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 'PaddingStyle', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Internal$Model$boxShadowClass = function (shadow) {
	return $elm$core$String$concat(
		_List_fromArray(
			[
				shadow.inset ? 'box-inset' : 'box-',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.a) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.offset.b) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.blur) + 'px',
				$mdgriffith$elm_ui$Internal$Model$floatClass(shadow.size) + 'px',
				$mdgriffith$elm_ui$Internal$Model$formatColorClass(shadow.color)
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$shadows = $mdgriffith$elm_ui$Internal$Flag$flag(19);
var $mdgriffith$elm_ui$Element$Border$shadow = function (almostShade) {
	var shade = {blur: almostShade.blur, color: almostShade.color, inset: false, offset: almostShade.offset, size: almostShade.size};
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$shadows,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			$mdgriffith$elm_ui$Internal$Model$boxShadowClass(shade),
			'box-shadow',
			$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(shade)));
};
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 'FontSize', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Components$blockquote = $mdgriffith$elm_ui$Element$column(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
			$mdgriffith$elm_ui$Element$Font$size(24),
			$mdgriffith$elm_ui$Element$Font$light,
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$padding(50),
			$mdgriffith$elm_ui$Element$spacing(20),
			$mdgriffith$elm_ui$Element$Border$rounded(10),
			$mdgriffith$elm_ui$Element$Border$shadow($author$project$Styles$defaultBoxShadow)
		]));
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var top = _v0.top;
	var right = _v0.right;
	var bottom = _v0.bottom;
	var left = _v0.left;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $author$project$Components$caption = function (children) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 10, left: 10, right: 10, top: 30}),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Font$center
			]),
		children);
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 'Transparency', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$transparent = function (on) {
	return on ? A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'transparent', 1.0)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2($mdgriffith$elm_ui$Internal$Model$Transparency, 'visible', 0.0));
};
var $author$project$Styles$defaultCommentStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$transparent(true),
		$mdgriffith$elm_ui$Element$height(
		$mdgriffith$elm_ui$Element$px(0)),
		$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.bgColor)
	]);
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 'Describe', a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 'Paragraph'};
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$MarkdownRendering$commentComponent = $mdgriffith$elm_ui$Element$paragraph(
	_Utils_ap($author$project$Styles$defaultCommentStyles, _List_Nil));
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.bold);
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$ImportFont = F2(
	function (a, b) {
		return {$: 'ImportFont', a: a, b: b};
	});
var $mdgriffith$elm_ui$Element$Font$external = function (_v0) {
	var url = _v0.url;
	var name = _v0.name;
	return A2($mdgriffith$elm_ui$Internal$Model$ImportFont, name, url);
};
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 'FontFamily', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $elm$core$String$words = _String_words;
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 'ImportFont':
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.name;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 'Text', a: a};
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$MarkdownRendering$code = function (snippet) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.04)),
				$mdgriffith$elm_ui$Element$Border$rounded(2),
				A2($mdgriffith$elm_ui$Element$paddingXY, 5, 3),
				$mdgriffith$elm_ui$Element$Font$family(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$external(
						{name: 'Source Code Pro', url: 'https://fonts.googleapis.com/css?family=Source+Code+Pro'})
					]))
			]),
		$mdgriffith$elm_ui$Element$text(snippet));
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $author$project$MarkdownRendering$codeBlock = function (details) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0.03)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2($elm$html$Html$Attributes$style, 'white-space', 'pre')),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$Font$family(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$external(
						{name: 'Source Code Pro', url: 'https://fonts.googleapis.com/css?family=Source+Code+Pro'})
					]))
			]),
		$mdgriffith$elm_ui$Element$text(details.body));
};
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $mdgriffith$elm_ui$Internal$Model$Heading = function (a) {
	return {$: 'Heading', a: a};
};
var $mdgriffith$elm_ui$Element$Region$heading = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Describe, $mdgriffith$elm_ui$Internal$Model$Heading);
var $dillonkearns$elm_markdown$Markdown$Block$headingLevelToInt = function (headingLevel) {
	switch (headingLevel.$) {
		case 'H1':
			return 1;
		case 'H2':
			return 2;
		case 'H3':
			return 3;
		case 'H4':
			return 4;
		case 'H5':
			return 5;
		default:
			return 6;
	}
};
var $author$project$MarkdownRendering$rawTextToId = function (rawText) {
	return $elm$core$String$toLower(
		A2(
			$elm$core$String$join,
			'-',
			A2($elm$core$String$split, ' ', rawText)));
};
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 'Typeface', a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$MarkdownRendering$heading = function (_v0) {
	var level = _v0.level;
	var rawText = _v0.rawText;
	var children = _v0.children;
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(
				function () {
					switch (level.$) {
						case 'H1':
							return 24;
						case 'H2':
							return 36;
						case 'H3':
							return 24;
						default:
							return 20;
					}
				}()),
				$mdgriffith$elm_ui$Element$Font$family(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$typeface('Ubuntu')
					])),
				$mdgriffith$elm_ui$Element$Font$light,
				$mdgriffith$elm_ui$Element$Region$heading(
				$dillonkearns$elm_markdown$Markdown$Block$headingLevelToInt(level)),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				A2(
					$elm$html$Html$Attributes$attribute,
					'name',
					$author$project$MarkdownRendering$rawTextToId(rawText))),
				$mdgriffith$elm_ui$Element$htmlAttribute(
				$elm$html$Html$Attributes$id(
					$author$project$MarkdownRendering$rawTextToId(rawText)))
			]),
		children);
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $author$project$Styles$defaultBoxStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
		$mdgriffith$elm_ui$Element$padding(30),
		$mdgriffith$elm_ui$Element$centerX,
		$mdgriffith$elm_ui$Element$centerY,
		$mdgriffith$elm_ui$Element$Border$rounded(10),
		$mdgriffith$elm_ui$Element$Border$shadow($author$project$Styles$defaultBoxShadow)
	]);
var $author$project$Components$inlineBox = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_Utils_ap($author$project$Styles$defaultBoxStyles, _List_Nil),
		content);
};
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.italic);
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var url = _v0.url;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.link)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$Hover = {$: 'Hover'};
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 'PseudoSelector', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$hover = $mdgriffith$elm_ui$Internal$Flag$flag(33);
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 'Nearby', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 'NoAttribute'};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 'TransformComponent', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 'Empty'};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 'Styled':
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						html: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.html, add, context));
							}),
						styles: styled.styles
					});
			case 'Unstyled':
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 'Text':
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 'NoAttribute':
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 'Describe':
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 'AlignX':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 'AlignY':
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 'Width':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 'Height':
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 'Class':
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 'StyleClass':
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 'Nearby':
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 'Attr':
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 'StyleClass':
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 'TransformComponent':
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseOver = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$hover,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			$mdgriffith$elm_ui$Internal$Model$Hover,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $author$project$Components$link = F2(
	function (_v0, body) {
		var title = _v0.title;
		var destination = _v0.destination;
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$htmlAttribute(
					A2($elm$html$Html$Attributes$style, 'display', 'inline-flex'))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkColor),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
								]))
						]),
					body),
				url: destination
			});
	});
var $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer = function (a) {
	return {$: 'HtmlRenderer', a: a};
};
var $dillonkearns$elm_markdown$Markdown$Html$resultOr = F2(
	function (ra, rb) {
		if (ra.$ === 'Err') {
			var singleError = ra.a;
			if (rb.$ === 'Ok') {
				var okValue = rb.a;
				return $elm$core$Result$Ok(okValue);
			} else {
				var errorsSoFar = rb.a;
				return $elm$core$Result$Err(
					A2($elm$core$List$cons, singleError, errorsSoFar));
			}
		} else {
			var okValue = ra.a;
			return $elm$core$Result$Ok(okValue);
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$attributesToString = function (attributes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var name = _v0.name;
				var value = _v0.value;
				return name + ('=\"' + (value + '\"'));
			},
			attributes));
};
var $dillonkearns$elm_markdown$Markdown$Html$tagToString = F2(
	function (tagName, attributes) {
		return $elm$core$List$isEmpty(attributes) ? ('<' + (tagName + '>')) : ('<' + (tagName + (' ' + ($dillonkearns$elm_markdown$Markdown$Html$attributesToString(attributes) + '>'))));
	});
var $dillonkearns$elm_markdown$Markdown$Html$oneOf = function (decoders) {
	var unwrappedDecoders = A2(
		$elm$core$List$map,
		function (_v1) {
			var rawDecoder = _v1.a;
			return rawDecoder;
		},
		decoders);
	return function (rawDecoder) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return A2(
						$elm$core$Result$mapError,
						function (errors) {
							if (!errors.b) {
								return 'Ran into a oneOf with no possibilities!';
							} else {
								if (!errors.b.b) {
									var singleError = errors.a;
									return 'Problem with the given value:\n\n' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\n' + (singleError + '\n')));
								} else {
									return 'oneOf failed parsing this value:\n    ' + (A2($dillonkearns$elm_markdown$Markdown$Html$tagToString, tagName, attributes) + ('\n\nParsing failed in the following 2 ways:\n\n\n' + (A2(
										$elm$core$String$join,
										'\n\n',
										A2(
											$elm$core$List$indexedMap,
											F2(
												function (index, error) {
													return '(' + ($elm$core$String$fromInt(index + 1) + (') ' + error));
												}),
											errors)) + '\n')));
								}
							}
						},
						A3(rawDecoder, tagName, attributes, innerBlocks));
				}));
	}(
		A3(
			$elm$core$List$foldl,
			F2(
				function (decoder, soFar) {
					return F3(
						function (tagName, attributes, children) {
							return A2(
								$dillonkearns$elm_markdown$Markdown$Html$resultOr,
								A3(decoder, tagName, attributes, children),
								A3(soFar, tagName, attributes, children));
						});
				}),
			F3(
				function (tagName, attributes, children) {
					return $elm$core$Result$Err(_List_Nil);
				}),
			unwrappedDecoders));
};
var $mdgriffith$elm_ui$Internal$Model$Top = {$: 'Top'};
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Top);
var $author$project$Styles$defaultParagraphStyles = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$spacing(10)
	]);
var $author$project$Styles$noBoxShadow = {
	blur: 0,
	color: $author$project$Theme$theme.contentBgColor,
	offset: _Utils_Tuple2(0, 0),
	size: 0
};
var $mdgriffith$elm_ui$Internal$Model$AsRow = {$: 'AsRow'};
var $mdgriffith$elm_ui$Internal$Model$asRow = $mdgriffith$elm_ui$Internal$Model$AsRow;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentLeft + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.contentCenterY)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Components$orderedList = F2(
	function (startingIndex, items) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Styles$defaultBoxStyles,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(30),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
						$mdgriffith$elm_ui$Element$Border$shadow($author$project$Styles$noBoxShadow),
						$mdgriffith$elm_ui$Element$paddingEach(
						{bottom: 0, left: 20, right: 0, top: 0})
					])),
			A2(
				$elm$core$List$indexedMap,
				F2(
					function (index, itemBlocks) {
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(5),
									$mdgriffith$elm_ui$Element$paddingEach(
									{bottom: 0, left: 20, right: 0, top: 0}),
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Element$row,
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$alignTop,
											$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
										]),
									_List_fromArray(
										[
											A2(
											$mdgriffith$elm_ui$Element$paragraph,
											_Utils_ap(
												$author$project$Styles$defaultParagraphStyles,
												_List_fromArray(
													[$mdgriffith$elm_ui$Element$Font$alignLeft])),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Element$text(
													$elm$core$String$fromInt(index + startingIndex) + '. '),
												itemBlocks))
										]))
								]));
					}),
				items));
	});
var $author$project$Components$paragraph = $mdgriffith$elm_ui$Element$paragraph($author$project$Styles$defaultParagraphStyles);
var $mdgriffith$elm_ui$Element$Font$strike = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.strike);
var $dillonkearns$elm_markdown$Markdown$Html$tag = F2(
	function (expectedTag, a) {
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, children) {
					return _Utils_eq(tagName, expectedTag) ? $elm$core$Result$Ok(a) : $elm$core$Result$Err('Expected ' + (expectedTag + (' but was ' + tagName)));
				}));
	});
var $mdgriffith$elm_ui$Element$Font$extraLight = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textExtraLight);
var $author$project$Components$thematicBreak = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$Font$extraLight,
			$mdgriffith$elm_ui$Element$Font$size(40)
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(40))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text('~')
				]))
		]));
var $mdgriffith$elm_ui$Internal$Model$Left = {$: 'Left'};
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Left);
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $elm$core$Basics$pi = _Basics_pi;
var $elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * $elm$core$Basics$pi) / 180;
};
var $mdgriffith$elm_ui$Internal$Model$InFront = {$: 'InFront'};
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 'Empty') {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, $mdgriffith$elm_ui$Internal$Model$InFront, element);
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 'MoveY', a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $mdgriffith$elm_ui$Internal$Model$Rotate = F2(
	function (a, b) {
		return {$: 'Rotate', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$rotate = $mdgriffith$elm_ui$Internal$Flag$flag(24);
var $mdgriffith$elm_ui$Element$rotate = function (angle) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$rotate,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Rotate,
			_Utils_Tuple3(0, 0, 1),
			angle));
};
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 'BorderWidth', a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Border$widthXY = F2(
	function (x, y) {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$borderWidth,
			A5(
				$mdgriffith$elm_ui$Internal$Model$BorderWidth,
				'b-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
				y,
				x,
				y,
				x));
	});
var $mdgriffith$elm_ui$Element$Border$widthEach = function (_v0) {
	var bottom = _v0.bottom;
	var top = _v0.top;
	var left = _v0.left;
	var right = _v0.right;
	return (_Utils_eq(top, bottom) && _Utils_eq(left, right)) ? (_Utils_eq(top, right) ? $mdgriffith$elm_ui$Element$Border$width(top) : A2($mdgriffith$elm_ui$Element$Border$widthXY, left, top)) : A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left))))))),
			top,
			right,
			bottom,
			left));
};
var $mdgriffith$elm_ui$Element$Input$defaultCheckbox = function (checked) {
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Internal$Model$htmlClass('focusable'),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(14)),
				$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$size(9),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$Border$rounded(3),
				$mdgriffith$elm_ui$Element$Border$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : A3($mdgriffith$elm_ui$Element$rgb, 211 / 255, 211 / 255, 211 / 255)),
				$mdgriffith$elm_ui$Element$Border$shadow(
				{
					blur: 1,
					color: checked ? A4($mdgriffith$elm_ui$Element$rgba, 238 / 255, 238 / 255, 238 / 255, 0) : A3($mdgriffith$elm_ui$Element$rgb, 238 / 255, 238 / 255, 238 / 255),
					offset: _Utils_Tuple2(0, 0),
					size: 1
				}),
				$mdgriffith$elm_ui$Element$Background$color(
				checked ? A3($mdgriffith$elm_ui$Element$rgb, 59 / 255, 153 / 255, 252 / 255) : $mdgriffith$elm_ui$Element$Input$white),
				$mdgriffith$elm_ui$Element$Border$width(
				checked ? 0 : 1),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$white),
							$mdgriffith$elm_ui$Element$height(
							$mdgriffith$elm_ui$Element$px(6)),
							$mdgriffith$elm_ui$Element$width(
							$mdgriffith$elm_ui$Element$px(9)),
							$mdgriffith$elm_ui$Element$rotate(
							$elm$core$Basics$degrees(-45)),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$moveUp(1),
							$mdgriffith$elm_ui$Element$transparent(!checked),
							$mdgriffith$elm_ui$Element$Border$widthEach(
							{bottom: 2, left: 2, right: 0, top: 0})
						]),
					$mdgriffith$elm_ui$Element$none))
			]),
		$mdgriffith$elm_ui$Element$none);
};
var $author$project$Components$unorderedList = function (items) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_Utils_ap(
			$author$project$Styles$defaultBoxStyles,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(30),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
					$mdgriffith$elm_ui$Element$Border$shadow($author$project$Styles$noBoxShadow),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 20, right: 0, top: 0}),
					$mdgriffith$elm_ui$Element$alignLeft
				])),
		A2(
			$elm$core$List$map,
			function (_v0) {
				var task = _v0.a;
				var children = _v0.b;
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_Utils_ap(
								$author$project$Styles$defaultParagraphStyles,
								_List_fromArray(
									[$mdgriffith$elm_ui$Element$alignTop, $mdgriffith$elm_ui$Element$Font$alignLeft])),
							A2(
								$elm$core$List$cons,
								function () {
									switch (task.$) {
										case 'IncompleteTask':
											return $mdgriffith$elm_ui$Element$Input$defaultCheckbox(false);
										case 'CompletedTask':
											return $mdgriffith$elm_ui$Element$Input$defaultCheckbox(true);
										default:
											return A2(
												$mdgriffith$elm_ui$Element$paragraph,
												_List_Nil,
												_List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('•')
													]));
									}
								}(),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$text(' '),
									children)))
						]));
			},
			items));
};
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$img = _VirtualDom_node('img');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $author$project$Components$viewImageHtml = function (img) {
	return $mdgriffith$elm_ui$Element$html(
		A2(
			$elm$html$Html$img,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'object-fit', 'contain'),
					A2($elm$html$Html$Attributes$style, 'max-width', '100%'),
					A2($elm$html$Html$Attributes$style, 'max-height', '100%'),
					A2($elm$html$Html$Attributes$style, 'width', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'auto'),
					A2($elm$html$Html$Attributes$style, 'border-radius', '10px'),
					A2($elm$html$Html$Attributes$style, 'margin', 'auto'),
					$elm$html$Html$Attributes$alt(img.alt),
					$elm$html$Html$Attributes$src(img.src)
				]),
			_List_Nil));
};
var $author$project$MarkdownRendering$elmUiRenderer = {
	blockQuote: $author$project$Components$blockquote,
	codeBlock: $author$project$MarkdownRendering$codeBlock,
	codeSpan: $author$project$MarkdownRendering$code,
	emphasis: function (content) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic]),
			content);
	},
	hardLineBreak: $mdgriffith$elm_ui$Element$html(
		A2($elm$html$Html$br, _List_Nil, _List_Nil)),
	heading: $author$project$MarkdownRendering$heading,
	html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(
		_List_fromArray(
			[
				A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'figure', $author$project$Components$inlineBox)
			])),
	image: $author$project$Components$viewImageHtml,
	link: $author$project$Components$link,
	orderedList: $author$project$Components$orderedList,
	paragraph: $author$project$Components$paragraph,
	strikethrough: function (content) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$strike]),
			content);
	},
	strong: function (content) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			content);
	},
	table: $mdgriffith$elm_ui$Element$column(_List_Nil),
	tableBody: $mdgriffith$elm_ui$Element$column(_List_Nil),
	tableCell: F2(
		function (maybeAlignment, children) {
			return A2($mdgriffith$elm_ui$Element$paragraph, _List_Nil, children);
		}),
	tableHeader: $mdgriffith$elm_ui$Element$column(_List_Nil),
	tableHeaderCell: F2(
		function (maybeAlignment, children) {
			return A2($mdgriffith$elm_ui$Element$paragraph, _List_Nil, children);
		}),
	tableRow: $mdgriffith$elm_ui$Element$row(_List_Nil),
	text: $mdgriffith$elm_ui$Element$text,
	thematicBreak: $author$project$Components$thematicBreak,
	unorderedList: $author$project$Components$unorderedList
};
var $mdgriffith$elm_ui$Element$Font$regular = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.textNormalWeight);
var $author$project$MarkdownRendering$textComponent = $mdgriffith$elm_ui$Element$paragraph(_List_Nil);
var $author$project$MarkdownRendering$quoteComponent = F2(
	function (maybeAuthor, children) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Styles$defaultBoxStyles,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(24),
						$mdgriffith$elm_ui$Element$Font$light,
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$padding(20)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$padding(20),
							$mdgriffith$elm_ui$Element$spacing(20)
						]),
					children),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$regular,
							$mdgriffith$elm_ui$Element$Font$size(20)
						]),
					function () {
						if (maybeAuthor.$ === 'Just') {
							var author = maybeAuthor.a;
							return _List_fromArray(
								[
									$author$project$MarkdownRendering$textComponent(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(author)
										]))
								]);
						} else {
							return _List_Nil;
						}
					}())
				]));
	});
var $author$project$MarkdownRendering$snippetComponent = F2(
	function (_v0, children) {
		var maybeSnippetTitle = _v0.maybeSnippetTitle;
		var maybeSrc = _v0.maybeSrc;
		var maybeURL = _v0.maybeURL;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				$author$project$Styles$defaultBoxStyles,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$light,
							$mdgriffith$elm_ui$Element$Font$size(24),
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					function () {
						if (maybeSnippetTitle.$ === 'Just') {
							var snippetTitle = maybeSnippetTitle.a;
							return _List_fromArray(
								[
									$author$project$MarkdownRendering$textComponent(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(snippetTitle)
										]))
								]);
						} else {
							return _List_Nil;
						}
					}()),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_Utils_ap(
						$author$project$Styles$defaultParagraphStyles,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Font$size(20),
								$mdgriffith$elm_ui$Element$Font$light
							])),
					children),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$regular,
							$mdgriffith$elm_ui$Element$Font$size(20)
						]),
					function () {
						if (maybeSrc.$ === 'Just') {
							var src = maybeSrc.a;
							return _List_fromArray(
								[
									$author$project$MarkdownRendering$textComponent(
									_List_fromArray(
										[
											$mdgriffith$elm_ui$Element$text(src)
										]))
								]);
						} else {
							return _List_Nil;
						}
					}())
				]));
	});
var $dillonkearns$elm_markdown$List$Helpers$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return $elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var $dillonkearns$elm_markdown$Markdown$Html$withAttribute = F2(
	function (attributeName, _v0) {
		var renderer = _v0.a;
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return function () {
						var _v1 = A2(
							$dillonkearns$elm_markdown$List$Helpers$find,
							function (_v2) {
								var name = _v2.name;
								var value = _v2.value;
								return _Utils_eq(name, attributeName);
							},
							attributes);
						if (_v1.$ === 'Just') {
							var value = _v1.a.value;
							return $elm$core$Result$map(
								$elm$core$Basics$apR(value));
						} else {
							return function (_v3) {
								return $elm$core$Result$Err('Expecting attribute \"' + (attributeName + '\".'));
							};
						}
					}()(
						A3(renderer, tagName, attributes, innerBlocks));
				}));
	});
var $dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute = F2(
	function (attributeName, _v0) {
		var renderer = _v0.a;
		return $dillonkearns$elm_markdown$Markdown$HtmlRenderer$HtmlRenderer(
			F3(
				function (tagName, attributes, innerBlocks) {
					return function () {
						var _v1 = A2(
							$dillonkearns$elm_markdown$List$Helpers$find,
							function (_v2) {
								var name = _v2.name;
								var value = _v2.value;
								return _Utils_eq(name, attributeName);
							},
							attributes);
						if (_v1.$ === 'Just') {
							var value = _v1.a.value;
							return $elm$core$Result$map(
								$elm$core$Basics$apR(
									$elm$core$Maybe$Just(value)));
						} else {
							return $elm$core$Result$map(
								$elm$core$Basics$apR($elm$core$Maybe$Nothing));
						}
					}()(
						A3(renderer, tagName, attributes, innerBlocks));
				}));
	});
var $author$project$MarkdownRendering$renderer = _Utils_update(
	$author$project$MarkdownRendering$elmUiRenderer,
	{
		html: $dillonkearns$elm_markdown$Markdown$Html$oneOf(
			_List_fromArray(
				[
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'figure', $author$project$Components$inlineBox),
					A2(
					$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
					'title',
					A2(
						$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
						'src',
						A2(
							$dillonkearns$elm_markdown$Markdown$Html$withAttribute,
							'alt',
							A2(
								$dillonkearns$elm_markdown$Markdown$Html$tag,
								'img',
								F4(
									function (alt, src, title, children) {
										return $author$project$Components$viewImageHtml(
											{alt: alt, src: src, title: title});
									}))))),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'figcaption', $author$project$Components$caption),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'blockquote', $author$project$Components$blockquote),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'h6', $author$project$Components$caption),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'p', $author$project$Components$caption),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'a', $author$project$Components$caption),
					A2(
					$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
					'author',
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'quote', $author$project$MarkdownRendering$quoteComponent)),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'quotecontent', $author$project$MarkdownRendering$textComponent),
					A2(
					$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
					'snippeturl',
					A2(
						$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
						'snippetsrc',
						A2(
							$dillonkearns$elm_markdown$Markdown$Html$withOptionalAttribute,
							'snippettitle',
							A2(
								$dillonkearns$elm_markdown$Markdown$Html$tag,
								'snippet',
								F4(
									function (snippettitle, snippetSrc, snippetURL, children) {
										return A2(
											$author$project$MarkdownRendering$snippetComponent,
											{maybeSnippetTitle: snippettitle, maybeSrc: snippetSrc, maybeURL: snippetURL},
											children);
									}))))),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'snippetcontent', $author$project$MarkdownRendering$textComponent),
					A2($dillonkearns$elm_markdown$Markdown$Html$tag, 'comment', $author$project$MarkdownRendering$commentComponent)
				]))
	});
var $author$project$MarkdownRendering$markdownView = function (md) {
	return A2(
		$elm$core$Result$andThen,
		$dillonkearns$elm_markdown$Markdown$Renderer$render($author$project$MarkdownRendering$renderer),
		A2(
			$elm$core$Result$mapError,
			function (error) {
				return A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $dillonkearns$elm_markdown$Markdown$Parser$deadEndToString, error));
			},
			$dillonkearns$elm_markdown$Markdown$Parser$parse(md)));
};
var $mdgriffith$elm_ui$Element$Font$alignRight = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textRight);
var $ryannhg$date_format$DateFormat$DayOfMonthSuffix = {$: 'DayOfMonthSuffix'};
var $ryannhg$date_format$DateFormat$dayOfMonthSuffix = $ryannhg$date_format$DateFormat$DayOfMonthSuffix;
var $ryannhg$date_format$DateFormat$Language$Language = F6(
	function (toMonthName, toMonthAbbreviation, toWeekdayName, toWeekdayAbbreviation, toAmPm, toOrdinalSuffix) {
		return {toAmPm: toAmPm, toMonthAbbreviation: toMonthAbbreviation, toMonthName: toMonthName, toOrdinalSuffix: toOrdinalSuffix, toWeekdayAbbreviation: toWeekdayAbbreviation, toWeekdayName: toWeekdayName};
	});
var $ryannhg$date_format$DateFormat$Language$toEnglishAmPm = function (hour) {
	return (hour > 11) ? 'pm' : 'am';
};
var $ryannhg$date_format$DateFormat$Language$toEnglishMonthName = function (month) {
	switch (month.$) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishSuffix = function (num) {
	var _v0 = A2($elm$core$Basics$modBy, 100, num);
	switch (_v0) {
		case 11:
			return 'th';
		case 12:
			return 'th';
		case 13:
			return 'th';
		default:
			var _v1 = A2($elm$core$Basics$modBy, 10, num);
			switch (_v1) {
				case 1:
					return 'st';
				case 2:
					return 'nd';
				case 3:
					return 'rd';
				default:
					return 'th';
			}
	}
};
var $ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName = function (weekday) {
	switch (weekday.$) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var $ryannhg$date_format$DateFormat$Language$english = A6(
	$ryannhg$date_format$DateFormat$Language$Language,
	$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishMonthName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
	A2(
		$elm$core$Basics$composeR,
		$ryannhg$date_format$DateFormat$Language$toEnglishWeekdayName,
		$elm$core$String$left(3)),
	$ryannhg$date_format$DateFormat$Language$toEnglishAmPm,
	$ryannhg$date_format$DateFormat$Language$toEnglishSuffix);
var $elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return $elm$core$Basics$floor(numerator / denominator);
	});
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0.a;
	return millis;
};
var $elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var $elm$time$Time$toAdjustedMinutes = F2(
	function (_v0, time) {
		var defaultOffset = _v0.a;
		var eras = _v0.b;
		return A3(
			$elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var $elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			24,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var $ryannhg$date_format$DateFormat$amPm = F3(
	function (language, zone, posix) {
		return language.toAmPm(
			A2($elm$time$Time$toHour, zone, posix));
	});
var $elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2($elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var $elm$time$Time$toDay = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var $ryannhg$date_format$DateFormat$dayOfMonth = $elm$time$Time$toDay;
var $elm$time$Time$Sun = {$: 'Sun'};
var $elm$time$Time$Fri = {$: 'Fri'};
var $elm$time$Time$Mon = {$: 'Mon'};
var $elm$time$Time$Sat = {$: 'Sat'};
var $elm$time$Time$Thu = {$: 'Thu'};
var $elm$time$Time$Tue = {$: 'Tue'};
var $elm$time$Time$Wed = {$: 'Wed'};
var $ryannhg$date_format$DateFormat$days = _List_fromArray(
	[$elm$time$Time$Sun, $elm$time$Time$Mon, $elm$time$Time$Tue, $elm$time$Time$Wed, $elm$time$Time$Thu, $elm$time$Time$Fri, $elm$time$Time$Sat]);
var $elm$time$Time$toWeekday = F2(
	function (zone, time) {
		var _v0 = A2(
			$elm$core$Basics$modBy,
			7,
			A2(
				$elm$time$Time$flooredDiv,
				A2($elm$time$Time$toAdjustedMinutes, zone, time),
				60 * 24));
		switch (_v0) {
			case 0:
				return $elm$time$Time$Thu;
			case 1:
				return $elm$time$Time$Fri;
			case 2:
				return $elm$time$Time$Sat;
			case 3:
				return $elm$time$Time$Sun;
			case 4:
				return $elm$time$Time$Mon;
			case 5:
				return $elm$time$Time$Tue;
			default:
				return $elm$time$Time$Wed;
		}
	});
var $ryannhg$date_format$DateFormat$dayOfWeek = F2(
	function (zone, posix) {
		return function (_v1) {
			var i = _v1.a;
			return i;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				_Utils_Tuple2(0, $elm$time$Time$Sun),
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (_v0) {
							var day = _v0.b;
							return _Utils_eq(
								day,
								A2($elm$time$Time$toWeekday, zone, posix));
						},
						A2(
							$elm$core$List$indexedMap,
							F2(
								function (i, day) {
									return _Utils_Tuple2(i, day);
								}),
							$ryannhg$date_format$DateFormat$days)))));
	});
var $ryannhg$date_format$DateFormat$isLeapYear = function (year_) {
	return (!(!A2($elm$core$Basics$modBy, 4, year_))) ? false : ((!(!A2($elm$core$Basics$modBy, 100, year_))) ? true : ((!(!A2($elm$core$Basics$modBy, 400, year_))) ? false : true));
};
var $ryannhg$date_format$DateFormat$daysInMonth = F2(
	function (year_, month) {
		switch (month.$) {
			case 'Jan':
				return 31;
			case 'Feb':
				return $ryannhg$date_format$DateFormat$isLeapYear(year_) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var $elm$time$Time$Jan = {$: 'Jan'};
var $elm$time$Time$Apr = {$: 'Apr'};
var $elm$time$Time$Aug = {$: 'Aug'};
var $elm$time$Time$Dec = {$: 'Dec'};
var $elm$time$Time$Feb = {$: 'Feb'};
var $elm$time$Time$Jul = {$: 'Jul'};
var $elm$time$Time$Jun = {$: 'Jun'};
var $elm$time$Time$Mar = {$: 'Mar'};
var $elm$time$Time$May = {$: 'May'};
var $elm$time$Time$Nov = {$: 'Nov'};
var $elm$time$Time$Oct = {$: 'Oct'};
var $elm$time$Time$Sep = {$: 'Sep'};
var $ryannhg$date_format$DateFormat$months = _List_fromArray(
	[$elm$time$Time$Jan, $elm$time$Time$Feb, $elm$time$Time$Mar, $elm$time$Time$Apr, $elm$time$Time$May, $elm$time$Time$Jun, $elm$time$Time$Jul, $elm$time$Time$Aug, $elm$time$Time$Sep, $elm$time$Time$Oct, $elm$time$Time$Nov, $elm$time$Time$Dec]);
var $elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _v0 = $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_v0) {
			case 1:
				return $elm$time$Time$Jan;
			case 2:
				return $elm$time$Time$Feb;
			case 3:
				return $elm$time$Time$Mar;
			case 4:
				return $elm$time$Time$Apr;
			case 5:
				return $elm$time$Time$May;
			case 6:
				return $elm$time$Time$Jun;
			case 7:
				return $elm$time$Time$Jul;
			case 8:
				return $elm$time$Time$Aug;
			case 9:
				return $elm$time$Time$Sep;
			case 10:
				return $elm$time$Time$Oct;
			case 11:
				return $elm$time$Time$Nov;
			default:
				return $elm$time$Time$Dec;
		}
	});
var $ryannhg$date_format$DateFormat$monthPair = F2(
	function (zone, posix) {
		return A2(
			$elm$core$Maybe$withDefault,
			_Utils_Tuple2(0, $elm$time$Time$Jan),
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var m = _v0.b;
						return _Utils_eq(
							m,
							A2($elm$time$Time$toMonth, zone, posix));
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (a, b) {
								return _Utils_Tuple2(a, b);
							}),
						$ryannhg$date_format$DateFormat$months))));
	});
var $ryannhg$date_format$DateFormat$monthNumber_ = F2(
	function (zone, posix) {
		return 1 + function (_v0) {
			var i = _v0.a;
			var m = _v0.b;
			return i;
		}(
			A2($ryannhg$date_format$DateFormat$monthPair, zone, posix));
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $elm$time$Time$toYear = F2(
	function (zone, time) {
		return $elm$time$Time$toCivil(
			A2($elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var $ryannhg$date_format$DateFormat$dayOfYear = F2(
	function (zone, posix) {
		var monthsBeforeThisOne = A2(
			$elm$core$List$take,
			A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) - 1,
			$ryannhg$date_format$DateFormat$months);
		var daysBeforeThisMonth = $elm$core$List$sum(
			A2(
				$elm$core$List$map,
				$ryannhg$date_format$DateFormat$daysInMonth(
					A2($elm$time$Time$toYear, zone, posix)),
				monthsBeforeThisOne));
		return daysBeforeThisMonth + A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix);
	});
var $ryannhg$date_format$DateFormat$quarter = F2(
	function (zone, posix) {
		return (A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix) / 4) | 0;
	});
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $ryannhg$date_format$DateFormat$toFixedLength = F2(
	function (totalChars, num) {
		var numStr = $elm$core$String$fromInt(num);
		var numZerosNeeded = totalChars - $elm$core$String$length(numStr);
		var zeros = A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (_v0) {
					return '0';
				},
				A2($elm$core$List$range, 1, numZerosNeeded)));
		return _Utils_ap(zeros, numStr);
	});
var $elm$time$Time$toMillis = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			1000,
			$elm$time$Time$posixToMillis(time));
	});
var $elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2($elm$time$Time$toAdjustedMinutes, zone, time));
	});
var $ryannhg$date_format$DateFormat$toNonMilitary = function (num) {
	return (!num) ? 12 : ((num <= 12) ? num : (num - 12));
};
var $elm$time$Time$toSecond = F2(
	function (_v0, time) {
		return A2(
			$elm$core$Basics$modBy,
			60,
			A2(
				$elm$time$Time$flooredDiv,
				$elm$time$Time$posixToMillis(time),
				1000));
	});
var $elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var $elm$time$Time$millisToPosix = $elm$time$Time$Posix;
var $ryannhg$date_format$DateFormat$millisecondsPerYear = $elm$core$Basics$round((((1000 * 60) * 60) * 24) * 365.25);
var $ryannhg$date_format$DateFormat$firstDayOfYear = F2(
	function (zone, time) {
		return $elm$time$Time$millisToPosix(
			$ryannhg$date_format$DateFormat$millisecondsPerYear * A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$weekOfYear = F2(
	function (zone, posix) {
		var firstDay = A2($ryannhg$date_format$DateFormat$firstDayOfYear, zone, posix);
		var firstDayOffset = A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, firstDay);
		var daysSoFar = A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix);
		return (((daysSoFar + firstDayOffset) / 7) | 0) + 1;
	});
var $ryannhg$date_format$DateFormat$year = F2(
	function (zone, time) {
		return $elm$core$String$fromInt(
			A2($elm$time$Time$toYear, zone, time));
	});
var $ryannhg$date_format$DateFormat$piece = F4(
	function (language, zone, posix, token) {
		switch (token.$) {
			case 'MonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$monthNumber_, zone, posix));
			case 'MonthNameAbbreviated':
				return language.toMonthAbbreviation(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'MonthNameFull':
				return language.toMonthName(
					A2($elm$time$Time$toMonth, zone, posix));
			case 'QuarterNumber':
				return $elm$core$String$fromInt(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'QuarterSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					1 + A2($ryannhg$date_format$DateFormat$quarter, zone, posix));
			case 'DayOfMonthNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfMonthFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$dayOfMonth, zone, posix));
			case 'DayOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($ryannhg$date_format$DateFormat$dayOfYear, zone, posix));
			case 'DayOfWeekNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$dayOfWeek, zone, posix));
			case 'DayOfWeekNameAbbreviated':
				return language.toWeekdayAbbreviation(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'DayOfWeekNameFull':
				return language.toWeekdayName(
					A2($elm$time$Time$toWeekday, zone, posix));
			case 'WeekOfYearNumber':
				return $elm$core$String$fromInt(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearSuffix':
				return function (num) {
					return _Utils_ap(
						$elm$core$String$fromInt(num),
						language.toOrdinalSuffix(num));
				}(
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'WeekOfYearFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($ryannhg$date_format$DateFormat$weekOfYear, zone, posix));
			case 'YearNumberLastTwo':
				return A2(
					$elm$core$String$right,
					2,
					A2($ryannhg$date_format$DateFormat$year, zone, posix));
			case 'YearNumber':
				return A2($ryannhg$date_format$DateFormat$year, zone, posix);
			case 'AmPmUppercase':
				return $elm$core$String$toUpper(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'AmPmLowercase':
				return $elm$core$String$toLower(
					A3($ryannhg$date_format$DateFormat$amPm, language, zone, posix));
			case 'HourMilitaryNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toHour, zone, posix));
			case 'HourNumber':
				return $elm$core$String$fromInt(
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					$ryannhg$date_format$DateFormat$toNonMilitary(
						A2($elm$time$Time$toHour, zone, posix)));
			case 'HourMilitaryFromOneNumber':
				return $elm$core$String$fromInt(
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'HourMilitaryFromOneFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					1 + A2($elm$time$Time$toHour, zone, posix));
			case 'MinuteNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMinute, zone, posix));
			case 'MinuteFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toMinute, zone, posix));
			case 'SecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toSecond, zone, posix));
			case 'SecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					2,
					A2($elm$time$Time$toSecond, zone, posix));
			case 'MillisecondNumber':
				return $elm$core$String$fromInt(
					A2($elm$time$Time$toMillis, zone, posix));
			case 'MillisecondFixed':
				return A2(
					$ryannhg$date_format$DateFormat$toFixedLength,
					3,
					A2($elm$time$Time$toMillis, zone, posix));
			default:
				var string = token.a;
				return string;
		}
	});
var $ryannhg$date_format$DateFormat$formatWithLanguage = F4(
	function (language, tokens, zone, time) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A3($ryannhg$date_format$DateFormat$piece, language, zone, time),
				tokens));
	});
var $ryannhg$date_format$DateFormat$format = $ryannhg$date_format$DateFormat$formatWithLanguage($ryannhg$date_format$DateFormat$Language$english);
var $ryannhg$date_format$DateFormat$MonthNameFull = {$: 'MonthNameFull'};
var $ryannhg$date_format$DateFormat$monthNameFull = $ryannhg$date_format$DateFormat$MonthNameFull;
var $ryannhg$date_format$DateFormat$Text = function (a) {
	return {$: 'Text', a: a};
};
var $ryannhg$date_format$DateFormat$text = $ryannhg$date_format$DateFormat$Text;
var $ryannhg$date_format$DateFormat$YearNumber = {$: 'YearNumber'};
var $ryannhg$date_format$DateFormat$yearNumber = $ryannhg$date_format$DateFormat$YearNumber;
var $author$project$DateTime$ourFormatter = $ryannhg$date_format$DateFormat$format(
	_List_fromArray(
		[
			$ryannhg$date_format$DateFormat$monthNameFull,
			$ryannhg$date_format$DateFormat$text(' '),
			$ryannhg$date_format$DateFormat$dayOfMonthSuffix,
			$ryannhg$date_format$DateFormat$text(', '),
			$ryannhg$date_format$DateFormat$yearNumber
		]));
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var $elm$time$Time$utc = A2($elm$time$Time$Zone, 0, _List_Nil);
var $author$project$DateTime$ourTimezone = $elm$time$Time$utc;
var $author$project$DateTime$formatPosixDate = function (posix) {
	return A2($author$project$DateTime$ourFormatter, $author$project$DateTime$ourTimezone, posix);
};
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$core$String$toFloat = _String_toFloat;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs = A2(
	$elm$parser$Parser$andThen,
	function (str) {
		if ($elm$core$String$length(str) <= 9) {
			var _v0 = $elm$core$String$toFloat('0.' + str);
			if (_v0.$ === 'Just') {
				var floatVal = _v0.a;
				return $elm$parser$Parser$succeed(
					$elm$core$Basics$round(floatVal * 1000));
			} else {
				return $elm$parser$Parser$problem('Invalid float: \"' + (str + '\"'));
			}
		} else {
			return $elm$parser$Parser$problem(
				'Expected at most 9 digits, but got ' + $elm$core$String$fromInt(
					$elm$core$String$length(str)));
		}
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$chompWhile($elm$core$Char$isDigit)));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts = F6(
	function (monthYearDayMs, hour, minute, second, ms, utcOffsetMinutes) {
		return $elm$time$Time$millisToPosix((((monthYearDayMs + (((hour * 60) * 60) * 1000)) + (((minute - utcOffsetMinutes) * 60) * 1000)) + (second * 1000)) + ms);
	});
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $elm$parser$Parser$Done = function (a) {
	return {$: 'Done', a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var $elm$core$String$append = _String_append;
var $elm$parser$Parser$UnexpectedChar = {$: 'UnexpectedChar'};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (step.$ === 'Loop') {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt = function (quantity) {
	var helper = function (str) {
		if (_Utils_eq(
			$elm$core$String$length(str),
			quantity)) {
			var _v0 = $elm$core$String$toInt(str);
			if (_v0.$ === 'Just') {
				var intVal = _v0.a;
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$Done,
					$elm$parser$Parser$succeed(intVal));
			} else {
				return $elm$parser$Parser$problem('Invalid integer: \"' + (str + '\"'));
			}
		} else {
			return A2(
				$elm$parser$Parser$map,
				function (nextChar) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$String$append, str, nextChar));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf($elm$core$Char$isDigit)));
		}
	};
	return A2($elm$parser$Parser$loop, '', helper);
};
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear = 1970;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay = function (day) {
	return $elm$parser$Parser$problem(
		'Invalid day: ' + $elm$core$String$fromInt(day));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear = function (year) {
	return (!A2($elm$core$Basics$modBy, 4, year)) && ((!(!A2($elm$core$Basics$modBy, 100, year))) || (!A2($elm$core$Basics$modBy, 400, year)));
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore = function (y1) {
	var y = y1 - 1;
	return (((y / 4) | 0) - ((y / 100) | 0)) + ((y / 400) | 0);
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay = 86400000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear = 31536000000;
var $rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay = function (_v0) {
	var year = _v0.a;
	var month = _v0.b;
	var dayInMonth = _v0.c;
	if (dayInMonth < 0) {
		return $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth);
	} else {
		var succeedWith = function (extraMs) {
			var yearMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerYear * (year - $rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear);
			var days = ((month < 3) || (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year))) ? (dayInMonth - 1) : dayInMonth;
			var dayMs = $rtfeldman$elm_iso8601_date_strings$Iso8601$msPerDay * (days + ($rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore(year) - $rtfeldman$elm_iso8601_date_strings$Iso8601$leapYearsBefore($rtfeldman$elm_iso8601_date_strings$Iso8601$epochYear)));
			return $elm$parser$Parser$succeed((extraMs + yearMs) + dayMs);
		};
		switch (month) {
			case 1:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(0);
			case 2:
				return ((dayInMonth > 29) || ((dayInMonth === 29) && (!$rtfeldman$elm_iso8601_date_strings$Iso8601$isLeapYear(year)))) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(2678400000);
			case 3:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(5097600000);
			case 4:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(7776000000);
			case 5:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(10368000000);
			case 6:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(13046400000);
			case 7:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(15638400000);
			case 8:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(18316800000);
			case 9:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(20995200000);
			case 10:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(23587200000);
			case 11:
				return (dayInMonth > 30) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(26265600000);
			case 12:
				return (dayInMonth > 31) ? $rtfeldman$elm_iso8601_date_strings$Iso8601$invalidDay(dayInMonth) : succeedWith(28857600000);
			default:
				return $elm$parser$Parser$problem(
					'Invalid month: \"' + ($elm$core$String$fromInt(month) + '\"'));
		}
	}
};
var $rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs = A2(
	$elm$parser$Parser$andThen,
	$rtfeldman$elm_iso8601_date_strings$Iso8601$yearMonthDay,
	A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed(
					F3(
						function (year, month, day) {
							return _Utils_Tuple3(year, month, day);
						})),
				$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(4)),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed($elm$core$Basics$identity),
							$elm$parser$Parser$symbol('-')),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
					]))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$symbol('-')),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
				]))));
var $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes = function () {
	var utcOffsetMinutesFromParts = F3(
		function (multiplier, hours, minutes) {
			return (multiplier * (hours * 60)) + minutes;
		});
	return A2(
		$elm$parser$Parser$keeper,
		$elm$parser$Parser$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return 0;
					},
					$elm$parser$Parser$symbol('Z')),
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(utcOffsetMinutesFromParts),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$map,
										function (_v1) {
											return 1;
										},
										$elm$parser$Parser$symbol('+')),
										A2(
										$elm$parser$Parser$map,
										function (_v2) {
											return -1;
										},
										$elm$parser$Parser$symbol('-'))
									]))),
						$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$ignorer,
									$elm$parser$Parser$succeed($elm$core$Basics$identity),
									$elm$parser$Parser$symbol(':')),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
								$elm$parser$Parser$succeed(0)
							]))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$end)
				])));
}();
var $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601 = A2(
	$elm$parser$Parser$andThen,
	function (datePart) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$keeper,
							A2(
								$elm$parser$Parser$keeper,
								A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts(datePart)),
										$elm$parser$Parser$symbol('T')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
								$elm$parser$Parser$oneOf(
									_List_fromArray(
										[
											A2(
											$elm$parser$Parser$keeper,
											A2(
												$elm$parser$Parser$ignorer,
												$elm$parser$Parser$succeed($elm$core$Basics$identity),
												$elm$parser$Parser$symbol(':')),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
											$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)
										]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$keeper,
										A2(
											$elm$parser$Parser$ignorer,
											$elm$parser$Parser$succeed($elm$core$Basics$identity),
											$elm$parser$Parser$symbol(':')),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2)),
										$rtfeldman$elm_iso8601_date_strings$Iso8601$paddedInt(2),
										$elm$parser$Parser$succeed(0)
									]))),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$elm$parser$Parser$keeper,
									A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed($elm$core$Basics$identity),
										$elm$parser$Parser$symbol('.')),
									$rtfeldman$elm_iso8601_date_strings$Iso8601$fractionsOfASecondInMs),
									$elm$parser$Parser$succeed(0)
								]))),
					A2($elm$parser$Parser$ignorer, $rtfeldman$elm_iso8601_date_strings$Iso8601$utcOffsetInMinutes, $elm$parser$Parser$end)),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						A6($rtfeldman$elm_iso8601_date_strings$Iso8601$fromParts, datePart, 0, 0, 0, 0, 0)),
					$elm$parser$Parser$end)
				]));
	},
	$rtfeldman$elm_iso8601_date_strings$Iso8601$monthYearDayInMs);
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {col: col, problem: problem, row: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.row, p.col, p.problem);
};
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (_v0.$ === 'Ok') {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime = function (str) {
	return A2($elm$parser$Parser$run, $rtfeldman$elm_iso8601_date_strings$Iso8601$iso8601, str);
};
var $author$project$Page$Blog$Name_$viewBlogPostDate = function (date) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$alignRight,
				$mdgriffith$elm_ui$Element$Font$size(12)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function () {
					var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date);
					if (_v0.$ === 'Ok') {
						var formattedDate = _v0.a;
						return $author$project$DateTime$formatPosixDate(formattedDate);
					} else {
						return 'bad date';
					}
				}())
			]));
};
var $elm_community$string_extra$String$Extra$regexFromString = A2(
	$elm$core$Basics$composeR,
	$elm$regex$Regex$fromString,
	$elm$core$Maybe$withDefault($elm$regex$Regex$never));
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $elm_community$string_extra$String$Extra$humanize = function (string) {
	return $elm_community$string_extra$String$Extra$toSentenceCase(
		$elm$core$String$toLower(
			$elm$core$String$trim(
				A3(
					$elm$regex$Regex$replace,
					$elm_community$string_extra$String$Extra$regexFromString('_id$|[-_\\s]+'),
					$elm$core$Basics$always(' '),
					A3(
						$elm$regex$Regex$replace,
						$elm_community$string_extra$String$Extra$regexFromString('[A-Z]+'),
						A2(
							$elm$core$Basics$composeR,
							function ($) {
								return $.match;
							},
							$elm$core$String$append('-')),
						string)))));
};
var $elm_community$string_extra$String$Extra$toTitleCase = function (ws) {
	var uppercaseMatch = A2(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('\\w+'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.match;
			},
			$elm_community$string_extra$String$Extra$toSentenceCase));
	return A3(
		$elm$regex$Regex$replace,
		$elm_community$string_extra$String$Extra$regexFromString('^([a-z])|\\s+([a-z])'),
		A2(
			$elm$core$Basics$composeR,
			function ($) {
				return $.match;
			},
			uppercaseMatch),
		ws);
};
var $author$project$Page$Blog$Name_$slugToTitle = function (slug) {
	return $elm_community$string_extra$String$Extra$toTitleCase(
		$elm_community$string_extra$String$Extra$humanize(slug));
};
var $author$project$Page$Blog$Name_$viewBlogPostTag = function (tag) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(12)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Blog$Name_$slugToTitle(tag))
					])),
			url: '/tag/' + tag
		});
};
var $author$project$Page$Blog$Name_$viewBlogPostTags = function (tags) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		A2($elm$core$List$map, $author$project$Page$Blog$Name_$viewBlogPostTag, tags));
};
var $author$project$Components$pageHeading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.pageTitleColor),
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.pageHeading),
				$mdgriffith$elm_ui$Element$Font$light,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 10})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Page$Blog$Name_$viewBlogPostTitle = F2(
	function (title, slug) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
						]))
				]),
			{
				label: $author$project$Components$pageHeading(title),
				url: '/blog/' + slug
			});
	});
var $author$project$Page$Blog$Name_$viewBlogPostHeader = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2($author$project$Page$Blog$Name_$viewBlogPostTitle, post.title, post.slug),
						$author$project$Page$Blog$Name_$viewBlogPostDate(post.createdAt)
					])),
				$author$project$Page$Blog$Name_$viewBlogPostTags(post.tags)
			]));
};
var $author$project$Page$Blog$Name_$viewBlogPost = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$Font$size(16)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_List_fromArray(
					[
						$author$project$Page$Blog$Name_$viewBlogPostHeader(post),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(40)
									]),
								function () {
									var _v0 = $author$project$MarkdownRendering$markdownView(post.content);
									if (_v0.$ === 'Ok') {
										var rendered = _v0.a;
										return A2(
											$elm$core$List$map,
											function (p) {
												return A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$spacing(20)
														]),
													p);
											},
											_List_fromArray(
												[rendered]));
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('failed to render markdown')
											]);
									}
								}())
							]))
					]))
			]));
};
var $author$project$Page$Blog$Name_$viewBlogPosts = function (posts) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		A2($elm$core$List$map, $author$project$Page$Blog$Name_$viewBlogPost, posts));
};
var $author$project$Page$Blog$Name_$viewContent = F2(
	function (content, routeParams) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(768))
				]),
			_List_fromArray(
				[
					$author$project$Page$Blog$Name_$viewBlogPosts(content)
				]));
	});
var $author$project$Common$viewFooter = A2(
	$mdgriffith$elm_ui$Element$paragraph,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$padding(10),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY
		]),
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$text('Made with love and Elm Pages')
		]));
var $author$project$Page$Blog$Name_$viewPage = F2(
	function (content, routeParams) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2($author$project$Page$Blog$Name_$viewContent, content, routeParams),
					$author$project$Common$viewFooter
				]));
	});
var $mdgriffith$elm_ui$Element$Font$justify = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontAlignment, $mdgriffith$elm_ui$Internal$Style$classes.textJustify);
var $author$project$Page$Blog$Name_$viewPhoneBlogPostDate = function (date) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(10),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function () {
					var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date);
					if (_v0.$ === 'Ok') {
						var formattedDate = _v0.a;
						return $author$project$DateTime$formatPosixDate(formattedDate);
					} else {
						return 'bad date';
					}
				}())
			]));
};
var $author$project$Page$Blog$Name_$viewPhoneBlogPostTag = function (tag) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(10)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Blog$Name_$slugToTitle(tag))
					])),
			url: '/tag/' + tag
		});
};
var $author$project$Page$Blog$Name_$viewPhoneBlogPostTags = function (tags) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		A2($elm$core$List$map, $author$project$Page$Blog$Name_$viewPhoneBlogPostTag, tags));
};
var $author$project$Components$phonePageHeading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.heading),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 5})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Page$Blog$Name_$viewPhoneBlogPostTitle = F2(
	function (title, slug) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkColor),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
						])),
					$mdgriffith$elm_ui$Element$Font$center
				]),
			{
				label: $author$project$Components$phonePageHeading(title),
				url: '/blog/' + slug
			});
	});
var $author$project$Page$Blog$Name_$viewPhoneBlogPostHeader = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				A2($author$project$Page$Blog$Name_$viewPhoneBlogPostTitle, post.title, post.slug),
				$author$project$Page$Blog$Name_$viewPhoneBlogPostDate(post.createdAt),
				$author$project$Page$Blog$Name_$viewPhoneBlogPostTags(post.tags)
			]));
};
var $author$project$Page$Blog$Name_$viewPhoneBlogPost = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$Font$size(16)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_List_fromArray(
					[
						$author$project$Page$Blog$Name_$viewPhoneBlogPostHeader(post),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(40)
									]),
								function () {
									var _v0 = $author$project$MarkdownRendering$markdownView(post.content);
									if (_v0.$ === 'Ok') {
										var rendered = _v0.a;
										return A2(
											$elm$core$List$map,
											function (p) {
												return A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_Utils_ap(
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$justify,
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
																$mdgriffith$elm_ui$Element$Font$light
															]),
														$author$project$Styles$defaultParagraphStyles),
													_List_fromArray(
														[p]));
											},
											rendered);
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('failed to render markdown')
											]);
									}
								}())
							]))
					]))
			]));
};
var $author$project$Page$Blog$Name_$viewPhoneBlogPosts = function (posts) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		A2($elm$core$List$map, $author$project$Page$Blog$Name_$viewPhoneBlogPost, posts));
};
var $author$project$Page$Blog$Name_$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY
			]),
		_List_fromArray(
			[
				$author$project$Page$Blog$Name_$viewPhoneBlogPosts(content)
			]));
};
var $author$project$Page$Blog$Name_$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Blog$Name_$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Blog$Name_$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return A2($author$project$Page$Blog$Name_$viewPage, _static.data, _static.routeParams);
						case 'Phone':
							return $author$project$Page$Blog$Name_$viewPhonePage(_static.data);
						default:
							return A2($author$project$Page$Blog$Name_$viewPage, _static.data, _static.routeParams);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Blog$Name_$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Blog$Name_$view},
	$author$project$Page$prerender(
		{data: $author$project$Page$Blog$Name_$data, head: $author$project$Page$Blog$Name_$head, routes: $author$project$Page$Blog$Name_$routes}));
var $dillonkearns$elm_pages$DataSource$File$body = A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'withoutFrontmatter', $dillonkearns$elm_pages$OptimizedDecoder$string);
var $dillonkearns$elm_pages$DataSource$File$read = function (filePath) {
	return $dillonkearns$elm_pages$DataSource$Http$get(
		$dillonkearns$elm_pages$Secrets$succeed('file://' + filePath));
};
var $dillonkearns$elm_pages$DataSource$File$bodyWithoutFrontmatter = function (filePath) {
	return A2($dillonkearns$elm_pages$DataSource$File$read, filePath, $dillonkearns$elm_pages$DataSource$File$body);
};
var $dillonkearns$elm_pages$DataSource$map4 = F5(
	function (combineFn, request1, request2, request3, request4) {
		return A3(
			$dillonkearns$elm_pages$DataSource$map2,
			$elm$core$Basics$apR,
			request4,
			A3(
				$dillonkearns$elm_pages$DataSource$map2,
				$elm$core$Basics$apR,
				request3,
				A3(
					$dillonkearns$elm_pages$DataSource$map2,
					$elm$core$Basics$apR,
					request2,
					A3(
						$dillonkearns$elm_pages$DataSource$map2,
						$elm$core$Basics$apR,
						request1,
						$dillonkearns$elm_pages$DataSource$succeed(combineFn)))));
	});
var $author$project$Projects$getProjectSkills = F2(
	function (skillIds, skills) {
		return A2(
			$elm$core$List$filter,
			function (skill) {
				return A2(
					$elm$core$List$any,
					function (skillId) {
						return _Utils_eq(skillId, skill.id);
					},
					skillIds);
			},
			skills);
	});
var $author$project$Projects$getSpecificScreenshotUrl = F2(
	function (id, screenshots) {
		var screenshot = A2(
			$elm$core$Maybe$withDefault,
			{id: 'None', url: 'none'},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (s) {
						return _Utils_eq(s.id, id);
					},
					screenshots)));
		return screenshot.url;
	});
var $author$project$Projects$getSpecificTestimonial = F2(
	function (testimonialId, testimonials) {
		return $elm$core$List$head(
			A2(
				$elm$core$List$filter,
				function (testimonial) {
					return _Utils_eq(
						testimonial.id,
						A2($elm$core$Maybe$withDefault, '', testimonialId));
				},
				testimonials));
	});
var $author$project$Projects$alignProjects = F4(
	function (projectReferences, testimonials, skills, screenshots) {
		return A2(
			$elm$core$List$map,
			function (projectReference) {
				return {
					about: projectReference.about,
					description: projectReference.description,
					gitHubUrl: projectReference.gitHubUrl,
					screenshotUrl: A2($author$project$Projects$getSpecificScreenshotUrl, projectReference.screenshotId, screenshots),
					skills: A2($author$project$Projects$getProjectSkills, projectReference.skillIds, skills),
					slug: projectReference.slug,
					testimonial: A2($author$project$Projects$getSpecificTestimonial, projectReference.testimonialId, testimonials),
					title: projectReference.title,
					websiteUrl: projectReference.websiteUrl
				};
			},
			projectReferences);
	});
var $author$project$Projects$ProjectReference = F9(
	function (title, slug, screenshotId, gitHubUrl, websiteUrl, description, about, testimonialId, skillIds) {
		return {about: about, description: description, gitHubUrl: gitHubUrl, screenshotId: screenshotId, skillIds: skillIds, slug: slug, testimonialId: testimonialId, title: title, websiteUrl: websiteUrl};
	});
var $author$project$Projects$decodeLink = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$field,
	'sys',
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string));
var $zwilias$json_decode_exploration$Json$Decode$Exploration$BadOneOf = function (a) {
	return {$: 'BadOneOf', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOfHelp = F3(
	function (decoders, val, errorAcc) {
		oneOfHelp:
		while (true) {
			if (!decoders.b) {
				return A2(
					$elm$core$Tuple$pair,
					val,
					$elm$core$Result$Err(
						$mgold$elm_nonempty_list$List$Nonempty$fromElement(
							$zwilias$json_decode_exploration$Json$Decode$Exploration$Located$Here(
								$zwilias$json_decode_exploration$Json$Decode$Exploration$BadOneOf(
									$elm$core$List$reverse(errorAcc))))));
			} else {
				var decoderFn = decoders.a.a;
				var rest = decoders.b;
				var _v1 = decoderFn(val);
				if (_v1.b.$ === 'Ok') {
					var annVal = _v1.a;
					var res = _v1.b.a;
					return _Utils_Tuple2(
						annVal,
						$elm$core$Result$Ok(res));
				} else {
					var annVal = _v1.a;
					var e = _v1.b.a;
					var $temp$decoders = rest,
						$temp$val = annVal,
						$temp$errorAcc = A2($elm$core$List$cons, e, errorAcc);
					decoders = $temp$decoders;
					val = $temp$val;
					errorAcc = $temp$errorAcc;
					continue oneOfHelp;
				}
			}
		}
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf = function (decoders) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			return A3($zwilias$json_decode_exploration$Json$Decode$Exploration$oneOfHelp, decoders, json, _List_Nil);
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$succeed = function (val) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
		function (json) {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$ok, json, val);
		});
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$maybe = function (decoder) {
	return $zwilias$json_decode_exploration$Json$Decode$Exploration$oneOf(
		_List_fromArray(
			[
				A2($zwilias$json_decode_exploration$Json$Decode$Exploration$map, $elm$core$Maybe$Just, decoder),
				$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed($elm$core$Maybe$Nothing)
			]));
};
var $dillonkearns$elm_pages$OptimizedDecoder$maybe = function (_v0) {
	var jd = _v0.a;
	var jde = _v0.b;
	return A2(
		$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
		$elm$json$Json$Decode$maybe(jd),
		$zwilias$json_decode_exploration$Json$Decode$Exploration$maybe(jde));
};
var $dillonkearns$elm_pages$OptimizedDecoder$succeed = function (a) {
	return A2(
		$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
		$elm$json$Json$Decode$succeed(a),
		$zwilias$json_decode_exploration$Json$Decode$Exploration$succeed(a));
};
var $author$project$Projects$decodeProjectReference = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$andMap,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'skills',
			$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Projects$decodeLink))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$andMap,
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'fields',
			$dillonkearns$elm_pages$OptimizedDecoder$maybe(
				A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'testimonial', $author$project$Projects$decodeLink))),
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$field,
				'fields',
				A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'about', $dillonkearns$elm_pages$OptimizedDecoder$string)),
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$field,
					'fields',
					A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'description', $dillonkearns$elm_pages$OptimizedDecoder$string)),
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$andMap,
					A2(
						$dillonkearns$elm_pages$OptimizedDecoder$field,
						'fields',
						A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'websiteUrl', $dillonkearns$elm_pages$OptimizedDecoder$string)),
					A2(
						$dillonkearns$elm_pages$OptimizedDecoder$andMap,
						A2(
							$dillonkearns$elm_pages$OptimizedDecoder$field,
							'fields',
							A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'gitHubLink', $dillonkearns$elm_pages$OptimizedDecoder$string)),
						A2(
							$dillonkearns$elm_pages$OptimizedDecoder$andMap,
							A2(
								$dillonkearns$elm_pages$OptimizedDecoder$field,
								'fields',
								A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'screenshot', $author$project$Projects$decodeLink)),
							A2(
								$dillonkearns$elm_pages$OptimizedDecoder$andMap,
								A2(
									$dillonkearns$elm_pages$OptimizedDecoder$field,
									'fields',
									A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'slug', $dillonkearns$elm_pages$OptimizedDecoder$string)),
								A2(
									$dillonkearns$elm_pages$OptimizedDecoder$andMap,
									A2(
										$dillonkearns$elm_pages$OptimizedDecoder$field,
										'fields',
										A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'title', $dillonkearns$elm_pages$OptimizedDecoder$string)),
									$dillonkearns$elm_pages$OptimizedDecoder$succeed($author$project$Projects$ProjectReference))))))))));
var $author$project$Skills$getSpecificThumbnailUrl = F2(
	function (thumbnails, id) {
		var thumb = A2(
			$elm$core$Maybe$withDefault,
			{id: 'null', url: 'empty'},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (thumbnail) {
						return _Utils_eq(thumbnail.id, id);
					},
					thumbnails)));
		return thumb.url;
	});
var $author$project$Skills$alignSkills = F2(
	function (skillList, thumbnails) {
		return A2(
			$elm$core$List$map,
			function (skill) {
				return {
					about: skill.about,
					description: skill.description,
					id: skill.id,
					name: skill.name,
					slug: skill.slug,
					thumbnail: A2($author$project$Skills$getSpecificThumbnailUrl, thumbnails, skill.thumbnail),
					website: skill.website
				};
			},
			skillList);
	});
var $author$project$Skills$SkillWithoutThumbnail = F7(
	function (id, slug, name, description, website, about, thumbnail) {
		return {about: about, description: description, id: id, name: name, slug: slug, thumbnail: thumbnail, website: website};
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map7 = F8(
	function (f, decoderA, decoderB, decoderC, decoderD, decoderE, decoderF, decoderG) {
		return A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			decoderG,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				decoderF,
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$andMap,
					decoderE,
					A2(
						$dillonkearns$elm_pages$OptimizedDecoder$andMap,
						decoderD,
						A2(
							$dillonkearns$elm_pages$OptimizedDecoder$andMap,
							decoderC,
							A2(
								$dillonkearns$elm_pages$OptimizedDecoder$andMap,
								decoderB,
								A2($dillonkearns$elm_pages$OptimizedDecoder$map, f, decoderA)))))));
	});
var $author$project$Skills$decodeSkillWithoutThumbnail = A8(
	$dillonkearns$elm_pages$OptimizedDecoder$map7,
	$author$project$Skills$SkillWithoutThumbnail,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'slug', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'name', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'description', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'website', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'about', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'thumbnail',
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$field,
				'sys',
				A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)))));
var $author$project$Skills$Thumbnail = F2(
	function (id, url) {
		return {id: id, url: url};
	});
var $author$project$Skills$decodeThumbnail = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Skills$Thumbnail,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'file',
			A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'url', $dillonkearns$elm_pages$OptimizedDecoder$string))));
var $author$project$Skills$decodeProjectSkills = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Skills$alignSkills,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'Entry',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$map,
			$elm$core$List$filterMap($elm$core$Basics$identity),
			$dillonkearns$elm_pages$OptimizedDecoder$list(
				$dillonkearns$elm_pages$OptimizedDecoder$maybe($author$project$Skills$decodeSkillWithoutThumbnail)))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'Asset',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$map,
			$elm$core$List$filterMap($elm$core$Basics$identity),
			$dillonkearns$elm_pages$OptimizedDecoder$list(
				$dillonkearns$elm_pages$OptimizedDecoder$maybe($author$project$Skills$decodeThumbnail)))));
var $author$project$Testimonials$getSpecificPhoto = F2(
	function (photos, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			{id: 'null', url: 'empty'},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (p) {
						return _Utils_eq(p.id, id);
					},
					photos)));
	});
var $author$project$Testimonials$alignPeople = F2(
	function (people, photos) {
		return A2(
			$elm$core$List$map,
			function (person) {
				return {
					id: person.id,
					name: person.name,
					organisation: person.organisation,
					photo: A2($author$project$Testimonials$getSpecificPhoto, photos, person.photoId),
					title: person.title,
					website: person.website
				};
			},
			people);
	});
var $author$project$Testimonials$getSpecificPerson = F2(
	function (personList, id) {
		return A2(
			$elm$core$Maybe$withDefault,
			{
				id: 'null',
				name: 'null',
				organisation: 'null',
				photo: {id: 'null', url: 'null'},
				title: 'null',
				website: 'null'
			},
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (p) {
						return _Utils_eq(p.id, id);
					},
					personList)));
	});
var $author$project$Testimonials$alignTestimonials = F3(
	function (testimonialList, personList, photos) {
		var people = A2($author$project$Testimonials$alignPeople, personList, photos);
		return A2(
			$elm$core$List$map,
			function (testimonial) {
				return {
					author: A2($author$project$Testimonials$getSpecificPerson, people, testimonial.personId),
					id: testimonial.id,
					slug: testimonial.slug,
					text: testimonial.text
				};
			},
			testimonialList);
	});
var $author$project$Testimonials$PersonWithoutPhoto = F6(
	function (id, name, title, website, organisation, photoId) {
		return {id: id, name: name, organisation: organisation, photoId: photoId, title: title, website: website};
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map6 = F7(
	function (f, decoderA, decoderB, decoderC, decoderD, decoderE, decoderF) {
		return A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			decoderF,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				decoderE,
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$andMap,
					decoderD,
					A2(
						$dillonkearns$elm_pages$OptimizedDecoder$andMap,
						decoderC,
						A2(
							$dillonkearns$elm_pages$OptimizedDecoder$andMap,
							decoderB,
							A2($dillonkearns$elm_pages$OptimizedDecoder$map, f, decoderA))))));
	});
var $author$project$Testimonials$decodePersonWithoutPhoto = A7(
	$dillonkearns$elm_pages$OptimizedDecoder$map6,
	$author$project$Testimonials$PersonWithoutPhoto,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'name', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'title', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'website', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'organisation', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'photo',
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$field,
				'sys',
				A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)))));
var $author$project$Datatypes$Photo = F2(
	function (id, url) {
		return {id: id, url: url};
	});
var $author$project$Testimonials$decodePhoto = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Datatypes$Photo,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'file',
			A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'url', $dillonkearns$elm_pages$OptimizedDecoder$string))));
var $author$project$Testimonials$TestimonialWithoutPerson = F4(
	function (id, slug, text, personId) {
		return {id: id, personId: personId, slug: slug, text: text};
	});
var $dillonkearns$elm_pages$OptimizedDecoder$map4 = F5(
	function (f, decoderA, decoderB, decoderC, decoderD) {
		return A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			decoderD,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				decoderC,
				A2(
					$dillonkearns$elm_pages$OptimizedDecoder$andMap,
					decoderB,
					A2($dillonkearns$elm_pages$OptimizedDecoder$map, f, decoderA))));
	});
var $author$project$Testimonials$decodeTestimonialWithoutPerson = A5(
	$dillonkearns$elm_pages$OptimizedDecoder$map4,
	$author$project$Testimonials$TestimonialWithoutPerson,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'slug', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'text', $dillonkearns$elm_pages$OptimizedDecoder$string)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'author',
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$field,
				'sys',
				A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)))));
var $dillonkearns$elm_pages$OptimizedDecoder$map3 = F4(
	function (f, decoderA, decoderB, decoderC) {
		return A2(
			$dillonkearns$elm_pages$OptimizedDecoder$andMap,
			decoderC,
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$andMap,
				decoderB,
				A2($dillonkearns$elm_pages$OptimizedDecoder$map, f, decoderA)));
	});
var $author$project$Testimonials$decodeProjectTestimonials = A4(
	$dillonkearns$elm_pages$OptimizedDecoder$map3,
	$author$project$Testimonials$alignTestimonials,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'Entry',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$map,
			$elm$core$List$filterMap($elm$core$Basics$identity),
			$dillonkearns$elm_pages$OptimizedDecoder$list(
				$dillonkearns$elm_pages$OptimizedDecoder$maybe($author$project$Testimonials$decodeTestimonialWithoutPerson)))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'Entry',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$map,
			$elm$core$List$filterMap($elm$core$Basics$identity),
			$dillonkearns$elm_pages$OptimizedDecoder$list(
				$dillonkearns$elm_pages$OptimizedDecoder$maybe($author$project$Testimonials$decodePersonWithoutPhoto)))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'Asset',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$map,
			$elm$core$List$filterMap($elm$core$Basics$identity),
			$dillonkearns$elm_pages$OptimizedDecoder$list(
				$dillonkearns$elm_pages$OptimizedDecoder$maybe($author$project$Testimonials$decodePhoto)))));
var $author$project$Projects$Screenshot = F2(
	function (id, url) {
		return {id: id, url: url};
	});
var $author$project$Projects$decodeScreenshot = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Projects$Screenshot,
	$author$project$Projects$decodeLink,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'fields',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'file',
			A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'url', $dillonkearns$elm_pages$OptimizedDecoder$string))));
var $author$project$Projects$decodeProjects = A5(
	$dillonkearns$elm_pages$OptimizedDecoder$map4,
	$author$project$Projects$alignProjects,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'items',
		$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Projects$decodeProjectReference)),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'includes', $author$project$Testimonials$decodeProjectTestimonials),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'includes', $author$project$Skills$decodeProjectSkills),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'includes',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'Asset',
			A2(
				$dillonkearns$elm_pages$OptimizedDecoder$map,
				$elm$core$List$filterMap($elm$core$Basics$identity),
				$dillonkearns$elm_pages$OptimizedDecoder$list(
					$dillonkearns$elm_pages$OptimizedDecoder$maybe($author$project$Projects$decodeScreenshot))))));
var $author$project$Projects$projects = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=pastProject&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=-sys.createdAt&include=4'),
	$author$project$Projects$decodeProjects);
var $author$project$Skills$decodeSkills = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Skills$alignSkills,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'items',
		$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Skills$decodeSkillWithoutThumbnail)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'includes',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'Asset',
			$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Skills$decodeThumbnail))));
var $author$project$Skills$skills = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=skill&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=sys.updatedAt'),
	$author$project$Skills$decodeSkills);
var $author$project$Testimonials$decodeTestimonials = A4(
	$dillonkearns$elm_pages$OptimizedDecoder$map3,
	$author$project$Testimonials$alignTestimonials,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'items',
		$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Testimonials$decodeTestimonialWithoutPerson)),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'includes',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'Entry',
			$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Testimonials$decodePersonWithoutPhoto))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'includes',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$field,
			'Asset',
			$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Testimonials$decodePhoto))));
var $author$project$Testimonials$testimonials = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=testimonial&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=sys.updatedAt'),
	$author$project$Testimonials$decodeTestimonials);
var $author$project$Page$Index$data = A5(
	$dillonkearns$elm_pages$DataSource$map4,
	F4(
		function (about, skills, testimonials, projects) {
			return {about: about, projects: projects, skills: skills, testimonials: testimonials};
		}),
	$dillonkearns$elm_pages$DataSource$File$bodyWithoutFrontmatter('data/about.md'),
	$author$project$Skills$skills,
	$author$project$Testimonials$testimonials,
	$author$project$Projects$projects);
var $author$project$Page$Index$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev'
			}));
};
var $author$project$Page$single = function (_v0) {
	var data = _v0.data;
	var head = _v0.head;
	return $author$project$Page$WithData(
		{
			data: function (_v1) {
				return data;
			},
			handleRoute: F3(
				function (_v2, _v3, _v4) {
					return $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing);
				}),
			head: head,
			kind: 'static',
			serverless: false,
			staticRoutes: $dillonkearns$elm_pages$DataSource$succeed(
				_List_fromArray(
					[
						{}
					]))
		});
};
var $mdgriffith$elm_ui$Internal$Model$Bottom = {$: 'Bottom'};
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY($mdgriffith$elm_ui$Internal$Model$Bottom);
var $author$project$Common$viewBannerContent = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$alignBottom,
			$mdgriffith$elm_ui$Element$spacing(30)
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Font$extraLight,
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.bannerText),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(15),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorDarkerTransparent),
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Crafting Better Software for Creators and Innovators')
						]))
				]))
		]));
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var src = _v0.src;
		var description = _v0.description;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 'Width':
						return true;
					case 'Height':
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.imageContainer),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $author$project$Common$viewBannerImage = A2(
	$mdgriffith$elm_ui$Element$image,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY
		]),
	{description: 'banner', src: 'assets/images/banner-alternate.jpg'});
var $author$project$Common$viewBanner = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$inFront($author$project$Common$viewBannerContent)
		]),
	_List_fromArray(
		[$author$project$Common$viewBannerImage]));
var $author$project$Components$heading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.heading),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 30})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $mdgriffith$elm_ui$Element$Border$roundEach = function (_v0) {
	var topLeft = _v0.topLeft;
	var topRight = _v0.topRight;
	var bottomLeft = _v0.bottomLeft;
	var bottomRight = _v0.bottomRight;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + ($elm$core$String$fromInt(topLeft) + ('-' + ($elm$core$String$fromInt(topRight) + ($elm$core$String$fromInt(bottomLeft) + ('-' + $elm$core$String$fromInt(bottomRight)))))),
			'border-radius',
			$elm$core$String$fromInt(topLeft) + ('px ' + ($elm$core$String$fromInt(topRight) + ('px ' + ($elm$core$String$fromInt(bottomRight) + ('px ' + ($elm$core$String$fromInt(bottomLeft) + 'px'))))))));
};
var $author$project$Components$copy = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$justify,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.copy),
					$mdgriffith$elm_ui$Element$Font$light
				]),
			$author$project$Styles$defaultParagraphStyles),
		_List_fromArray(
			[text]));
};
var $author$project$Page$Index$viewIntro = function (content) {
	var _v0 = $author$project$MarkdownRendering$markdownView(content);
	if (_v0.$ === 'Ok') {
		var rendered = _v0.a;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 5, left: 20, right: 20, top: 20})
				]),
			A2(
				$elm$core$List$map,
				function (p) {
					return $author$project$Components$copy(p);
				},
				rendered));
	} else {
		return $mdgriffith$elm_ui$Element$text('This should be pulling text from the file \"data/about.md\", but it\'s not working.');
	}
};
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $author$project$Common$viewProjectDetails = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$alignBottom,
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Font$light,
						$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.projectDescription),
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$Border$roundEach(
								{bottomLeft: 10, bottomRight: 10, topLeft: 0, topRight: 0}),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorDarkerTransparent),
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColorTransparent)
									])),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$center,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(project.description)
							]))
					]))
			]));
};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.clip);
var $author$project$Common$viewProjectImage = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10}),
						$mdgriffith$elm_ui$Element$clip
					]),
				{description: project.description, src: project.screenshotUrl})
			]));
};
var $author$project$Common$viewProjectTitle = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$light,
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.projectTitle),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$alignBottom,
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 0, bottomRight: 0, topLeft: 10, topRight: 10}),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(project.title)
					]))
			]));
};
var $author$project$Common$viewProject = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
							$mdgriffith$elm_ui$Element$alpha(0.2),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alpha(0)
								]))
						]),
					$mdgriffith$elm_ui$Element$text('')))
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$inFront(
						$author$project$Common$viewProjectDetails(project))
					]),
				_List_fromArray(
					[
						$author$project$Common$viewProjectTitle(project),
						$author$project$Common$viewProjectImage(project)
					])),
			url: '/project/' + project.slug
		});
};
var $author$project$Common$viewProjects = function (projects) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(60)
			]),
		A2(
			$elm$core$List$map,
			function (p) {
				return $author$project$Common$viewProject(p);
			},
			projects));
};
var $author$project$Skills$viewSkillIcon = function (skill) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(50)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 10, left: 0, right: 0, top: 10})
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40))
					]),
				{description: skill.name, src: skill.thumbnail}),
			url: '/skill/' + skill.slug
		});
};
var $author$project$Common$viewStack = function (skills) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(15),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY
			]),
		A2($elm$core$List$map, $author$project$Skills$viewSkillIcon, skills));
};
var $elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var $elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var $elm$html$Html$Attributes$map = $elm$virtual_dom$VirtualDom$mapAttribute;
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $elm$svg$Svg$title = $elm$svg$Svg$trustedNode('title');
var $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions = function (_v1) {
	var icon = _v1.a.icon;
	var outer = _v1.a.outer;
	return A2(
		$elm$core$Maybe$withDefault,
		icon.size,
		A2($elm$core$Maybe$map, $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensionsInternal, outer));
};
var $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensionsInternal = function (_v0) {
	var icon = _v0.a.icon;
	var outer = _v0.a.outer;
	return A2(
		$elm$core$Maybe$withDefault,
		icon.size,
		A2($elm$core$Maybe$map, $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions, outer));
};
var $elm$svg$Svg$defs = $elm$svg$Svg$trustedNode('defs');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $lattyware$elm_fontawesome$FontAwesome$Svg$fill = _List_fromArray(
	[
		$elm$svg$Svg$Attributes$x('0'),
		$elm$svg$Svg$Attributes$y('0'),
		$elm$svg$Svg$Attributes$width('100%'),
		$elm$svg$Svg$Attributes$height('100%')
	]);
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $elm$svg$Svg$mask = $elm$svg$Svg$trustedNode('mask');
var $elm$svg$Svg$Attributes$mask = _VirtualDom_attribute('mask');
var $elm$svg$Svg$Attributes$maskContentUnits = _VirtualDom_attribute('maskContentUnits');
var $elm$svg$Svg$Attributes$maskUnits = _VirtualDom_attribute('maskUnits');
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$add = F2(
	function (transform, combined) {
		switch (transform.$) {
			case 'Scale':
				var by = transform.a;
				return _Utils_update(
					combined,
					{size: combined.size + by});
			case 'Reposition':
				var axis = transform.a;
				var by = transform.b;
				var _v1 = function () {
					if (axis.$ === 'Vertical') {
						return _Utils_Tuple2(0, by);
					} else {
						return _Utils_Tuple2(by, 0);
					}
				}();
				var x = _v1.a;
				var y = _v1.b;
				return _Utils_update(
					combined,
					{x: combined.x + x, y: combined.y + y});
			case 'Rotate':
				var rotation = transform.a;
				return _Utils_update(
					combined,
					{rotate: combined.rotate + rotation});
			default:
				var axis = transform.a;
				if (axis.$ === 'Vertical') {
					return _Utils_update(
						combined,
						{flipY: !combined.flipY});
				} else {
					return _Utils_update(
						combined,
						{flipX: !combined.flipX});
				}
		}
	});
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize = 16;
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaninglessTransform = {flipX: false, flipY: false, rotate: 0, size: $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize, x: 0, y: 0};
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$combine = function (transforms) {
	return A3($elm$core$List$foldl, $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$add, $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaninglessTransform, transforms);
};
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaningfulTransform = function (transforms) {
	var combined = $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$combine(transforms);
	return _Utils_eq(combined, $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaninglessTransform) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(combined);
};
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$transformForSvg = F3(
	function (containerWidth, iconWidth, transform) {
		var path = 'translate(' + ($elm$core$String$fromFloat((iconWidth / 2) * (-1)) + ' -256)');
		var outer = 'translate(' + ($elm$core$String$fromFloat(containerWidth / 2) + ' 256)');
		var innerTranslate = 'translate(' + ($elm$core$String$fromFloat(transform.x * 32) + (',' + ($elm$core$String$fromFloat(transform.y * 32) + ') ')));
		var innerRotate = 'rotate(' + ($elm$core$String$fromFloat(transform.rotate) + ' 0 0)');
		var flipY = transform.flipY ? (-1) : 1;
		var scaleY = (transform.size / $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize) * flipY;
		var flipX = transform.flipX ? (-1) : 1;
		var scaleX = (transform.size / $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$baseSize) * flipX;
		var innerScale = 'scale(' + ($elm$core$String$fromFloat(scaleX) + (', ' + ($elm$core$String$fromFloat(scaleY) + ') ')));
		return {
			inner: $elm$svg$Svg$Attributes$transform(
				_Utils_ap(
					innerTranslate,
					_Utils_ap(innerScale, innerRotate))),
			outer: $elm$svg$Svg$Attributes$transform(outer),
			path: $elm$svg$Svg$Attributes$transform(path)
		};
	});
var $elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var $elm$svg$Svg$path = $elm$svg$Svg$trustedNode('path');
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewPath = F2(
	function (attrs, d) {
		return A2(
			$elm$svg$Svg$path,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$d(d),
				attrs),
			_List_Nil);
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewPaths = F2(
	function (attrs, _v0) {
		var paths = _v0.paths;
		if (paths.b.$ === 'Nothing') {
			var only = paths.a;
			var _v2 = paths.b;
			return A2($lattyware$elm_fontawesome$FontAwesome$Svg$viewPath, attrs, only);
		} else {
			var secondary = paths.a;
			var primary = paths.b.a;
			return A2(
				$elm$svg$Svg$g,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$class('fa-group')
					]),
				_List_fromArray(
					[
						A2(
						$lattyware$elm_fontawesome$FontAwesome$Svg$viewPath,
						A2(
							$elm$core$List$cons,
							$elm$svg$Svg$Attributes$class('fa-secondary'),
							attrs),
						secondary),
						A2(
						$lattyware$elm_fontawesome$FontAwesome$Svg$viewPath,
						A2(
							$elm$core$List$cons,
							$elm$svg$Svg$Attributes$class('fa-primary'),
							attrs),
						primary)
					]));
		}
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewWithTransform = F3(
	function (color, _v0, icon) {
		var outer = _v0.outer;
		var inner = _v0.inner;
		var path = _v0.path;
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[outer]),
			_List_fromArray(
				[
					A2(
					$elm$svg$Svg$g,
					_List_fromArray(
						[inner]),
					_List_fromArray(
						[
							A2(
							$lattyware$elm_fontawesome$FontAwesome$Svg$viewPaths,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$fill(color),
									path
								]),
							icon)
						]))
				]));
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewInColor = F2(
	function (color, fullIcon) {
		var icon = fullIcon.a.icon;
		var transforms = fullIcon.a.transforms;
		var id = fullIcon.a.id;
		var outer = fullIcon.a.outer;
		var combinedTransforms = $lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$meaningfulTransform(transforms);
		var _v0 = icon.size;
		var width = _v0.a;
		var _v1 = $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions(fullIcon);
		var topLevelWidth = _v1.a;
		if (combinedTransforms.$ === 'Just') {
			var meaningfulTransform = combinedTransforms.a;
			var svgTransform = A3($lattyware$elm_fontawesome$FontAwesome$Transforms$Internal$transformForSvg, topLevelWidth, width, meaningfulTransform);
			if (outer.$ === 'Just') {
				var outerIcon = outer.a;
				return A4($lattyware$elm_fontawesome$FontAwesome$Svg$viewMaskedWithTransform, color, svgTransform, icon, outerIcon);
			} else {
				return A3($lattyware$elm_fontawesome$FontAwesome$Svg$viewWithTransform, color, svgTransform, icon);
			}
		} else {
			return A2(
				$lattyware$elm_fontawesome$FontAwesome$Svg$viewPaths,
				_List_fromArray(
					[
						$elm$svg$Svg$Attributes$fill(color)
					]),
				icon);
		}
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$viewMaskedWithTransform = F4(
	function (color, transforms, exclude, include) {
		var id = include.a.id;
		var alwaysId = A2($elm$core$Maybe$withDefault, '', id);
		var clipId = 'clip-' + alwaysId;
		var maskId = 'mask-' + alwaysId;
		var maskTag = A2(
			$elm$svg$Svg$mask,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$id(maskId),
				A2(
					$elm$core$List$cons,
					$elm$svg$Svg$Attributes$maskUnits('userSpaceOnUse'),
					A2(
						$elm$core$List$cons,
						$elm$svg$Svg$Attributes$maskContentUnits('userSpaceOnUse'),
						$lattyware$elm_fontawesome$FontAwesome$Svg$fill))),
			_List_fromArray(
				[
					A2($lattyware$elm_fontawesome$FontAwesome$Svg$viewInColor, 'white', include),
					A3($lattyware$elm_fontawesome$FontAwesome$Svg$viewWithTransform, 'black', transforms, exclude)
				]));
		var defs = A2(
			$elm$svg$Svg$defs,
			_List_Nil,
			_List_fromArray(
				[maskTag]));
		var rect = A2(
			$elm$svg$Svg$rect,
			A2(
				$elm$core$List$cons,
				$elm$svg$Svg$Attributes$fill(color),
				A2(
					$elm$core$List$cons,
					$elm$svg$Svg$Attributes$mask('url(#' + (maskId + ')')),
					$lattyware$elm_fontawesome$FontAwesome$Svg$fill)),
			_List_Nil);
		return A2(
			$elm$svg$Svg$g,
			_List_Nil,
			_List_fromArray(
				[defs, rect]));
	});
var $lattyware$elm_fontawesome$FontAwesome$Svg$view = $lattyware$elm_fontawesome$FontAwesome$Svg$viewInColor('currentColor');
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $lattyware$elm_fontawesome$FontAwesome$internalView = F2(
	function (fullIcon, extraAttributes) {
		var icon = fullIcon.a.icon;
		var transforms = fullIcon.a.transforms;
		var role = fullIcon.a.role;
		var id = fullIcon.a.id;
		var title = fullIcon.a.title;
		var outer = fullIcon.a.outer;
		var attributes = fullIcon.a.attributes;
		var contents = $lattyware$elm_fontawesome$FontAwesome$Svg$view(fullIcon);
		var _v0 = function () {
			if (title.$ === 'Just') {
				var givenTitle = title.a;
				var titleId = A2($elm$core$Maybe$withDefault, '', id) + '-title';
				return _Utils_Tuple2(
					A2($elm$html$Html$Attributes$attribute, 'aria-labelledby', titleId),
					_List_fromArray(
						[
							A2(
							$elm$svg$Svg$title,
							_List_fromArray(
								[
									$elm$svg$Svg$Attributes$id(titleId)
								]),
							_List_fromArray(
								[
									$elm$svg$Svg$text(givenTitle)
								])),
							contents
						]));
			} else {
				return _Utils_Tuple2(
					A2($elm$html$Html$Attributes$attribute, 'aria-hidden', 'true'),
					_List_fromArray(
						[contents]));
			}
		}();
		var semantics = _v0.a;
		var potentiallyTitledContents = _v0.b;
		var _v2 = $lattyware$elm_fontawesome$FontAwesome$Internal$topLevelDimensions(fullIcon);
		var width = _v2.a;
		var height = _v2.b;
		var aspectRatio = $elm$core$Basics$ceiling((width / height) * 16);
		var classes = _List_fromArray(
			[
				'svg-inline--fa',
				'fa-' + icon.name,
				'fa-w-' + $elm$core$String$fromInt(aspectRatio)
			]);
		return A2(
			$elm$svg$Svg$svg,
			$elm$core$List$concat(
				_List_fromArray(
					[
						_List_fromArray(
						[
							A2($elm$html$Html$Attributes$attribute, 'role', role),
							A2($elm$html$Html$Attributes$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
							$elm$svg$Svg$Attributes$viewBox(
							'0 0 ' + ($elm$core$String$fromInt(width) + (' ' + $elm$core$String$fromInt(height)))),
							semantics
						]),
						A2($elm$core$List$map, $elm$svg$Svg$Attributes$class, classes),
						A2(
						$elm$core$List$map,
						$elm$html$Html$Attributes$map($elm$core$Basics$never),
						attributes),
						extraAttributes
					])),
			potentiallyTitledContents);
	});
var $lattyware$elm_fontawesome$FontAwesome$view = function (presentation) {
	return A2($lattyware$elm_fontawesome$FontAwesome$internalView, presentation, _List_Nil);
};
var $author$project$Components$icon = F2(
	function (faIcon, size) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(size)),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(size))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(
					$lattyware$elm_fontawesome$FontAwesome$view(faIcon))
				]));
	});
var $lattyware$elm_fontawesome$FontAwesome$Internal$Icon = function (a) {
	return {$: 'Icon', a: a};
};
var $lattyware$elm_fontawesome$FontAwesome$present = function (icon) {
	return $lattyware$elm_fontawesome$FontAwesome$Internal$Icon(
		{attributes: _List_Nil, icon: icon, id: $elm$core$Maybe$Nothing, outer: $elm$core$Maybe$Nothing, role: 'img', title: $elm$core$Maybe$Nothing, transforms: _List_Nil});
};
var $lattyware$elm_fontawesome$FontAwesome$IconDef = F4(
	function (prefix, name, size, paths) {
		return {name: name, paths: paths, prefix: prefix, size: size};
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$quoteLeft = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'quote-left',
	_Utils_Tuple2(448, 512),
	_Utils_Tuple2('M96 224C84.72 224 74.05 226.3 64 229.9V224c0-35.3 28.7-64 64-64c17.67 0 32-14.33 32-32S145.7 96 128 96C57.42 96 0 153.4 0 224v96c0 53.02 42.98 96 96 96s96-42.98 96-96S149 224 96 224zM352 224c-11.28 0-21.95 2.305-32 5.879V224c0-35.3 28.7-64 64-64c17.67 0 32-14.33 32-32s-14.33-32-32-32c-70.58 0-128 57.42-128 128v96c0 53.02 42.98 96 96 96s96-42.98 96-96S405 224 352 224z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$quoteLeft = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$quoteLeft);
var $author$project$Common$viewTestimonial = function (testimonial) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					]))
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$row,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(120)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(120)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Border$rounded(200),
										$mdgriffith$elm_ui$Element$clip
									]),
								{description: testimonial.text, src: testimonial.author.photo.url})
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$padding(20)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$quoteLeft, 25),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.testimonialCopy),
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$centerY
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(testimonial.text)
											]))
									])),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.testimonialAuthorName),
												$mdgriffith$elm_ui$Element$Font$regular
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(testimonial.author.name)
											])),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.testimonialAuthorTitle),
												$mdgriffith$elm_ui$Element$Font$regular
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(testimonial.author.title),
												$mdgriffith$elm_ui$Element$text(', '),
												$mdgriffith$elm_ui$Element$text(testimonial.author.organisation)
											]))
									]))
							]))
					])),
			url: '/testimonial/' + testimonial.slug
		});
};
var $author$project$Common$viewTestimonials = function (testimonials) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(70)
			]),
		A2(
			$elm$core$List$map,
			function (p) {
				return $author$project$Common$viewTestimonial(p);
			},
			testimonials));
};
var $author$project$Page$Index$viewContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(768)),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$Border$roundEach(
				{bottomLeft: 10, bottomRight: 10, topLeft: 0, topRight: 0}),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Page$Index$viewIntro(content.about),
				$author$project$Common$viewStack(content.skills),
				$author$project$Components$heading('Testimonials'),
				$author$project$Common$viewTestimonials(content.testimonials),
				$author$project$Components$heading('Past Work'),
				$author$project$Common$viewProjects(content.projects)
			]));
};
var $author$project$Page$Index$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Common$viewBanner,
				$author$project$Page$Index$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Common$viewPhoneBannerContent = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$alignBottom,
			$mdgriffith$elm_ui$Element$spacing(100)
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Font$light,
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.bannerText),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$centerX
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$padding(10),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorDarkerTransparent),
							$mdgriffith$elm_ui$Element$centerY,
							$mdgriffith$elm_ui$Element$Font$center,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('Crafting Better Software for Creators and Innovators')
						]))
				]))
		]));
var $author$project$Common$viewPhoneBannerImage = A2(
	$mdgriffith$elm_ui$Element$image,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY
		]),
	{description: 'banner', src: 'assets/images/banner-alternate.jpg'});
var $author$project$Common$viewPhoneBanner = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$centerY,
			$mdgriffith$elm_ui$Element$inFront($author$project$Common$viewPhoneBannerContent)
		]),
	_List_fromArray(
		[$author$project$Common$viewPhoneBannerImage]));
var $author$project$Components$phoneHeading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.heading),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 20})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Page$Index$viewPhoneIntro = function (content) {
	var _v0 = $author$project$MarkdownRendering$markdownView(content);
	if (_v0.$ === 'Ok') {
		var rendered = _v0.a;
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 5, left: 20, right: 20, top: 20})
				]),
			A2(
				$elm$core$List$map,
				function (p) {
					return A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$Font$justify,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
									$mdgriffith$elm_ui$Element$Font$light
								]),
							$author$project$Styles$defaultParagraphStyles),
						_List_fromArray(
							[p]));
				},
				rendered));
	} else {
		return $mdgriffith$elm_ui$Element$text('This should be pulling text from the file \"data/about.md\", but it\'s not working.');
	}
};
var $author$project$Common$viewPhoneProjectDetails = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$alignBottom,
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Font$light,
						$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.projectDescription),
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$centerX
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$paragraph,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$Border$roundEach(
								{bottomLeft: 10, bottomRight: 10, topLeft: 0, topRight: 0}),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorDarkerTransparent),
								$mdgriffith$elm_ui$Element$mouseOver(
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColorTransparent)
									])),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Font$center,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(project.description)
							]))
					]))
			]));
};
var $author$project$Common$viewPhoneProjectImage = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10}),
						$mdgriffith$elm_ui$Element$clip
					]),
				{description: project.description, src: project.screenshotUrl})
			]));
};
var $author$project$Common$viewPhoneProjectTitle = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Font$light,
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.projectTitle),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$alignTop,
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$alignBottom,
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$padding(15),
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 0, bottomRight: 0, topLeft: 10, topRight: 10}),
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Font$center,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(project.title)
					]))
			]));
};
var $author$project$Common$viewPhoneProject = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$inFront(
				A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
							$mdgriffith$elm_ui$Element$alpha(0.2),
							$mdgriffith$elm_ui$Element$mouseOver(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$alpha(0)
								]))
						]),
					$mdgriffith$elm_ui$Element$text('')))
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$inFront(
						$author$project$Common$viewPhoneProjectDetails(project))
					]),
				_List_fromArray(
					[
						$author$project$Common$viewPhoneProjectTitle(project),
						$author$project$Common$viewPhoneProjectImage(project)
					])),
			url: '/project/' + project.slug
		});
};
var $author$project$Common$viewPhoneProjects = function (projects) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(60)
			]),
		A2(
			$elm$core$List$map,
			function (p) {
				return $author$project$Common$viewPhoneProject(p);
			},
			projects));
};
var $author$project$Common$viewPhoneTestimonial = function (testimonial) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					]))
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$image,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width(
										$mdgriffith$elm_ui$Element$px(140)),
										$mdgriffith$elm_ui$Element$height(
										$mdgriffith$elm_ui$Element$px(140)),
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY,
										$mdgriffith$elm_ui$Element$Border$rounded(200),
										$mdgriffith$elm_ui$Element$clip,
										$mdgriffith$elm_ui$Element$centerX,
										$mdgriffith$elm_ui$Element$centerY
									]),
								{description: testimonial.text, src: testimonial.author.photo.url})
							])),
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$padding(20)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$quoteLeft, 25),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.testimonialCopy),
												$mdgriffith$elm_ui$Element$Font$light,
												$mdgriffith$elm_ui$Element$centerY
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(testimonial.text)
											]))
									])),
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(5)
									]),
								_List_fromArray(
									[
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.testimonialAuthorName),
												$mdgriffith$elm_ui$Element$Font$regular
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(testimonial.author.name)
											])),
										A2(
										$mdgriffith$elm_ui$Element$paragraph,
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$alignLeft,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$centerY,
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.testimonialAuthorTitle),
												$mdgriffith$elm_ui$Element$Font$regular
											]),
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text(testimonial.author.title),
												$mdgriffith$elm_ui$Element$text(', '),
												$mdgriffith$elm_ui$Element$text(testimonial.author.organisation)
											]))
									]))
							]))
					])),
			url: '/testimonial/' + testimonial.slug
		});
};
var $author$project$Common$viewPhoneTestimonials = function (testimonials) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$spacing(20)
			]),
		A2(
			$elm$core$List$map,
			function (p) {
				return $author$project$Common$viewPhoneTestimonial(p);
			},
			testimonials));
};
var $author$project$Page$Index$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$Border$roundEach(
				{bottomLeft: 10, bottomRight: 10, topLeft: 0, topRight: 0}),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Page$Index$viewPhoneIntro(content.about),
				$author$project$Components$phoneHeading('Testimonials'),
				$author$project$Common$viewPhoneTestimonials(content.testimonials),
				$author$project$Components$phoneHeading('Past Work'),
				$author$project$Common$viewPhoneProjects(content.projects)
			]));
};
var $author$project$Page$Index$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Common$viewPhoneBanner,
				$author$project$Page$Index$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Index$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Index$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Index$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Index$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Index$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Index$view},
	$author$project$Page$single(
		{data: $author$project$Page$Index$data, head: $author$project$Page$Index$head}));
var $author$project$Page$Now$Now = F2(
	function (content, publishedDate) {
		return {content: content, publishedDate: publishedDate};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TArrayIndex = function (a) {
	return {$: 'TArrayIndex', a: a};
};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$index = F2(
	function (idx, _v0) {
		var decoderFn = _v0.a;
		var finalize = function (_v7) {
			var values = _v7.a;
			var warnings = _v7.b;
			var res = _v7.c;
			if (res.$ === 'Nothing') {
				return A2(
					$zwilias$json_decode_exploration$Json$Decode$Exploration$expected,
					$zwilias$json_decode_exploration$Json$Decode$Exploration$TArrayIndex(idx),
					A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Array, true, values));
			} else {
				if (res.a.$ === 'Err') {
					var e = res.a.a;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Array, true, values),
						$elm$core$Result$Err(e));
				} else {
					var v = res.a.a;
					return _Utils_Tuple2(
						A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Array, true, values),
						$elm$core$Result$Ok(
							{value: v, warnings: warnings}));
				}
			}
		};
		var accumulate = F2(
			function (_v3, _v4) {
				var used = _v3.a;
				var val = _v3.b;
				var i = _v4.a;
				var _v5 = _v4.b;
				var acc = _v5.a;
				var warnings = _v5.b;
				var result = _v5.c;
				if (_Utils_eq(i, idx)) {
					var _v2 = decoderFn(val);
					if (_v2.b.$ === 'Err') {
						var annVal = _v2.a;
						var e = _v2.b.a;
						return _Utils_Tuple2(
							i - 1,
							_Utils_Tuple3(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(true, annVal),
									acc),
								warnings,
								$elm$core$Maybe$Just(
									$elm$core$Result$Err(
										$mgold$elm_nonempty_list$List$Nonempty$fromElement(
											A2($zwilias$json_decode_exploration$Json$Decode$Exploration$Located$AtIndex, i, e))))));
					} else {
						var annVal = _v2.a;
						var res = _v2.b.a;
						return _Utils_Tuple2(
							i - 1,
							_Utils_Tuple3(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(true, annVal),
									acc),
								_Utils_ap(res.warnings, warnings),
								$elm$core$Maybe$Just(
									$elm$core$Result$Ok(res.value))));
					}
				} else {
					return _Utils_Tuple2(
						i - 1,
						_Utils_Tuple3(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									used || (!_Utils_eq(result, $elm$core$Maybe$Nothing)),
									val),
								acc),
							warnings,
							result));
				}
			});
		return $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
			function (json) {
				if (json.$ === 'Array') {
					var values = json.b;
					return finalize(
						A3(
							$elm$core$List$foldr,
							accumulate,
							_Utils_Tuple2(
								$elm$core$List$length(values) - 1,
								_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing)),
							values).b);
				} else {
					return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TArray, json);
				}
			});
	});
var $dillonkearns$elm_pages$OptimizedDecoder$index = F2(
	function (idx, _v0) {
		var jd = _v0.a;
		var jde = _v0.b;
		return A2(
			$dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder,
			A2($elm$json$Json$Decode$index, idx, jd),
			A2($zwilias$json_decode_exploration$Json$Decode$Exploration$index, idx, jde));
	});
var $author$project$Page$Now$decodeNow = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Page$Now$Now,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'posts',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$index,
			0,
			A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'html', $dillonkearns$elm_pages$OptimizedDecoder$string))),
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'posts',
		A2(
			$dillonkearns$elm_pages$OptimizedDecoder$index,
			0,
			A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'title', $dillonkearns$elm_pages$OptimizedDecoder$string))));
var $author$project$Page$Now$data = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://sashinexists.com/ghost/api/content/posts/?key=7056a7f95687eb9648aecc5777&filter=tag:now&formats=html'),
	$author$project$Page$Now$decodeNow);
var $author$project$Page$Now$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Now'
			}));
};
var $danneu$html_parser$Html$Parser$Config = function (a) {
	return {$: 'Config', a: a};
};
var $danneu$html_parser$Html$Parser$noCharRefs = $danneu$html_parser$Html$Parser$Config(
	{charRefs: $elm$core$Dict$empty});
var $author$project$Components$pageContainer = F2(
	function (attributes, elements) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				attributes,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
						$mdgriffith$elm_ui$Element$Border$rounded(10),
						$mdgriffith$elm_ui$Element$padding(50),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(768))
					])),
			elements);
	});
var $danneu$html_parser$Html$Parser$Element = F3(
	function (a, b, c) {
		return {$: 'Element', a: a, b: b, c: c};
	});
var $danneu$html_parser$Html$Parser$Text = function (a) {
	return {$: 'Text', a: a};
};
var $danneu$html_parser$Html$Parser$chompOneOrMore = function (predicate) {
	return A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$chompIf(predicate),
		$elm$parser$Parser$chompWhile(predicate));
};
var $danneu$html_parser$Html$Parser$tagName = A2(
	$elm$parser$Parser$map,
	$elm$core$String$toLower,
	$elm$parser$Parser$getChompedString(
		$danneu$html_parser$Html$Parser$chompOneOrMore(
			function (c) {
				return $elm$core$Char$isAlphaNum(c) || _Utils_eq(
					c,
					_Utils_chr('-'));
			})));
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$token = function (str) {
	return $elm$parser$Parser$Advanced$token(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$NotNestable = {$: 'NotNestable'};
var $elm$parser$Parser$getOffset = $elm$parser$Parser$Advanced$getOffset;
var $danneu$html_parser$Html$Parser$ifProgress = F2(
	function (parser, offset) {
		return A2(
			$elm$parser$Parser$map,
			function (newOffset) {
				return _Utils_eq(offset, newOffset) ? $elm$parser$Parser$Done(_Utils_Tuple0) : $elm$parser$Parser$Loop(newOffset);
			},
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					parser),
				$elm$parser$Parser$getOffset));
	});
var $danneu$html_parser$Html$Parser$isSpace = function (c) {
	return _Utils_eq(
		c,
		_Utils_chr(' ')) || (_Utils_eq(
		c,
		_Utils_chr('\n')) || (_Utils_eq(
		c,
		_Utils_chr('\u000D')) || (_Utils_eq(
		c,
		_Utils_chr('\t')) || (_Utils_eq(
		c,
		_Utils_chr('\u000C')) || _Utils_eq(
		c,
		_Utils_chr('\u00A0'))))));
};
var $elm$parser$Parser$Advanced$isChar = function (_char) {
	return true;
};
var $elm$parser$Parser$Advanced$revAlways = F2(
	function (_v0, b) {
		return b;
	});
var $elm$parser$Parser$Advanced$skip = F2(
	function (iParser, kParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$parser$Parser$Advanced$revAlways, iParser, kParser);
	});
var $elm$parser$Parser$Advanced$nestableHelp = F5(
	function (isNotRelevant, open, close, expectingClose, nestLevel) {
		return A2(
			$elm$parser$Parser$Advanced$skip,
			$elm$parser$Parser$Advanced$chompWhile(isNotRelevant),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						(nestLevel === 1) ? close : A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v0) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel - 1);
						},
						close),
						A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v1) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel + 1);
						},
						open),
						A2(
						$elm$parser$Parser$Advanced$andThen,
						function (_v2) {
							return A5($elm$parser$Parser$Advanced$nestableHelp, isNotRelevant, open, close, expectingClose, nestLevel);
						},
						A2($elm$parser$Parser$Advanced$chompIf, $elm$parser$Parser$Advanced$isChar, expectingClose))
					])));
	});
var $elm$parser$Parser$Advanced$nestableComment = F2(
	function (open, close) {
		var oStr = open.a;
		var oX = open.b;
		var cStr = close.a;
		var cX = close.b;
		var _v0 = $elm$core$String$uncons(oStr);
		if (_v0.$ === 'Nothing') {
			return $elm$parser$Parser$Advanced$problem(oX);
		} else {
			var _v1 = _v0.a;
			var openChar = _v1.a;
			var _v2 = $elm$core$String$uncons(cStr);
			if (_v2.$ === 'Nothing') {
				return $elm$parser$Parser$Advanced$problem(cX);
			} else {
				var _v3 = _v2.a;
				var closeChar = _v3.a;
				var isNotRelevant = function (_char) {
					return (!_Utils_eq(_char, openChar)) && (!_Utils_eq(_char, closeChar));
				};
				var chompOpen = $elm$parser$Parser$Advanced$token(open);
				return A2(
					$elm$parser$Parser$Advanced$ignorer,
					chompOpen,
					A5(
						$elm$parser$Parser$Advanced$nestableHelp,
						isNotRelevant,
						chompOpen,
						$elm$parser$Parser$Advanced$token(close),
						cX,
						1));
			}
		}
	});
var $elm$parser$Parser$Advanced$multiComment = F3(
	function (open, close, nestable) {
		if (nestable.$ === 'NotNestable') {
			return A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$token(open),
				$elm$parser$Parser$Advanced$chompUntil(close));
		} else {
			return A2($elm$parser$Parser$Advanced$nestableComment, open, close);
		}
	});
var $elm$parser$Parser$Advanced$Nestable = {$: 'Nestable'};
var $elm$parser$Parser$Advanced$NotNestable = {$: 'NotNestable'};
var $elm$parser$Parser$toAdvancedNestable = function (nestable) {
	if (nestable.$ === 'NotNestable') {
		return $elm$parser$Parser$Advanced$NotNestable;
	} else {
		return $elm$parser$Parser$Advanced$Nestable;
	}
};
var $elm$parser$Parser$multiComment = F3(
	function (open, close, nestable) {
		return A3(
			$elm$parser$Parser$Advanced$multiComment,
			$elm$parser$Parser$toToken(open),
			$elm$parser$Parser$toToken(close),
			$elm$parser$Parser$toAdvancedNestable(nestable));
	});
var $danneu$html_parser$Html$Parser$ws = A2(
	$elm$parser$Parser$loop,
	0,
	$danneu$html_parser$Html$Parser$ifProgress(
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A3($elm$parser$Parser$multiComment, '<!--', '-->', $elm$parser$Parser$NotNestable),
					$elm$parser$Parser$chompWhile($danneu$html_parser$Html$Parser$isSpace)
				]))));
var $danneu$html_parser$Html$Parser$anyCloseTag = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed(_Utils_Tuple0),
				$elm$parser$Parser$token('</')),
			$danneu$html_parser$Html$Parser$tagName),
		$danneu$html_parser$Html$Parser$ws),
	$elm$parser$Parser$token('>'));
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $danneu$html_parser$Html$Parser$justOneChar = $elm$parser$Parser$getChompedString(
	$elm$parser$Parser$chompIf(
		$elm$core$Basics$always(true)));
var $elm$parser$Parser$Advanced$commit = function (a) {
	return $elm$parser$Parser$Advanced$Parser(
		function (s) {
			return A3($elm$parser$Parser$Advanced$Good, true, a, s);
		});
};
var $elm$parser$Parser$commit = $elm$parser$Parser$Advanced$commit;
var $danneu$html_parser$Html$Parser$lookAhead = function (parser) {
	return A2(
		$elm$parser$Parser$andThen,
		$elm$core$Basics$identity,
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$backtrackable(
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								A2(
								$elm$parser$Parser$andThen,
								function (_v1) {
									return $elm$parser$Parser$problem('');
								},
								A2(
									$elm$parser$Parser$andThen,
									function (_v0) {
										return $elm$parser$Parser$commit(_Utils_Tuple0);
									},
									$elm$parser$Parser$backtrackable(parser))),
								$elm$parser$Parser$succeed(
								A2(
									$elm$parser$Parser$map,
									function (_v2) {
										return _Utils_Tuple0;
									},
									$elm$parser$Parser$backtrackable(parser)))
							]))),
					$elm$parser$Parser$succeed(
					$elm$parser$Parser$succeed(_Utils_Tuple0))
				])));
};
var $danneu$html_parser$Html$Parser$chompUntilLookAhead = function (parser) {
	return A2(
		$elm$parser$Parser$andThen,
		function (acc) {
			return $elm$core$String$isEmpty(acc) ? $elm$parser$Parser$problem('expected some text') : $elm$parser$Parser$succeed(_Utils_Tuple0);
		},
		A2(
			$elm$parser$Parser$loop,
			'',
			function (acc) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(acc)),
							$danneu$html_parser$Html$Parser$lookAhead(parser)),
							A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(
								function (s) {
									return $elm$parser$Parser$Loop(
										_Utils_ap(acc, s));
								}),
							$danneu$html_parser$Html$Parser$justOneChar),
							$elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(acc))
						]));
			}));
};
var $danneu$html_parser$Html$Parser$closeTag = function (expectedTag) {
	return A2(
		$elm$parser$Parser$andThen,
		function (tag) {
			return _Utils_eq(tag, expectedTag) ? $elm$parser$Parser$succeed(_Utils_Tuple0) : $elm$parser$Parser$problem('found closing tag </' + (tag + ('> but expected </' + (expectedTag + '>'))));
		},
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$token('</')),
			A2(
				$elm$parser$Parser$ignorer,
				A2($elm$parser$Parser$ignorer, $danneu$html_parser$Html$Parser$tagName, $danneu$html_parser$Html$Parser$ws),
				$elm$parser$Parser$token('>'))));
};
var $danneu$html_parser$Html$Parser$Comment = function (a) {
	return {$: 'Comment', a: a};
};
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $danneu$html_parser$Html$Parser$comment = A2(
	$elm$parser$Parser$keeper,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed($danneu$html_parser$Html$Parser$Comment),
		$elm$parser$Parser$symbol('<!--')),
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$getChompedString(
			$elm$parser$Parser$chompUntilEndOr('-->')),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$symbol('-->'),
					$elm$parser$Parser$succeed(_Utils_Tuple0)
				]))));
var $danneu$html_parser$Html$Parser$stringHelp = F3(
	function (terminatorChar, terminatorStr, acc) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$keeper,
					A2(
						$elm$parser$Parser$ignorer,
						$elm$parser$Parser$succeed(
							function (_char) {
								return $elm$parser$Parser$Loop(acc + ('\\' + _char));
							}),
						$elm$parser$Parser$token('\\')),
					$danneu$html_parser$Html$Parser$justOneChar),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(acc);
					},
					$elm$parser$Parser$token(terminatorStr)),
					A2(
					$elm$parser$Parser$map,
					function (chunk) {
						return $elm$parser$Parser$Loop(
							_Utils_ap(acc, chunk));
					},
					$elm$parser$Parser$getChompedString(
						$danneu$html_parser$Html$Parser$chompOneOrMore(
							function (_char) {
								return (!_Utils_eq(
									_char,
									_Utils_chr('\\'))) && (!_Utils_eq(_char, terminatorChar));
							})))
				]));
	});
var $danneu$html_parser$Html$Parser$javaScriptStringLike = function (terminatorChar) {
	var terminatorStr = $elm$core$String$fromChar(terminatorChar);
	return A2(
		$elm$parser$Parser$map,
		function (chunk) {
			return _Utils_ap(
				terminatorStr,
				_Utils_ap(chunk, terminatorStr));
		},
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$token(terminatorStr)),
			A2(
				$elm$parser$Parser$loop,
				'',
				A2($danneu$html_parser$Html$Parser$stringHelp, terminatorChar, terminatorStr))));
};
var $elm$parser$Parser$Advanced$lineComment = function (start) {
	return A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$token(start),
		$elm$parser$Parser$Advanced$chompUntilEndOr('\n'));
};
var $elm$parser$Parser$lineComment = function (str) {
	return $elm$parser$Parser$Advanced$lineComment(
		$elm$parser$Parser$toToken(str));
};
var $danneu$html_parser$Html$Parser$consumeJavascriptUntilClosingTag = A2(
	$elm$parser$Parser$loop,
	_List_Nil,
	function (acc) {
		var accumulate = function (newNode) {
			var _v1 = _Utils_Tuple2(acc, newNode);
			if (!_v1.a.b) {
				var first = _v1.b;
				return $elm$parser$Parser$Loop(
					_List_fromArray(
						[first]));
			} else {
				if ((_v1.a.a.$ === 'Text') && (_v1.b.$ === 'Text')) {
					var _v2 = _v1.a;
					var accChunk = _v2.a.a;
					var tail = _v2.b;
					var newChunk = _v1.b.a;
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							$danneu$html_parser$Html$Parser$Text(
								_Utils_ap(accChunk, newChunk)),
							tail));
				} else {
					var _v3 = _v1.a;
					var nonTextNode = _v3.a;
					var tail = _v3.b;
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							newNode,
							A2($elm$core$List$cons, nonTextNode, tail)));
				}
			}
		};
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2($elm$parser$Parser$map, accumulate, $danneu$html_parser$Html$Parser$comment),
					A2(
					$elm$parser$Parser$map,
					A2($elm$core$Basics$composeR, $danneu$html_parser$Html$Parser$Text, accumulate),
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$lineComment('//'))),
					A2(
					$elm$parser$Parser$map,
					A2($elm$core$Basics$composeR, $danneu$html_parser$Html$Parser$Text, accumulate),
					$elm$parser$Parser$getChompedString(
						A3($elm$parser$Parser$multiComment, '/*', '*/', $elm$parser$Parser$NotNestable))),
					A2(
					$elm$parser$Parser$map,
					A2($elm$core$Basics$composeR, $danneu$html_parser$Html$Parser$Text, accumulate),
					$danneu$html_parser$Html$Parser$javaScriptStringLike(
						_Utils_chr('\"'))),
					A2(
					$elm$parser$Parser$map,
					A2($elm$core$Basics$composeR, $danneu$html_parser$Html$Parser$Text, accumulate),
					$danneu$html_parser$Html$Parser$javaScriptStringLike(
						_Utils_chr('\''))),
					A2(
					$elm$parser$Parser$map,
					A2($elm$core$Basics$composeR, $danneu$html_parser$Html$Parser$Text, accumulate),
					$danneu$html_parser$Html$Parser$javaScriptStringLike(
						_Utils_chr('`'))),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							$elm$core$List$reverse(acc));
					},
					$danneu$html_parser$Html$Parser$closeTag('script')),
					A2(
					$elm$parser$Parser$map,
					A2($elm$core$Basics$composeR, $danneu$html_parser$Html$Parser$Text, accumulate),
					$elm$parser$Parser$getChompedString(
						$elm$parser$Parser$chompIf(
							$elm$core$Basics$always(true))))
				]));
	});
var $danneu$html_parser$Html$Parser$escapableRawTextTags = _List_fromArray(
	['textarea', 'title']);
var $danneu$html_parser$Html$Parser$autoclosingTags = _List_fromArray(
	['body', 'colgroup', 'dd', 'dt', 'head', 'html', 'li', 'option', 'p', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr']);
var $danneu$html_parser$Html$Parser$isAutoclosingTag = function (tag) {
	return A2($elm$core$List$member, tag, $danneu$html_parser$Html$Parser$autoclosingTags);
};
var $danneu$html_parser$Html$Parser$voidTags = _List_fromArray(
	['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'source', 'track', 'wbr']);
var $danneu$html_parser$Html$Parser$isVoidTag = function (tag) {
	return A2($elm$core$List$member, tag, $danneu$html_parser$Html$Parser$voidTags);
};
var $danneu$html_parser$Html$Parser$NoClose = {$: 'NoClose'};
var $danneu$html_parser$Html$Parser$SelfClose = {$: 'SelfClose'};
var $danneu$html_parser$Html$Parser$attributeKey = function () {
	var isKeyChar = function (c) {
		return (!$danneu$html_parser$Html$Parser$isSpace(c)) && ((!_Utils_eq(
			c,
			_Utils_chr('\"'))) && ((!_Utils_eq(
			c,
			_Utils_chr('\''))) && ((!_Utils_eq(
			c,
			_Utils_chr('>'))) && ((!_Utils_eq(
			c,
			_Utils_chr('/'))) && (!_Utils_eq(
			c,
			_Utils_chr('=')))))));
	};
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$append),
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$elm$parser$Parser$backtrackable(
							$elm$parser$Parser$chompIf(
								$elm$core$Basics$eq(
									_Utils_chr('/')))),
							$elm$parser$Parser$succeed(_Utils_Tuple0)
						]))),
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$map,
						function (_v0) {
							return '=';
						},
						$elm$parser$Parser$chompIf(
							$elm$core$Basics$eq(
								_Utils_chr('=')))),
						$elm$parser$Parser$succeed('')
					]))),
		A2(
			$elm$parser$Parser$map,
			$elm$core$String$toLower,
			$elm$parser$Parser$getChompedString(
				$danneu$html_parser$Html$Parser$chompOneOrMore(isKeyChar))));
}();
var $danneu$html_parser$Html$Parser$namedCharacterReference = function (_v0) {
	var cfg = _v0.a;
	return A2(
		$elm$parser$Parser$map,
		function (ref) {
			return A2(
				$elm$core$Maybe$withDefault,
				'&' + (ref + ';'),
				A2($elm$core$Dict$get, ref, cfg.charRefs));
		},
		$elm$parser$Parser$getChompedString(
			$danneu$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isAlpha)));
};
var $danneu$html_parser$Html$Parser$base10 = A2(
	$elm$parser$Parser$andThen,
	function (digits) {
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$parser$Parser$problem('bad number'),
			A2(
				$elm$core$Maybe$map,
				$elm$parser$Parser$succeed,
				$elm$core$String$toInt(digits)));
	},
	$elm$parser$Parser$getChompedString(
		$danneu$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isDigit)));
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $danneu$html_parser$Html$Parser$base16 = A2(
	$elm$parser$Parser$andThen,
	function (hex) {
		var _v0 = $rtfeldman$elm_hex$Hex$fromString(
			$elm$core$String$toLower(hex));
		if (_v0.$ === 'Ok') {
			var num = _v0.a;
			return $elm$parser$Parser$succeed(num);
		} else {
			var msg = _v0.a;
			return $elm$parser$Parser$problem(msg);
		}
	},
	$elm$parser$Parser$getChompedString(
		$danneu$html_parser$Html$Parser$chompOneOrMore($elm$core$Char$isHexDigit)));
var $danneu$html_parser$Html$Parser$numericCharacterReference = function () {
	var codepoint = $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$chompIf(
						function (c) {
							return _Utils_eq(
								c,
								_Utils_chr('x')) || _Utils_eq(
								c,
								_Utils_chr('X'));
						})),
				$danneu$html_parser$Html$Parser$base16),
				A2(
				$elm$parser$Parser$keeper,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$danneu$html_parser$Html$Parser$base10)
			]));
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(
					_Utils_chr('#')))),
		A2(
			$elm$parser$Parser$map,
			$elm$core$String$fromChar,
			A2(
				$elm$parser$Parser$andThen,
				function (code) {
					return (!code) ? $elm$parser$Parser$succeed(
						_Utils_chr('�')) : (((55296 <= code) && (code <= 57343)) ? $elm$parser$Parser$succeed(
						_Utils_chr('�')) : $elm$parser$Parser$succeed(
						$elm$core$Char$fromCode(code)));
				},
				codepoint)));
}();
var $danneu$html_parser$Html$Parser$characterReference = function (cfg) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$chompIf(
				$elm$core$Basics$eq(
					_Utils_chr('&')))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$backtrackable($danneu$html_parser$Html$Parser$numericCharacterReference),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr(';')))),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$backtrackable(
						$danneu$html_parser$Html$Parser$namedCharacterReference(cfg)),
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$eq(
							_Utils_chr(';')))),
					$elm$parser$Parser$succeed('&')
				])));
};
var $danneu$html_parser$Html$Parser$zeroOrMore = function (parser) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		function (acc) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed(
							function (val) {
								return $elm$parser$Parser$Loop(
									A2($elm$core$List$cons, val, acc));
							}),
						parser),
						$elm$parser$Parser$succeed(
						$elm$parser$Parser$Done(
							$elm$core$List$reverse(acc)))
					]));
		});
};
var $danneu$html_parser$Html$Parser$attributeValueQuoted = F2(
	function (cfg, quote) {
		var isQuotedValueChar = function (c) {
			return (!_Utils_eq(c, quote)) && (!_Utils_eq(
				c,
				_Utils_chr('&')));
		};
		return A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq(quote))),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$map,
					$elm$core$String$concat,
					$danneu$html_parser$Html$Parser$zeroOrMore(
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									$elm$parser$Parser$getChompedString(
									$danneu$html_parser$Html$Parser$chompOneOrMore(isQuotedValueChar)),
									$danneu$html_parser$Html$Parser$characterReference(cfg)
								])))),
				$elm$parser$Parser$chompIf(
					$elm$core$Basics$eq(quote))));
	});
var $danneu$html_parser$Html$Parser$oneOrMore = F2(
	function (name, parser) {
		return A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			function (acc) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(
								function (val) {
									return $elm$parser$Parser$Loop(
										A2($elm$core$List$cons, val, acc));
								}),
							parser),
							$elm$core$List$isEmpty(acc) ? $elm$parser$Parser$problem('expecting at least one ' + name) : $elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(
								$elm$core$List$reverse(acc)))
						]));
			});
	});
var $danneu$html_parser$Html$Parser$attributeValueUnquoted = function (cfg) {
	var isLenientUnquotedValueChar = function (c) {
		return (!$danneu$html_parser$Html$Parser$isSpace(c)) && ((!_Utils_eq(
			c,
			_Utils_chr('>'))) && (!_Utils_eq(
			c,
			_Utils_chr('&'))));
	};
	return A2(
		$elm$parser$Parser$map,
		$elm$core$String$concat,
		A2(
			$danneu$html_parser$Html$Parser$oneOrMore,
			'attribute value',
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$getChompedString(
						$danneu$html_parser$Html$Parser$chompOneOrMore(isLenientUnquotedValueChar)),
						$danneu$html_parser$Html$Parser$characterReference(cfg)
					]))));
};
var $danneu$html_parser$Html$Parser$attribute = function (cfg) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			$elm$parser$Parser$succeed($elm$core$Tuple$pair),
			A2($elm$parser$Parser$ignorer, $danneu$html_parser$Html$Parser$attributeKey, $danneu$html_parser$Html$Parser$ws)),
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$keeper,
						A2(
							$elm$parser$Parser$ignorer,
							A2(
								$elm$parser$Parser$ignorer,
								$elm$parser$Parser$succeed($elm$core$Basics$identity),
								$elm$parser$Parser$symbol('=')),
							$danneu$html_parser$Html$Parser$ws),
						$elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									A2(
									$danneu$html_parser$Html$Parser$attributeValueQuoted,
									cfg,
									_Utils_chr('\"')),
									A2(
									$danneu$html_parser$Html$Parser$attributeValueQuoted,
									cfg,
									_Utils_chr('\'')),
									$danneu$html_parser$Html$Parser$attributeValueUnquoted(cfg)
								]))),
						$elm$parser$Parser$succeed('')
					])),
			$danneu$html_parser$Html$Parser$ws));
};
var $danneu$html_parser$Html$Parser$openTag = function (cfg) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$keeper,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(
						F3(
							function (a, b, c) {
								return _Utils_Tuple3(a, b, c);
							})),
					$elm$parser$Parser$symbol('<')),
				A2($elm$parser$Parser$ignorer, $danneu$html_parser$Html$Parser$tagName, $danneu$html_parser$Html$Parser$ws)),
			A2(
				$elm$parser$Parser$ignorer,
				$danneu$html_parser$Html$Parser$zeroOrMore(
					$danneu$html_parser$Html$Parser$attribute(cfg)),
				$danneu$html_parser$Html$Parser$ws)),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($danneu$html_parser$Html$Parser$NoClose),
					$elm$parser$Parser$symbol('>')),
					A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed($danneu$html_parser$Html$Parser$SelfClose),
					$elm$parser$Parser$symbol('/>'))
				])));
};
var $danneu$html_parser$Html$Parser$text = function (cfg) {
	return A2(
		$elm$parser$Parser$andThen,
		function (s) {
			return $elm$core$String$isEmpty(s) ? $elm$parser$Parser$problem('expected at least one text char') : $elm$parser$Parser$succeed(
				$danneu$html_parser$Html$Parser$Text(s));
		},
		A2(
			$elm$parser$Parser$loop,
			'',
			function (acc) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(
								function (s) {
									return $elm$parser$Parser$Loop(
										_Utils_ap(acc, s));
								}),
							$danneu$html_parser$Html$Parser$characterReference(cfg)),
							A2(
							$elm$parser$Parser$map,
							function (s) {
								return $elm$parser$Parser$Loop(
									_Utils_ap(acc, s));
							},
							$elm$parser$Parser$getChompedString(
								$danneu$html_parser$Html$Parser$chompOneOrMore(
									function (c) {
										return (!_Utils_eq(
											c,
											_Utils_chr('<'))) && (!_Utils_eq(
											c,
											_Utils_chr('&')));
									}))),
							A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(acc)),
							$danneu$html_parser$Html$Parser$lookAhead(
								$danneu$html_parser$Html$Parser$openTag(cfg))),
							A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(acc)),
							$danneu$html_parser$Html$Parser$lookAhead($danneu$html_parser$Html$Parser$anyCloseTag)),
							A2(
							$elm$parser$Parser$ignorer,
							$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(acc)),
							$danneu$html_parser$Html$Parser$lookAhead($danneu$html_parser$Html$Parser$comment)),
							A2(
							$elm$parser$Parser$keeper,
							$elm$parser$Parser$succeed(
								function (s) {
									return $elm$parser$Parser$Loop(
										_Utils_ap(acc, s));
								}),
							$danneu$html_parser$Html$Parser$justOneChar),
							$elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(acc))
						]));
			}));
};
var $danneu$html_parser$Html$Parser$element = function (cfg) {
	return A2(
		$elm$parser$Parser$andThen,
		function (_v2) {
			var tag = _v2.a;
			var attrs = _v2.b;
			var end = _v2.c;
			if (end.$ === 'SelfClose') {
				return $elm$parser$Parser$succeed(
					A3($danneu$html_parser$Html$Parser$Element, tag, attrs, _List_Nil));
			} else {
				return (tag === 'script') ? A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						A2($danneu$html_parser$Html$Parser$Element, tag, attrs)),
					$danneu$html_parser$Html$Parser$consumeJavascriptUntilClosingTag) : ($danneu$html_parser$Html$Parser$isVoidTag(tag) ? $elm$parser$Parser$succeed(
					A3($danneu$html_parser$Html$Parser$Element, tag, attrs, _List_Nil)) : (A2($elm$core$List$member, tag, $danneu$html_parser$Html$Parser$escapableRawTextTags) ? A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						A2($danneu$html_parser$Html$Parser$Element, tag, attrs)),
					A2(
						$elm$parser$Parser$loop,
						_List_Nil,
						function (acc) {
							return $elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$elm$parser$Parser$Done(
												$elm$core$List$reverse(acc))),
										$elm$parser$Parser$backtrackable(
											$danneu$html_parser$Html$Parser$closeTag(tag))),
										A2(
										$elm$parser$Parser$keeper,
										$elm$parser$Parser$succeed(
											function (n) {
												return $elm$parser$Parser$Loop(
													A2($elm$core$List$cons, n, acc));
											}),
										A2(
											$elm$parser$Parser$map,
											$danneu$html_parser$Html$Parser$Text,
											$elm$parser$Parser$getChompedString(
												$danneu$html_parser$Html$Parser$chompUntilLookAhead(
													$danneu$html_parser$Html$Parser$closeTag(tag))))),
										$elm$parser$Parser$succeed(
										$elm$parser$Parser$Done(
											$elm$core$List$reverse(acc)))
									]));
						})) : ($danneu$html_parser$Html$Parser$isAutoclosingTag(tag) ? A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						A2($danneu$html_parser$Html$Parser$Element, tag, attrs)),
					A2(
						$elm$parser$Parser$keeper,
						$elm$parser$Parser$succeed($elm$core$Basics$identity),
						A2(
							$elm$parser$Parser$ignorer,
							$danneu$html_parser$Html$Parser$zeroOrMore(
								(tag === 'head') ? A2(
									$danneu$html_parser$Html$Parser$notNode,
									cfg,
									_List_fromArray(
										[tag, 'body'])) : A2(
									$danneu$html_parser$Html$Parser$notNode,
									cfg,
									_List_fromArray(
										[tag]))),
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										$elm$parser$Parser$backtrackable(
										$danneu$html_parser$Html$Parser$closeTag(tag)),
										$elm$parser$Parser$succeed(_Utils_Tuple0)
									]))))) : A2(
					$elm$parser$Parser$keeper,
					$elm$parser$Parser$succeed(
						A2($danneu$html_parser$Html$Parser$Element, tag, attrs)),
					A2(
						$elm$parser$Parser$loop,
						_List_Nil,
						function (acc) {
							return $elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$ignorer,
										$elm$parser$Parser$succeed(
											$elm$parser$Parser$Done(
												$elm$core$List$reverse(acc))),
										$elm$parser$Parser$backtrackable(
											$danneu$html_parser$Html$Parser$closeTag(tag))),
										A2(
										$elm$parser$Parser$keeper,
										$elm$parser$Parser$succeed(
											function (n) {
												return $elm$parser$Parser$Loop(
													A2($elm$core$List$cons, n, acc));
											}),
										$elm$parser$Parser$backtrackable(
											$danneu$html_parser$Html$Parser$node(cfg))),
										A2(
										$elm$parser$Parser$map,
										function (_v4) {
											return $elm$parser$Parser$Done(
												$elm$core$List$reverse(acc));
										},
										$elm$parser$Parser$succeed(_Utils_Tuple0))
									]));
						})))));
			}
		},
		$danneu$html_parser$Html$Parser$openTag(cfg));
};
var $danneu$html_parser$Html$Parser$node = function (cfg) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed($elm$core$Basics$identity),
			$danneu$html_parser$Html$Parser$zeroOrMore(
				$elm$parser$Parser$backtrackable($danneu$html_parser$Html$Parser$anyCloseTag))),
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$danneu$html_parser$Html$Parser$text(cfg),
					$danneu$html_parser$Html$Parser$comment,
					$danneu$html_parser$Html$Parser$element(cfg)
				])));
};
var $danneu$html_parser$Html$Parser$notNode = F2(
	function (cfg, tags) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (_v1) {
						return $danneu$html_parser$Html$Parser$element(cfg);
					},
					$danneu$html_parser$Html$Parser$lookAhead(
						A2(
							$elm$parser$Parser$andThen,
							function (_v0) {
								var tag = _v0.a;
								return A2($elm$core$List$member, tag, tags) ? $elm$parser$Parser$problem('') : $elm$parser$Parser$succeed(_Utils_Tuple0);
							},
							$danneu$html_parser$Html$Parser$openTag(cfg)))),
					$danneu$html_parser$Html$Parser$text(cfg),
					$danneu$html_parser$Html$Parser$comment
				]));
	});
var $danneu$html_parser$Html$Parser$parseAll = function (cfg) {
	return A2(
		$elm$parser$Parser$loop,
		_List_Nil,
		function (acc) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						A2(
						$elm$parser$Parser$map,
						function (n) {
							return $elm$parser$Parser$Loop(
								A2($elm$core$List$cons, n, acc));
						},
						$danneu$html_parser$Html$Parser$node(cfg)),
						A2(
						$elm$parser$Parser$map,
						function (_v0) {
							return $elm$parser$Parser$Done(
								$elm$core$List$reverse(acc));
						},
						$elm$parser$Parser$succeed(_Utils_Tuple0))
					]));
		});
};
var $danneu$html_parser$Html$Parser$run = F2(
	function (cfg, input) {
		return A2(
			$elm$parser$Parser$run,
			$danneu$html_parser$Html$Parser$parseAll(cfg),
			input);
	});
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $danneu$html_parser$Html$Parser$nodeToHtml = function (node_) {
	switch (node_.$) {
		case 'Text':
			var s = node_.a;
			return $elm$html$Html$text(s);
		case 'Comment':
			return $elm$html$Html$text('');
		default:
			var tag = node_.a;
			var attrs = node_.b;
			var kids = node_.c;
			return A3(
				$elm$html$Html$node,
				tag,
				A2(
					$elm$core$List$map,
					function (_v1) {
						var k = _v1.a;
						var v = _v1.b;
						return A2($elm$html$Html$Attributes$attribute, k, v);
					},
					attrs),
				A2($elm$core$List$map, $danneu$html_parser$Html$Parser$nodeToHtml, kids));
	}
};
var $author$project$Page$Now$viewNode = function (node) {
	switch (node.$) {
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			switch (tag) {
				case 'h3':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'font-weight:200;font-size:30px;padding:0;margin:0;margin-bottom:10px;margin-top:10px;')
										])),
								children)));
				case 'a':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'text-decoration:none;color:#52aa5e;')
										])),
								children)));
				case 'ul':
					return $author$project$Components$copy(
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$danneu$html_parser$Html$Parser$nodeToHtml(
										A3(
											$danneu$html_parser$Html$Parser$Element,
											tag,
											_Utils_ap(
												attributes,
												_List_fromArray(
													[
														_Utils_Tuple2('style', 'text-align:left;')
													])),
											children)))
								])));
				case 'li':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'text-align:left;')
										])),
								children)));
				case 'figure':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'padding:20px;background-color: #1f1f1f;border-radius:10px;max-width:100%;')
										])),
								children)));
				case 'img':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'border-radius:10px; width:100%; object-fit:cover;max-width:100%;')
										])),
								children)));
				case 'hr':
					return $author$project$Components$thematicBreak;
				case 'p':
					return $author$project$Components$copy(
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							A2(
								$elm$core$List$map,
								function (child) {
									return $mdgriffith$elm_ui$Element$html(
										$danneu$html_parser$Html$Parser$nodeToHtml(child));
								},
								children)));
				default:
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_List_fromArray(
									[
										_Utils_Tuple2('style', 'max-width:100%;')
									]),
								children)));
			}
		case 'Text':
			var content = node.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_Nil,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							$danneu$html_parser$Html$Parser$Text(content)))
					]));
		default:
			var content = node.a;
			return $mdgriffith$elm_ui$Element$text('');
	}
};
var $author$project$Page$Now$viewPage = function (now) {
	return A2(
		$author$project$Components$pageContainer,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Components$pageHeading('Now'),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_Nil,
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Border$roundEach(
								{bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10}),
								$mdgriffith$elm_ui$Element$clip
							]),
						{description: 'banner', src: 'assets/images/now-banner.jpg'})
					])),
				$author$project$Components$copy(
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$Font$alignLeft
							]),
						$author$project$Styles$defaultParagraphStyles),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('A now page inspired by the one on Derek Sivers\' website.')
						]))),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(20),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(20),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorDarker),
								$mdgriffith$elm_ui$Element$Border$rounded(10),
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Last updated ' + now.publishedDate)
									])),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$author$project$Components$link,
										{
											destination: 'https://sashinexists.com/now-archive',
											title: $elm$core$Maybe$Just('Click here for past Now pages. ')
										},
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Click here for past Now pages')
											]))
									]))
							]))
					])),
				function () {
				var _v0 = A2($danneu$html_parser$Html$Parser$run, $danneu$html_parser$Html$Parser$noCharRefs, now.content);
				if (_v0.$ === 'Ok') {
					var nodes = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$elm$core$List$map,
							function (node) {
								return $author$project$Page$Now$viewNode(node);
							},
							nodes));
				} else {
					return $mdgriffith$elm_ui$Element$text('');
				}
			}()
			]));
};
var $author$project$Components$phoneCopy = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_Utils_ap(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$justify,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
					$mdgriffith$elm_ui$Element$Font$light
				]),
			$author$project$Styles$defaultParagraphStyles),
		_List_fromArray(
			[text]));
};
var $author$project$Components$phonePageContainer = F2(
	function (attributes, elements) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_Utils_ap(
				attributes,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(20),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
						$mdgriffith$elm_ui$Element$padding(25),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					])),
			elements);
	});
var $author$project$Page$Now$viewPhoneNode = function (node) {
	switch (node.$) {
		case 'Element':
			var tag = node.a;
			var attributes = node.b;
			var children = node.c;
			switch (tag) {
				case 'h3':
					return $author$project$Components$phoneCopy(
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(20)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$danneu$html_parser$Html$Parser$nodeToHtml(
										A3(
											$danneu$html_parser$Html$Parser$Element,
											tag,
											_Utils_ap(
												attributes,
												_List_fromArray(
													[
														_Utils_Tuple2('style', 'font-weight:200;font-size:25px;padding:0;margin:0;margin-bottom:10px;margin-top:10px;max-width:100%;')
													])),
											children)))
								])));
				case 'a':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'text-decoration:none;color:#52aa5e;max-width:100%;')
										])),
								children)));
				case 'ul':
					return $author$project$Components$phoneCopy(
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(15)
								]),
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$danneu$html_parser$Html$Parser$nodeToHtml(
										A3(
											$danneu$html_parser$Html$Parser$Element,
											tag,
											_Utils_ap(
												attributes,
												_List_fromArray(
													[
														_Utils_Tuple2('style', 'text-align:left;max-width:50%;')
													])),
											children)))
								])));
				case 'li':
					return $author$project$Components$phoneCopy(
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_Nil,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$html(
									$danneu$html_parser$Html$Parser$nodeToHtml(
										A3(
											$danneu$html_parser$Html$Parser$Element,
											tag,
											_Utils_ap(
												attributes,
												_List_fromArray(
													[
														_Utils_Tuple2('style', 'text-align:left;max-width:100%;')
													])),
											children)))
								])));
				case 'figure':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'padding:20px;background-color: #1f1f1f;border-radius:10px;max-width:100%;display:none;')
										])),
								children)));
				case 'img':
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_Utils_ap(
									attributes,
									_List_fromArray(
										[
											_Utils_Tuple2('style', 'border-radius:10px; width:100%; object-fit:cover;max-width:100%;')
										])),
								children)));
				case 'hr':
					return $author$project$Components$thematicBreak;
				case 'p':
					return $author$project$Components$phoneCopy(
						A2(
							$mdgriffith$elm_ui$Element$paragraph,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							A2(
								$elm$core$List$map,
								function (child) {
									return $mdgriffith$elm_ui$Element$html(
										$danneu$html_parser$Html$Parser$nodeToHtml(child));
								},
								children)));
				default:
					return $mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							A3(
								$danneu$html_parser$Html$Parser$Element,
								tag,
								_List_fromArray(
									[
										_Utils_Tuple2('style', 'max-width:100%;')
									]),
								children)));
			}
		case 'Text':
			var content = node.a;
			return A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$html(
						$danneu$html_parser$Html$Parser$nodeToHtml(
							$danneu$html_parser$Html$Parser$Text(content)))
					]));
		default:
			var content = node.a;
			return $mdgriffith$elm_ui$Element$text('');
	}
};
var $author$project$Page$Now$viewPhonePage = function (now) {
	return A2(
		$author$project$Components$phonePageContainer,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Components$phonePageHeading('Now'),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$image,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$Border$roundEach(
								{bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10}),
								$mdgriffith$elm_ui$Element$clip
							]),
						{description: 'banner', src: 'assets/images/now-banner.jpg'})
					])),
				$author$project$Components$phoneCopy(
				A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$alignLeft,
								$mdgriffith$elm_ui$Element$Font$alignLeft
							]),
						$author$project$Styles$defaultParagraphStyles),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text('A now page inspired by the one on Derek Sivers\' website.')
						]))),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(20),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(20),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorDarker),
								$mdgriffith$elm_ui$Element$Border$rounded(10),
								$mdgriffith$elm_ui$Element$padding(20),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$text('Last updated ' + now.publishedDate)
									])),
								A2(
								$mdgriffith$elm_ui$Element$paragraph,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
									]),
								_List_fromArray(
									[
										A2(
										$author$project$Components$link,
										{
											destination: 'https://sashinexists.com/now-archive',
											title: $elm$core$Maybe$Just('Click here for past Now pages. ')
										},
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('Click here for past Now pages')
											]))
									]))
							]))
					])),
				function () {
				var _v0 = A2($danneu$html_parser$Html$Parser$run, $danneu$html_parser$Html$Parser$noCharRefs, now.content);
				if (_v0.$ === 'Ok') {
					var nodes = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(15),
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						A2(
							$elm$core$List$map,
							function (node) {
								return $author$project$Page$Now$viewPhoneNode(node);
							},
							nodes));
				} else {
					return $mdgriffith$elm_ui$Element$text('');
				}
			}()
			]));
};
var $author$project$Page$Now$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Now$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Now$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Now$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Now$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Now$view},
	$author$project$Page$single(
		{data: $author$project$Page$Now$data, head: $author$project$Page$Now$head}));
var $author$project$Page$Project$Name_$data = function (routeParams) {
	return A2(
		$dillonkearns$elm_pages$DataSource$map,
		function (projects) {
			return A2(
				$elm$core$List$filter,
				function (project) {
					return _Utils_eq(project.slug, routeParams.name);
				},
				projects);
		},
		$author$project$Projects$projects);
};
var $author$project$Page$Project$Name_$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'TODO',
				image: {
					alt: 'elm-pages logo',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('TODO')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev'
			}));
};
var $author$project$Page$Project$Name_$routes = $dillonkearns$elm_pages$DataSource$succeed(
	_List_fromArray(
		[
			{name: 'expanding-awareness'},
			{name: 'learn-kanji-radicals'},
			{name: 'learn-kanji-sounds'},
			{name: 'conversation-culture'},
			{name: 'sashinexists'},
			{name: 'better-twitter-archiver'},
			{name: 'material-shell'}
		]));
var $lattyware$elm_fontawesome$FontAwesome$Brands$Definitions$github = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fab',
	'github',
	_Utils_Tuple2(496, 512),
	_Utils_Tuple2('M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Brands$github = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Brands$Definitions$github);
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$globe = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'globe',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M352 256C352 278.2 350.8 299.6 348.7 320H163.3C161.2 299.6 159.1 278.2 159.1 256C159.1 233.8 161.2 212.4 163.3 192H348.7C350.8 212.4 352 233.8 352 256zM503.9 192C509.2 212.5 512 233.9 512 256C512 278.1 509.2 299.5 503.9 320H380.8C382.9 299.4 384 277.1 384 256C384 234 382.9 212.6 380.8 192H503.9zM493.4 160H376.7C366.7 96.14 346.9 42.62 321.4 8.442C399.8 29.09 463.4 85.94 493.4 160zM344.3 160H167.7C173.8 123.6 183.2 91.38 194.7 65.35C205.2 41.74 216.9 24.61 228.2 13.81C239.4 3.178 248.7 0 256 0C263.3 0 272.6 3.178 283.8 13.81C295.1 24.61 306.8 41.74 317.3 65.35C328.8 91.38 338.2 123.6 344.3 160H344.3zM18.61 160C48.59 85.94 112.2 29.09 190.6 8.442C165.1 42.62 145.3 96.14 135.3 160H18.61zM131.2 192C129.1 212.6 127.1 234 127.1 256C127.1 277.1 129.1 299.4 131.2 320H8.065C2.8 299.5 0 278.1 0 256C0 233.9 2.8 212.5 8.065 192H131.2zM194.7 446.6C183.2 420.6 173.8 388.4 167.7 352H344.3C338.2 388.4 328.8 420.6 317.3 446.6C306.8 470.3 295.1 487.4 283.8 498.2C272.6 508.8 263.3 512 255.1 512C248.7 512 239.4 508.8 228.2 498.2C216.9 487.4 205.2 470.3 194.7 446.6H194.7zM190.6 503.6C112.2 482.9 48.59 426.1 18.61 352H135.3C145.3 415.9 165.1 469.4 190.6 503.6V503.6zM321.4 503.6C346.9 469.4 366.7 415.9 376.7 352H493.4C463.4 426.1 399.8 482.9 321.4 503.6V503.6z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$globe = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$globe);
var $author$project$Components$pageSubHeading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.subHeading),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 10, left: 0, right: 0, top: 0})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Components$buttonLabel = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.button),
				$mdgriffith$elm_ui$Element$Font$light
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $mdgriffith$elm_ui$Element$spaceEvenly = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$spacing, $mdgriffith$elm_ui$Internal$Style$classes.spaceEvenly);
var $author$project$Page$Project$Name_$viewProjectButton = F3(
	function (title, url, icon) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(20),
					$mdgriffith$elm_ui$Element$spaceEvenly,
					$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
						]))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						]),
					_List_fromArray(
						[
							icon,
							$author$project$Components$buttonLabel(title)
						])),
				url: url
			});
	});
var $author$project$Page$Project$Name_$viewProjectDetails = function (details) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30),
						$mdgriffith$elm_ui$Element$padding(20)
					]),
				function () {
					var _v0 = $author$project$MarkdownRendering$markdownView(details);
					if (_v0.$ === 'Ok') {
						var rendered = _v0.a;
						return A2(
							$elm$core$List$map,
							function (p) {
								return A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_Utils_ap(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$justify,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.copy),
												$mdgriffith$elm_ui$Element$Font$light
											]),
										$author$project$Styles$defaultParagraphStyles),
									_List_fromArray(
										[p]));
							},
							rendered);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('failed to render markdown')
							]);
					}
				}())
			]));
};
var $author$project$Page$Project$Name_$viewProjectImage = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$Border$roundEach(
						{bottomLeft: 10, bottomRight: 10, topLeft: 10, topRight: 10}),
						$mdgriffith$elm_ui$Element$clip
					]),
				{description: project.description, src: project.screenshotUrl})
			]));
};
var $author$project$Page$Project$Name_$viewProjectPage = function (project) {
	return A2(
		$author$project$Components$pageContainer,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Components$pageHeading(project.title),
				$author$project$Components$pageSubHeading(project.description),
				$author$project$Page$Project$Name_$viewProjectImage(project),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(50),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				_List_fromArray(
					[
						A3(
						$author$project$Page$Project$Name_$viewProjectButton,
						'View on GitHub',
						project.gitHubUrl,
						A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Brands$github, 25)),
						A3(
						$author$project$Page$Project$Name_$viewProjectButton,
						'View Project Online',
						project.websiteUrl,
						A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$globe, 25))
					])),
				$author$project$Page$Project$Name_$viewProjectDetails(project.about),
				$author$project$Components$heading('Skills'),
				$author$project$Common$viewStack(project.skills),
				function () {
				var _v0 = project.testimonial;
				if (_v0.$ === 'Just') {
					var testimonial = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(20)
							]),
						_List_fromArray(
							[
								$author$project$Components$heading('Testimonial'),
								$author$project$Common$viewTestimonial(testimonial)
							]));
				} else {
					return $mdgriffith$elm_ui$Element$text('');
				}
			}()
			]));
};
var $author$project$Page$Project$Name_$viewContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
		_List_fromArray(
			[
				function () {
				var _v0 = $elm$core$List$head(content);
				if (_v0.$ === 'Just') {
					var project = _v0.a;
					return $author$project$Page$Project$Name_$viewProjectPage(project);
				} else {
					return $mdgriffith$elm_ui$Element$text('Something went wrong here.');
				}
			}()
			]));
};
var $author$project$Page$Project$Name_$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Project$Name_$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Components$phoneSubHeading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.subHeading),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$center,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 10})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Components$phoneButtonLabel = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.button),
				$mdgriffith$elm_ui$Element$Font$light
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Page$Project$Name_$viewPhoneProjectButton = F3(
	function (title, url, icon) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(20),
					$mdgriffith$elm_ui$Element$spaceEvenly,
					$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
						]))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						]),
					_List_fromArray(
						[
							icon,
							$author$project$Components$phoneButtonLabel(title)
						])),
				url: url
			});
	});
var $author$project$Page$Project$Name_$viewPhoneProjectDetails = function (details) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30),
						$mdgriffith$elm_ui$Element$padding(20)
					]),
				function () {
					var _v0 = $author$project$MarkdownRendering$markdownView(details);
					if (_v0.$ === 'Ok') {
						var rendered = _v0.a;
						return A2(
							$elm$core$List$map,
							function (p) {
								return A2(
									$mdgriffith$elm_ui$Element$paragraph,
									_Utils_ap(
										_List_fromArray(
											[
												$mdgriffith$elm_ui$Element$Font$justify,
												$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
												$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
												$mdgriffith$elm_ui$Element$Font$light
											]),
										$author$project$Styles$defaultParagraphStyles),
									_List_fromArray(
										[p]));
							},
							rendered);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('failed to render markdown')
							]);
					}
				}())
			]));
};
var $author$project$Page$Project$Name_$viewPhoneProjectPage = function (project) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Components$phonePageHeading(project.title),
				$author$project$Components$phoneSubHeading(project.description),
				$author$project$Page$Project$Name_$viewProjectImage(project),
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY
					]),
				_List_fromArray(
					[
						A3(
						$author$project$Page$Project$Name_$viewPhoneProjectButton,
						'View on GitHub',
						project.gitHubUrl,
						A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Brands$github, 25)),
						A3(
						$author$project$Page$Project$Name_$viewPhoneProjectButton,
						'View Project Online',
						project.websiteUrl,
						A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$globe, 25))
					])),
				$author$project$Page$Project$Name_$viewPhoneProjectDetails(project.about),
				$author$project$Components$phoneHeading('Skills'),
				function () {
				var _v0 = project.testimonial;
				if (_v0.$ === 'Just') {
					var testimonial = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$column,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(20),
								$mdgriffith$elm_ui$Element$centerX,
								$mdgriffith$elm_ui$Element$centerY,
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
								$mdgriffith$elm_ui$Element$Border$roundEach(
								{bottomLeft: 10, bottomRight: 10, topLeft: 0, topRight: 0}),
								$mdgriffith$elm_ui$Element$padding(20)
							]),
						_List_fromArray(
							[
								$author$project$Components$phoneHeading('Testimonial'),
								$author$project$Common$viewPhoneTestimonial(testimonial)
							]));
				} else {
					return $mdgriffith$elm_ui$Element$text('');
				}
			}()
			]));
};
var $author$project$Page$Project$Name_$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				function () {
				var _v0 = $elm$core$List$head(content);
				if (_v0.$ === 'Just') {
					var project = _v0.a;
					return $author$project$Page$Project$Name_$viewPhoneProjectPage(project);
				} else {
					return $mdgriffith$elm_ui$Element$text('Something went wrong here.');
				}
			}()
			]));
};
var $author$project$Page$Project$Name_$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Project$Name_$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Project$Name_$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Project$Name_$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Project$Name_$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Project$Name_$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Project$Name_$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Project$Name_$view},
	$author$project$Page$prerender(
		{data: $author$project$Page$Project$Name_$data, head: $author$project$Page$Project$Name_$head, routes: $author$project$Page$Project$Name_$routes}));
var $author$project$Page$Projects$data = $author$project$Projects$projects;
var $author$project$Page$Projects$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Projects'
			}));
};
var $author$project$Page$Projects$viewContent = function (content) {
	return A2(
		$author$project$Components$pageContainer,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Components$pageHeading('Past Work'),
				$author$project$Common$viewProjects(content)
			]));
};
var $author$project$Page$Projects$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Projects$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Projects$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Components$phoneHeading('Past Work'),
				$author$project$Common$viewPhoneProjects(content)
			]));
};
var $author$project$Page$Projects$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Projects$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Projects$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Projects$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Projects$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Projects$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Projects$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Projects$view},
	$author$project$Page$single(
		{data: $author$project$Page$Projects$data, head: $author$project$Page$Projects$head}));
var $author$project$Page$Skill$Name_$data = function (routeParams) {
	return A2(
		$dillonkearns$elm_pages$DataSource$map,
		function (skills) {
			return A2(
				$elm$core$List$filter,
				function (skill) {
					return _Utils_eq(skill.slug, routeParams.name);
				},
				skills);
		},
		$author$project$Skills$skills);
};
var $author$project$Page$Skill$Name_$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — ' + A2(
					$elm$core$Maybe$withDefault,
					{about: 'error', description: 'error', id: 'not found', name: 'none', slug: 'notfound', thumbnail: 'none', website: 'Not found'},
					$elm$core$List$head(_static.data)).name
			}));
};
var $author$project$Page$Skill$Name_$routes = $dillonkearns$elm_pages$DataSource$succeed(
	_List_fromArray(
		[
			{name: 'git'},
			{name: 'ghost'},
			{name: 'obsidian'},
			{name: 'github'},
			{name: 'sqlite'},
			{name: 'postgresql'},
			{name: 'sass'},
			{name: 'iced'},
			{name: 'rust'},
			{name: 'elm'}
		]));
var $author$project$Page$Skill$Name_$viewSkillIcon = function (skill) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(50)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 10, left: 0, right: 0, top: 10})
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40))
					]),
				{description: skill.name, src: skill.thumbnail}),
			url: '/skill/' + skill.slug
		});
};
var $author$project$Common$viewWebsiteButton = F3(
	function (title, url, icon) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(20),
					$mdgriffith$elm_ui$Element$spaceEvenly,
					$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
						]))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						]),
					_List_fromArray(
						[
							icon,
							$author$project$Components$buttonLabel(title)
						])),
				url: url
			});
	});
var $author$project$Page$Skill$Name_$viewSkillPage = function (skill) {
	return A2(
		$author$project$Components$pageContainer,
		_List_Nil,
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$centerY
					]),
				_List_fromArray(
					[
						$author$project$Page$Skill$Name_$viewSkillIcon(skill),
						$author$project$Components$pageHeading(skill.name)
					])),
				$author$project$Components$pageSubHeading(skill.description),
				A3(
				$author$project$Common$viewWebsiteButton,
				'Go to ' + (skill.name + ' Website'),
				skill.website,
				A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$globe, 25)),
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_Nil,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(skill.about)
					]))
			]));
};
var $author$project$Page$Skill$Name_$viewContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
		_List_fromArray(
			[
				function () {
				var _v0 = $elm$core$List$head(content);
				if (_v0.$ === 'Just') {
					var skill = _v0.a;
					return $author$project$Page$Skill$Name_$viewSkillPage(skill);
				} else {
					return $mdgriffith$elm_ui$Element$text('');
				}
			}()
			]));
};
var $author$project$Page$Skill$Name_$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Skill$Name_$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Skill$Name_$viewPhoneSkillIcon = function (skill) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(50)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 10, left: 0, right: 0, top: 10})
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40))
					]),
				{description: skill.name, src: skill.thumbnail}),
			url: '/skill/' + skill.slug
		});
};
var $author$project$Page$Skill$Name_$viewPhoneSkillPage = function (skill) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$centerY
					]),
				_List_fromArray(
					[
						$author$project$Page$Skill$Name_$viewPhoneSkillIcon(skill),
						$author$project$Components$pageHeading(skill.name)
					])),
				$author$project$Components$pageSubHeading(skill.description),
				A3(
				$author$project$Common$viewWebsiteButton,
				'Go to ' + (skill.name + ' Website'),
				skill.website,
				A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$globe, 25)),
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$justify,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
							$mdgriffith$elm_ui$Element$Font$light
						]),
					$author$project$Styles$defaultParagraphStyles),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(skill.about)
					]))
			]));
};
var $author$project$Page$Skill$Name_$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				function () {
				var _v0 = $elm$core$List$head(content);
				if (_v0.$ === 'Just') {
					var skill = _v0.a;
					return $author$project$Page$Skill$Name_$viewPhoneSkillPage(skill);
				} else {
					return $mdgriffith$elm_ui$Element$text('');
				}
			}()
			]));
};
var $author$project$Page$Skill$Name_$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Skill$Name_$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Skill$Name_$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Skill$Name_$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Skill$Name_$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Skill$Name_$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Skill$Name_$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Skill$Name_$view},
	$author$project$Page$prerender(
		{data: $author$project$Page$Skill$Name_$data, head: $author$project$Page$Skill$Name_$head, routes: $author$project$Page$Skill$Name_$routes}));
var $author$project$Page$Skills$data = $author$project$Skills$skills;
var $author$project$Page$Skills$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Skills'
			}));
};
var $author$project$Page$Skills$buttonHeading = function (text) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.heading),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 0, left: 0, right: 0, top: 0})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(text)
			]));
};
var $author$project$Page$Skills$viewSkillIcon = function (skill) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(50)),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 10, left: 0, right: 0, top: 10})
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$image,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$centerX,
						$mdgriffith$elm_ui$Element$centerY,
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(40)),
						$mdgriffith$elm_ui$Element$width(
						$mdgriffith$elm_ui$Element$px(40))
					]),
				{description: skill.name, src: skill.thumbnail}),
			url: '/skill/' + skill.slug
		});
};
var $author$project$Page$Skills$viewSkillSummary = function (skill) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(10),
						$mdgriffith$elm_ui$Element$padding(20),
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$Font$alignLeft
					]),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$spacing(10),
								$mdgriffith$elm_ui$Element$centerY
							]),
						_List_fromArray(
							[
								$author$project$Page$Skills$viewSkillIcon(skill),
								$author$project$Page$Skills$buttonHeading(skill.name)
							])),
						$author$project$Components$buttonLabel(skill.description)
					])),
			url: '/skill/' + skill.slug
		});
};
var $author$project$Page$Skills$viewSkills = function (skills) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$elm$core$List$map,
			function (skill) {
				return $author$project$Page$Skills$viewSkillSummary(skill);
			},
			skills));
};
var $author$project$Page$Skills$viewContent = function (content) {
	return A2(
		$author$project$Components$pageContainer,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Components$pageHeading('Skills'),
				$author$project$Common$viewStack(content),
				$author$project$Page$Skills$viewSkills(content)
			]));
};
var $author$project$Page$Skills$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Skills$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Skills$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Components$phonePageHeading('Skills'),
				$author$project$Page$Skills$viewSkills(content)
			]));
};
var $author$project$Page$Skills$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Skills$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Skills$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Skills$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Skills$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Skills$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Skills$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Skills$view},
	$author$project$Page$single(
		{data: $author$project$Page$Skills$data, head: $author$project$Page$Skills$head}));
var $author$project$BlogPosts$blogPostsWithTag = function (tag) {
	return A2(
		$dillonkearns$elm_pages$DataSource$Http$get,
		$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=blog&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=-sys.createdAt&metadata.tags.sys.id[in]=' + tag),
		$author$project$BlogPosts$decodeBlogPosts);
};
var $author$project$Page$Tag$Name_$data = function (routeParams) {
	return $author$project$BlogPosts$blogPostsWithTag(routeParams.name);
};
var $author$project$Page$Tag$Name_$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Tag — ' + _static.routeParams.name
			}));
};
var $author$project$Page$Tag$Name_$RouteParams = function (name) {
	return {name: name};
};
var $author$project$Page$Tag$Name_$decodeTag = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$map,
	$author$project$Page$Tag$Name_$RouteParams,
	A2(
		$dillonkearns$elm_pages$OptimizedDecoder$field,
		'sys',
		A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'id', $dillonkearns$elm_pages$OptimizedDecoder$string)));
var $author$project$Page$Tag$Name_$decodeTags = A2(
	$dillonkearns$elm_pages$OptimizedDecoder$field,
	'items',
	$dillonkearns$elm_pages$OptimizedDecoder$list($author$project$Page$Tag$Name_$decodeTag));
var $author$project$Page$Tag$Name_$routes = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/tags?access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU'),
	$author$project$Page$Tag$Name_$decodeTags);
var $author$project$Page$Tag$Name_$viewBlogPostDate = function (date) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$alignRight,
				$mdgriffith$elm_ui$Element$Font$size(12)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function () {
					var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date);
					if (_v0.$ === 'Ok') {
						var formattedDate = _v0.a;
						return $author$project$DateTime$formatPosixDate(formattedDate);
					} else {
						return 'bad date';
					}
				}())
			]));
};
var $author$project$Page$Tag$Name_$slugToTitle = function (slug) {
	return $elm_community$string_extra$String$Extra$toTitleCase(
		$elm_community$string_extra$String$Extra$humanize(slug));
};
var $author$project$Page$Tag$Name_$viewBlogPostTag = function (tag) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(12)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Tag$Name_$slugToTitle(tag))
					])),
			url: '/tag/' + tag
		});
};
var $author$project$Page$Tag$Name_$viewBlogPostTags = function (tags) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		A2($elm$core$List$map, $author$project$Page$Tag$Name_$viewBlogPostTag, tags));
};
var $author$project$Page$Tag$Name_$viewBlogPostTitle = F2(
	function (title, slug) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
						]))
				]),
			{
				label: $author$project$Components$pageHeading(title),
				url: '/blog/' + slug
			});
	});
var $author$project$Page$Tag$Name_$viewBlogPostHeader = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2($author$project$Page$Tag$Name_$viewBlogPostTitle, post.title, post.slug),
						$author$project$Page$Tag$Name_$viewBlogPostDate(post.createdAt)
					])),
				$author$project$Page$Tag$Name_$viewBlogPostTags(post.tags)
			]));
};
var $author$project$Page$Tag$Name_$viewBlogPost = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$Font$size(16)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_List_fromArray(
					[
						$author$project$Page$Tag$Name_$viewBlogPostHeader(post),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(40)
									]),
								function () {
									var _v0 = $author$project$MarkdownRendering$markdownView(post.content);
									if (_v0.$ === 'Ok') {
										var rendered = _v0.a;
										return A2(
											$elm$core$List$map,
											function (p) {
												return A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$spacing(20)
														]),
													p);
											},
											_List_fromArray(
												[rendered]));
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('failed to render markdown')
											]);
									}
								}())
							]))
					]))
			]));
};
var $author$project$Page$Tag$Name_$viewBlogPosts = function (posts) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		A2($elm$core$List$map, $author$project$Page$Tag$Name_$viewBlogPost, posts));
};
var $author$project$Page$Tag$Name_$viewTagPageTitle = function (routeParams) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(30),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 5, left: 20, right: 20, top: 15})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('Posts where I\'ve written about '),
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Tag$Name_$slugToTitle(routeParams.name))
					]))
			]));
};
var $author$project$Page$Tag$Name_$viewContent = F2(
	function (content, routeParams) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(768))
				]),
			_List_fromArray(
				[
					$author$project$Page$Tag$Name_$viewTagPageTitle(routeParams),
					$author$project$Page$Tag$Name_$viewBlogPosts(content)
				]));
	});
var $author$project$Page$Tag$Name_$viewPage = F2(
	function (content, routeParams) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2($author$project$Page$Tag$Name_$viewContent, content, routeParams),
					$author$project$Common$viewFooter
				]));
	});
var $author$project$Page$Tag$Name_$viewPhoneBlogPostDate = function (date) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(10),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function () {
					var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date);
					if (_v0.$ === 'Ok') {
						var formattedDate = _v0.a;
						return $author$project$DateTime$formatPosixDate(formattedDate);
					} else {
						return 'bad date';
					}
				}())
			]));
};
var $author$project$Page$Tag$Name_$viewPhoneBlogPostTag = function (tag) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(10)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Tag$Name_$slugToTitle(tag))
					])),
			url: '/tag/' + tag
		});
};
var $author$project$Page$Tag$Name_$viewPhoneBlogPostTags = function (tags) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		A2($elm$core$List$map, $author$project$Page$Tag$Name_$viewPhoneBlogPostTag, tags));
};
var $author$project$Page$Tag$Name_$viewPhoneBlogPostTitle = F2(
	function (title, slug) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkColor),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
						])),
					$mdgriffith$elm_ui$Element$Font$center
				]),
			{
				label: $author$project$Components$phonePageHeading(title),
				url: '/blog/' + slug
			});
	});
var $author$project$Page$Tag$Name_$viewPhoneBlogPostHeader = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				A2($author$project$Page$Tag$Name_$viewPhoneBlogPostTitle, post.title, post.slug),
				$author$project$Page$Tag$Name_$viewPhoneBlogPostDate(post.createdAt),
				$author$project$Page$Tag$Name_$viewPhoneBlogPostTags(post.tags)
			]));
};
var $author$project$Page$Tag$Name_$viewPhoneBlogPost = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$Font$size(16)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_List_fromArray(
					[
						$author$project$Page$Tag$Name_$viewPhoneBlogPostHeader(post),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(40)
									]),
								function () {
									var _v0 = $author$project$MarkdownRendering$markdownView(post.content);
									if (_v0.$ === 'Ok') {
										var rendered = _v0.a;
										return A2(
											$elm$core$List$map,
											function (p) {
												return A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_Utils_ap(
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$justify,
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
																$mdgriffith$elm_ui$Element$Font$light
															]),
														$author$project$Styles$defaultParagraphStyles),
													_List_fromArray(
														[p]));
											},
											rendered);
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('failed to render markdown')
											]);
									}
								}())
							]))
					]))
			]));
};
var $author$project$Page$Tag$Name_$viewPhoneBlogPosts = function (posts) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		A2($elm$core$List$map, $author$project$Page$Tag$Name_$viewPhoneBlogPost, posts));
};
var $author$project$Page$Tag$Name_$viewPhoneTagPageTitle = function (routeParams) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(20),
				$mdgriffith$elm_ui$Element$Font$extraLight,
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$paddingEach(
				{bottom: 5, left: 20, right: 20, top: 15})
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text('Posts where I\'ve written about '),
				A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Tag$Name_$slugToTitle(routeParams.name))
					]))
			]));
};
var $author$project$Page$Tag$Name_$viewPhoneContent = F2(
	function (content, routeParams) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(20),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY
				]),
			_List_fromArray(
				[
					$author$project$Page$Tag$Name_$viewPhoneTagPageTitle(routeParams),
					$author$project$Page$Tag$Name_$viewPhoneBlogPosts(content)
				]));
	});
var $author$project$Page$Tag$Name_$viewPhonePage = F2(
	function (content, routeParams) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
				]),
			_List_fromArray(
				[
					A2($author$project$Page$Tag$Name_$viewPhoneContent, content, routeParams),
					$author$project$Common$viewFooter
				]));
	});
var $author$project$Page$Tag$Name_$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return A2($author$project$Page$Tag$Name_$viewPage, _static.data, _static.routeParams);
						case 'Phone':
							return A2($author$project$Page$Tag$Name_$viewPhonePage, _static.data, _static.routeParams);
						default:
							return A2($author$project$Page$Tag$Name_$viewPage, _static.data, _static.routeParams);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Tag$Name_$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Tag$Name_$view},
	$author$project$Page$prerender(
		{data: $author$project$Page$Tag$Name_$data, head: $author$project$Page$Tag$Name_$head, routes: $author$project$Page$Tag$Name_$routes}));
var $author$project$Page$Testimonial$Name_$data = function (routeParams) {
	return A2(
		$dillonkearns$elm_pages$DataSource$map,
		function (testimonials) {
			return A2(
				$elm$core$List$filter,
				function (testimonial) {
					return _Utils_eq(testimonial.slug, routeParams.name);
				},
				testimonials);
		},
		$author$project$Testimonials$testimonials);
};
var $author$project$Page$Testimonial$Name_$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Testimonial — ' + _static.routeParams.name
			}));
};
var $author$project$Page$Testimonial$Name_$routes = $dillonkearns$elm_pages$DataSource$succeed(
	_List_fromArray(
		[
			{name: 'david-kedmey'},
			{name: 'michael-ashcroft'}
		]));
var $author$project$Page$Testimonial$Name_$viewContent = function (content) {
	return A2(
		$author$project$Components$pageContainer,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Components$pageHeading('Testimonial'),
				$author$project$Common$viewTestimonials(content)
			]));
};
var $author$project$Page$Testimonial$Name_$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Testimonial$Name_$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Testimonial$Name_$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Components$phonePageHeading('Testimonial'),
				$author$project$Common$viewPhoneTestimonials(content)
			]));
};
var $author$project$Page$Testimonial$Name_$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Testimonial$Name_$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Testimonial$Name_$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Testimonial$Name_$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Testimonial$Name_$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Testimonial$Name_$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Testimonial$Name_$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Testimonial$Name_$view},
	$author$project$Page$prerender(
		{data: $author$project$Page$Testimonial$Name_$data, head: $author$project$Page$Testimonial$Name_$head, routes: $author$project$Page$Testimonial$Name_$routes}));
var $author$project$Page$Testimonials$data = $author$project$Testimonials$testimonials;
var $author$project$Page$Testimonials$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Testimonials'
			}));
};
var $author$project$Page$Testimonials$viewContent = function (content) {
	return A2(
		$author$project$Components$pageContainer,
		_List_Nil,
		_List_fromArray(
			[
				$author$project$Components$pageHeading('Testimonials'),
				$author$project$Common$viewTestimonials(content)
			]));
};
var $author$project$Page$Testimonials$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Testimonials$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Testimonials$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(20)
			]),
		_List_fromArray(
			[
				$author$project$Components$phoneHeading('Testimonials'),
				$author$project$Common$viewPhoneTestimonials(content)
			]));
};
var $author$project$Page$Testimonials$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Testimonials$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Testimonials$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Testimonials$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Testimonials$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Testimonials$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Testimonials$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Testimonials$view},
	$author$project$Page$single(
		{data: $author$project$Page$Testimonials$data, head: $author$project$Page$Testimonials$head}));
var $author$project$BlogPosts$blogPosts = A2(
	$dillonkearns$elm_pages$DataSource$Http$get,
	$dillonkearns$elm_pages$Pages$Secrets$succeed('https://cdn.contentful.com/spaces/gh3negosphjh/environments/master/entries?content_type=blog&access_token=TY_E9VvxnyO2jK19-khEq6VbH_eqaDepbu4TzXGUNZU&order=-sys.createdAt'),
	$author$project$BlogPosts$decodeBlogPosts);
var $author$project$Page$Writing$data = $author$project$BlogPosts$blogPosts;
var $author$project$Page$Writing$head = function (_static) {
	return $dillonkearns$elm_pages$Head$Seo$website(
		$dillonkearns$elm_pages$Head$Seo$summary(
			{
				canonicalUrlOverride: $elm$core$Maybe$Nothing,
				description: 'Crafting Software that just works',
				image: {
					alt: 'Sashin Dev',
					dimensions: $elm$core$Maybe$Nothing,
					mimeType: $elm$core$Maybe$Nothing,
					url: $dillonkearns$elm_pages$Pages$Url$external('/assets/images/seo-image.png')
				},
				locale: $elm$core$Maybe$Nothing,
				siteName: 'Sashin Dev',
				title: 'Sashin Dev — Writing'
			}));
};
var $author$project$Page$Writing$viewBlogPostDate = function (date) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$alignRight,
				$mdgriffith$elm_ui$Element$Font$size(12)
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function () {
					var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date);
					if (_v0.$ === 'Ok') {
						var formattedDate = _v0.a;
						return $author$project$DateTime$formatPosixDate(formattedDate);
					} else {
						return 'bad date';
					}
				}())
			]));
};
var $author$project$Page$Writing$slugToTitle = function (slug) {
	return $elm_community$string_extra$String$Extra$toTitleCase(
		$elm_community$string_extra$String$Extra$humanize(slug));
};
var $author$project$Page$Writing$viewBlogPostTag = function (tag) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(12)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Writing$slugToTitle(tag))
					])),
			url: '/tag/' + tag
		});
};
var $author$project$Page$Writing$viewBlogPostTags = function (tags) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		A2($elm$core$List$map, $author$project$Page$Writing$viewBlogPostTag, tags));
};
var $author$project$Page$Writing$viewBlogPostTitle = F2(
	function (title, slug) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
						]))
				]),
			{
				label: $author$project$Components$pageHeading(title),
				url: '/blog/' + slug
			});
	});
var $author$project$Page$Writing$viewBlogPostHeader = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				_List_fromArray(
					[
						A2($author$project$Page$Writing$viewBlogPostTitle, post.title, post.slug),
						$author$project$Page$Writing$viewBlogPostDate(post.createdAt)
					])),
				$author$project$Page$Writing$viewBlogPostTags(post.tags)
			]));
};
var $author$project$Page$Writing$viewBlogPost = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$Border$rounded(10),
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$Font$size(16)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_List_fromArray(
					[
						$author$project$Page$Writing$viewBlogPostHeader(post),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(40)
									]),
								function () {
									var _v0 = $author$project$MarkdownRendering$markdownView(post.content);
									if (_v0.$ === 'Ok') {
										var rendered = _v0.a;
										return A2(
											$elm$core$List$map,
											function (p) {
												return A2(
													$mdgriffith$elm_ui$Element$column,
													_List_fromArray(
														[
															$mdgriffith$elm_ui$Element$spacing(20)
														]),
													p);
											},
											_List_fromArray(
												[rendered]));
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('failed to render markdown')
											]);
									}
								}())
							]))
					]))
			]));
};
var $author$project$Page$Writing$viewBlogPosts = function (posts) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		A2($elm$core$List$map, $author$project$Page$Writing$viewBlogPost, posts));
};
var $author$project$Page$Writing$intro = 'Below is my blog on all things software and technology related.\n\n\nIf you would rather read my main body of work on science, philosophy, politics and more please click the button below to visit my main website.';
var $author$project$Page$Writing$viewIntro = A2(
	$author$project$Components$pageContainer,
	_List_Nil,
	_List_fromArray(
		[
			$author$project$Components$pageHeading('Writing'),
			function () {
			var _v0 = $author$project$MarkdownRendering$markdownView($author$project$Page$Writing$intro);
			if (_v0.$ === 'Ok') {
				var rendered = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(20),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 15, left: 0, right: 0, top: 10})
						]),
					A2(
						$elm$core$List$map,
						function (p) {
							return $author$project$Components$copy(p);
						},
						rendered));
			} else {
				return $mdgriffith$elm_ui$Element$text('');
			}
		}(),
			A3(
			$author$project$Common$viewWebsiteButton,
			'Go to the Sashin Exists Website',
			'https://sashinexists.com',
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$globe, 25))
		]));
var $author$project$Page$Writing$viewContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(768))
			]),
		_List_fromArray(
			[
				$author$project$Page$Writing$viewIntro,
				$author$project$Page$Writing$viewBlogPosts(content)
			]));
};
var $author$project$Page$Writing$viewPage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Writing$viewContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Writing$viewPhoneBlogPostDate = function (date) {
	return A2(
		$mdgriffith$elm_ui$Element$paragraph,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size(10),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$text(
				function () {
					var _v0 = $rtfeldman$elm_iso8601_date_strings$Iso8601$toTime(date);
					if (_v0.$ === 'Ok') {
						var formattedDate = _v0.a;
						return $author$project$DateTime$formatPosixDate(formattedDate);
					} else {
						return 'bad date';
					}
				}())
			]));
};
var $author$project$Page$Writing$viewPhoneBlogPostTag = function (tag) {
	return A2(
		$mdgriffith$elm_ui$Element$link,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseOver(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
					])),
				$mdgriffith$elm_ui$Element$padding(10),
				$mdgriffith$elm_ui$Element$Border$rounded(5),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter)
			]),
		{
			label: A2(
				$mdgriffith$elm_ui$Element$paragraph,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(10)
					]),
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$text(
						$author$project$Page$Writing$slugToTitle(tag))
					])),
			url: '/tag/' + tag
		});
};
var $author$project$Page$Writing$viewPhoneBlogPostTags = function (tags) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(10)
			]),
		A2($elm$core$List$map, $author$project$Page$Writing$viewPhoneBlogPostTag, tags));
};
var $author$project$Page$Writing$viewPhoneBlogPostTitle = F2(
	function (title, slug) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkColor),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontLinkHoverColor)
						])),
					$mdgriffith$elm_ui$Element$Font$center
				]),
			{
				label: $author$project$Components$phonePageHeading(title),
				url: '/blog/' + slug
			});
	});
var $author$project$Page$Writing$viewPhoneBlogPostHeader = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				A2($author$project$Page$Writing$viewPhoneBlogPostTitle, post.title, post.slug),
				$author$project$Page$Writing$viewPhoneBlogPostDate(post.createdAt),
				$author$project$Page$Writing$viewPhoneBlogPostTags(post.tags)
			]));
};
var $author$project$Page$Writing$viewPhoneBlogPost = function (post) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(50),
				$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor),
				$mdgriffith$elm_ui$Element$padding(40),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$Font$alignLeft,
				$mdgriffith$elm_ui$Element$Font$size(16)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						$mdgriffith$elm_ui$Element$spacing(30)
					]),
				_List_fromArray(
					[
						$author$project$Page$Writing$viewPhoneBlogPostHeader(post),
						A2(
						$mdgriffith$elm_ui$Element$row,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
							]),
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
										$mdgriffith$elm_ui$Element$spacing(40)
									]),
								function () {
									var _v0 = $author$project$MarkdownRendering$markdownView(post.content);
									if (_v0.$ === 'Ok') {
										var rendered = _v0.a;
										return A2(
											$elm$core$List$map,
											function (p) {
												return A2(
													$mdgriffith$elm_ui$Element$paragraph,
													_Utils_ap(
														_List_fromArray(
															[
																$mdgriffith$elm_ui$Element$Font$justify,
																$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
																$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.copy),
																$mdgriffith$elm_ui$Element$Font$light
															]),
														$author$project$Styles$defaultParagraphStyles),
													_List_fromArray(
														[p]));
											},
											rendered);
									} else {
										return _List_fromArray(
											[
												$mdgriffith$elm_ui$Element$text('failed to render markdown')
											]);
									}
								}())
							]))
					]))
			]));
};
var $author$project$Page$Writing$viewPhoneBlogPosts = function (posts) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(30)
			]),
		A2($elm$core$List$map, $author$project$Page$Writing$viewPhoneBlogPost, posts));
};
var $author$project$Common$viewPhoneWebsiteButton = F3(
	function (title, url, icon) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$padding(20),
					$mdgriffith$elm_ui$Element$spaceEvenly,
					$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
					$mdgriffith$elm_ui$Element$Border$rounded(10),
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.componentHoverColor)
						]))
				]),
			{
				label: A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(10),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$centerX,
							$mdgriffith$elm_ui$Element$centerY
						]),
					_List_fromArray(
						[
							icon,
							$author$project$Components$phoneButtonLabel(title)
						])),
				url: url
			});
	});
var $author$project$Page$Writing$viewPhoneIntro = A2(
	$author$project$Components$phonePageContainer,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColor)
		]),
	_List_fromArray(
		[
			$author$project$Components$phonePageHeading('Writing'),
			function () {
			var _v0 = $author$project$MarkdownRendering$markdownView($author$project$Page$Writing$intro);
			if (_v0.$ === 'Ok') {
				var rendered = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$column,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$spacing(20),
							$mdgriffith$elm_ui$Element$paddingEach(
							{bottom: 15, left: 0, right: 0, top: 10})
						]),
					A2(
						$elm$core$List$map,
						function (p) {
							return $author$project$Components$phoneCopy(p);
						},
						rendered));
			} else {
				return $mdgriffith$elm_ui$Element$text('');
			}
		}(),
			A3(
			$author$project$Common$viewPhoneWebsiteButton,
			'Go to the Sashin Exists Website',
			'https://sashinexists.com',
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$globe, 25))
		]));
var $author$project$Page$Writing$viewPhoneContent = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(20),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY
			]),
		_List_fromArray(
			[
				$author$project$Page$Writing$viewPhoneIntro,
				$author$project$Page$Writing$viewPhoneBlogPosts(content)
			]));
};
var $author$project$Page$Writing$viewPhonePage = function (content) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				$author$project$Page$Writing$viewPhoneContent(content),
				$author$project$Common$viewFooter
			]));
};
var $author$project$Page$Writing$view = F3(
	function (maybeUrl, sharedModel, _static) {
		return {
			body: _List_fromArray(
				[
					function () {
					var _v0 = sharedModel.device._class;
					switch (_v0.$) {
						case 'Desktop':
							return $author$project$Page$Writing$viewPage(_static.data);
						case 'Phone':
							return $author$project$Page$Writing$viewPhonePage(_static.data);
						default:
							return $author$project$Page$Writing$viewPage(_static.data);
					}
				}()
				]),
			title: 'Rust/Elm Developer, at your service'
		};
	});
var $author$project$Page$Writing$page = A2(
	$author$project$Page$buildNoState,
	{view: $author$project$Page$Writing$view},
	$author$project$Page$single(
		{data: $author$project$Page$Writing$data, head: $author$project$Page$Writing$head}));
var $author$project$TemplateModulesBeta$dataForRoute = function (route) {
	if (route.$ === 'Nothing') {
		return $dillonkearns$elm_pages$DataSource$succeed($author$project$TemplateModulesBeta$Data404NotFoundPage____);
	} else {
		switch (route.a.$) {
			case 'Index':
				var _v1 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataIndex,
					$author$project$Page$Index$page.data(
						{}));
			case 'Now':
				var _v2 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataNow,
					$author$project$Page$Now$page.data(
						{}));
			case 'Projects':
				var _v3 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataProjects,
					$author$project$Page$Projects$page.data(
						{}));
			case 'Skills':
				var _v4 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataSkills,
					$author$project$Page$Skills$page.data(
						{}));
			case 'Testimonials':
				var _v5 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataTestimonials,
					$author$project$Page$Testimonials$page.data(
						{}));
			case 'Writing':
				var _v6 = route.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataWriting,
					$author$project$Page$Writing$page.data(
						{}));
			case 'Blog__Name_':
				var routeParams = route.a.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataBlog__Name_,
					$author$project$Page$Blog$Name_$page.data(routeParams));
			case 'Project__Name_':
				var routeParams = route.a.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataProject__Name_,
					$author$project$Page$Project$Name_$page.data(routeParams));
			case 'Skill__Name_':
				var routeParams = route.a.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataSkill__Name_,
					$author$project$Page$Skill$Name_$page.data(routeParams));
			case 'Tag__Name_':
				var routeParams = route.a.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataTag__Name_,
					$author$project$Page$Tag$Name_$page.data(routeParams));
			default:
				var routeParams = route.a.a;
				return A2(
					$dillonkearns$elm_pages$DataSource$map,
					$author$project$TemplateModulesBeta$DataTestimonial__Name_,
					$author$project$Page$Testimonial$Name_$page.data(routeParams));
		}
	}
};
var $author$project$TemplateModulesBeta$fromJsPort = _Platform_incomingPort('fromJsPort', $elm$json$Json$Decode$value);
var $author$project$Route$Blog__Name_ = function (a) {
	return {$: 'Blog__Name_', a: a};
};
var $author$project$Route$Now = {$: 'Now'};
var $author$project$Route$Project__Name_ = function (a) {
	return {$: 'Project__Name_', a: a};
};
var $author$project$Route$Projects = {$: 'Projects'};
var $author$project$Route$Skill__Name_ = function (a) {
	return {$: 'Skill__Name_', a: a};
};
var $author$project$Route$Skills = {$: 'Skills'};
var $author$project$Route$Tag__Name_ = function (a) {
	return {$: 'Tag__Name_', a: a};
};
var $author$project$Route$Testimonial__Name_ = function (a) {
	return {$: 'Testimonial__Name_', a: a};
};
var $author$project$Route$Testimonials = {$: 'Testimonials'};
var $author$project$Route$Writing = {$: 'Writing'};
var $author$project$TemplateModulesBeta$getStaticRoutes = A2(
	$dillonkearns$elm_pages$DataSource$map,
	$elm$core$List$concat,
	$dillonkearns$elm_pages$DataSource$combine(
		_List_fromArray(
			[
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map($author$project$Route$Blog__Name_),
				$author$project$Page$Blog$Name_$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map($author$project$Route$Project__Name_),
				$author$project$Page$Project$Name_$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map($author$project$Route$Skill__Name_),
				$author$project$Page$Skill$Name_$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map($author$project$Route$Tag__Name_),
				$author$project$Page$Tag$Name_$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map($author$project$Route$Testimonial__Name_),
				$author$project$Page$Testimonial$Name_$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map(
					function (_v0) {
						return $author$project$Route$Now;
					}),
				$author$project$Page$Now$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map(
					function (_v1) {
						return $author$project$Route$Projects;
					}),
				$author$project$Page$Projects$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map(
					function (_v2) {
						return $author$project$Route$Skills;
					}),
				$author$project$Page$Skills$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map(
					function (_v3) {
						return $author$project$Route$Testimonials;
					}),
				$author$project$Page$Testimonials$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map(
					function (_v4) {
						return $author$project$Route$Writing;
					}),
				$author$project$Page$Writing$page.staticRoutes),
				A2(
				$dillonkearns$elm_pages$DataSource$map,
				$elm$core$List$map(
					function (_v5) {
						return $author$project$Route$Index;
					}),
				$author$project$Page$Index$page.staticRoutes)
			])));
var $author$project$TemplateModulesBeta$stringToString = function (string) {
	return '\"' + (string + '\"');
};
var $author$project$TemplateModulesBeta$handleRoute = function (maybeRoute) {
	if (maybeRoute.$ === 'Nothing') {
		return $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing);
	} else {
		switch (maybeRoute.a.$) {
			case 'Index':
				var _v1 = maybeRoute.a;
				return A3(
					$author$project$Page$Index$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Index']),
						routePattern: {ending: $elm$core$Maybe$Nothing, segments: _List_Nil}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Now':
				var _v2 = maybeRoute.a;
				return A3(
					$author$project$Page$Now$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Now']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('now')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Projects':
				var _v3 = maybeRoute.a;
				return A3(
					$author$project$Page$Projects$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Projects']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('projects')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Skills':
				var _v4 = maybeRoute.a;
				return A3(
					$author$project$Page$Skills$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Skills']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('skills')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Testimonials':
				var _v5 = maybeRoute.a;
				return A3(
					$author$project$Page$Testimonials$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Testimonials']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('testimonials')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Writing':
				var _v6 = maybeRoute.a;
				return A3(
					$author$project$Page$Writing$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Writing']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('writing')
								])
						}
					},
					function (param) {
						return _List_Nil;
					},
					{});
			case 'Blog__Name_':
				var routeParams = maybeRoute.a.a;
				return A3(
					$author$project$Page$Blog$Name_$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Blog', 'Name_']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('blog'),
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
								])
						}
					},
					function (param) {
						return _List_fromArray(
							[
								_Utils_Tuple2(
								'name',
								$author$project$TemplateModulesBeta$stringToString(param.name))
							]);
					},
					routeParams);
			case 'Project__Name_':
				var routeParams = maybeRoute.a.a;
				return A3(
					$author$project$Page$Project$Name_$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Project', 'Name_']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('project'),
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
								])
						}
					},
					function (param) {
						return _List_fromArray(
							[
								_Utils_Tuple2(
								'name',
								$author$project$TemplateModulesBeta$stringToString(param.name))
							]);
					},
					routeParams);
			case 'Skill__Name_':
				var routeParams = maybeRoute.a.a;
				return A3(
					$author$project$Page$Skill$Name_$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Skill', 'Name_']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('skill'),
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
								])
						}
					},
					function (param) {
						return _List_fromArray(
							[
								_Utils_Tuple2(
								'name',
								$author$project$TemplateModulesBeta$stringToString(param.name))
							]);
					},
					routeParams);
			case 'Tag__Name_':
				var routeParams = maybeRoute.a.a;
				return A3(
					$author$project$Page$Tag$Name_$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Tag', 'Name_']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('tag'),
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
								])
						}
					},
					function (param) {
						return _List_fromArray(
							[
								_Utils_Tuple2(
								'name',
								$author$project$TemplateModulesBeta$stringToString(param.name))
							]);
					},
					routeParams);
			default:
				var routeParams = maybeRoute.a.a;
				return A3(
					$author$project$Page$Testimonial$Name_$page.handleRoute,
					{
						moduleName: _List_fromArray(
							['Testimonial', 'Name_']),
						routePattern: {
							ending: $elm$core$Maybe$Nothing,
							segments: _List_fromArray(
								[
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('testimonial'),
									$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
								])
						}
					},
					function (param) {
						return _List_fromArray(
							[
								_Utils_Tuple2(
								'name',
								$author$project$TemplateModulesBeta$stringToString(param.name))
							]);
					},
					routeParams);
		}
	}
};
var $author$project$TemplateModulesBeta$ModelBlog__Name_ = function (a) {
	return {$: 'ModelBlog__Name_', a: a};
};
var $author$project$TemplateModulesBeta$ModelIndex = function (a) {
	return {$: 'ModelIndex', a: a};
};
var $author$project$TemplateModulesBeta$ModelNow = function (a) {
	return {$: 'ModelNow', a: a};
};
var $author$project$TemplateModulesBeta$ModelProject__Name_ = function (a) {
	return {$: 'ModelProject__Name_', a: a};
};
var $author$project$TemplateModulesBeta$ModelProjects = function (a) {
	return {$: 'ModelProjects', a: a};
};
var $author$project$TemplateModulesBeta$ModelSkill__Name_ = function (a) {
	return {$: 'ModelSkill__Name_', a: a};
};
var $author$project$TemplateModulesBeta$ModelSkills = function (a) {
	return {$: 'ModelSkills', a: a};
};
var $author$project$TemplateModulesBeta$ModelTag__Name_ = function (a) {
	return {$: 'ModelTag__Name_', a: a};
};
var $author$project$TemplateModulesBeta$ModelTestimonial__Name_ = function (a) {
	return {$: 'ModelTestimonial__Name_', a: a};
};
var $author$project$TemplateModulesBeta$ModelTestimonials = function (a) {
	return {$: 'ModelTestimonials', a: a};
};
var $author$project$TemplateModulesBeta$ModelWriting = function (a) {
	return {$: 'ModelWriting', a: a};
};
var $author$project$TemplateModulesBeta$MsgBlog__Name_ = function (a) {
	return {$: 'MsgBlog__Name_', a: a};
};
var $author$project$TemplateModulesBeta$MsgIndex = function (a) {
	return {$: 'MsgIndex', a: a};
};
var $author$project$TemplateModulesBeta$MsgNow = function (a) {
	return {$: 'MsgNow', a: a};
};
var $author$project$TemplateModulesBeta$MsgProject__Name_ = function (a) {
	return {$: 'MsgProject__Name_', a: a};
};
var $author$project$TemplateModulesBeta$MsgProjects = function (a) {
	return {$: 'MsgProjects', a: a};
};
var $author$project$TemplateModulesBeta$MsgSkill__Name_ = function (a) {
	return {$: 'MsgSkill__Name_', a: a};
};
var $author$project$TemplateModulesBeta$MsgSkills = function (a) {
	return {$: 'MsgSkills', a: a};
};
var $author$project$TemplateModulesBeta$MsgTag__Name_ = function (a) {
	return {$: 'MsgTag__Name_', a: a};
};
var $author$project$TemplateModulesBeta$MsgTestimonial__Name_ = function (a) {
	return {$: 'MsgTestimonial__Name_', a: a};
};
var $author$project$TemplateModulesBeta$MsgTestimonials = function (a) {
	return {$: 'MsgTestimonials', a: a};
};
var $author$project$TemplateModulesBeta$MsgWriting = function (a) {
	return {$: 'MsgWriting', a: a};
};
var $author$project$TemplateModulesBeta$NotFound = {$: 'NotFound'};
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $elm$core$Tuple$mapBoth = F3(
	function (funcA, funcB, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			funcA(x),
			funcB(y));
	});
var $author$project$Shared$OnPageChange = function (a) {
	return {$: 'OnPageChange', a: a};
};
var $author$project$Shared$data = $dillonkearns$elm_pages$DataSource$succeed(_Utils_Tuple0);
var $author$project$Shared$Desktop = {$: 'Desktop'};
var $author$project$Shared$Portrait = {$: 'Portrait'};
var $author$project$Shared$BigDesktop = {$: 'BigDesktop'};
var $author$project$Shared$Landscape = {$: 'Landscape'};
var $author$project$Shared$Phone = {$: 'Phone'};
var $author$project$Shared$Tablet = {$: 'Tablet'};
var $author$project$Shared$classifyDevice = function (window) {
	return {
		_class: function () {
			var shortSide = A2($elm$core$Basics$min, window.width, window.height);
			var longSide = A2($elm$core$Basics$max, window.width, window.height);
			return (shortSide < 600) ? $author$project$Shared$Phone : ((longSide <= 900) ? $author$project$Shared$Tablet : (((longSide > 900) && (longSide <= 1920)) ? $author$project$Shared$Desktop : $author$project$Shared$BigDesktop));
		}(),
		orientation: (_Utils_cmp(window.width, window.height) < 0) ? $author$project$Shared$Portrait : $author$project$Shared$Landscape
	};
};
var $author$project$Shared$classifyDeviceFromFlags = function (flags) {
	return $author$project$Shared$classifyDevice(
		{height: flags.y, width: flags.x});
};
var $author$project$Shared$Flags = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var $zwilias$json_decode_exploration$Json$Decode$Exploration$TInt = {$: 'TInt'};
var $zwilias$json_decode_exploration$Json$Decode$Exploration$int = $zwilias$json_decode_exploration$Json$Decode$Exploration$Decoder(
	function (json) {
		if (json.$ === 'Number') {
			var val = json.b;
			return _Utils_eq(
				$elm$core$Basics$round(val),
				val) ? A2(
				$zwilias$json_decode_exploration$Json$Decode$Exploration$ok,
				$zwilias$json_decode_exploration$Json$Decode$Exploration$markUsed(json),
				$elm$core$Basics$round(val)) : A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TInt, json);
		} else {
			return A2($zwilias$json_decode_exploration$Json$Decode$Exploration$expected, $zwilias$json_decode_exploration$Json$Decode$Exploration$TInt, json);
		}
	});
var $dillonkearns$elm_pages$OptimizedDecoder$int = A2($dillonkearns$elm_pages$Internal$OptimizedDecoder$OptimizedDecoder, $elm$json$Json$Decode$int, $zwilias$json_decode_exploration$Json$Decode$Exploration$int);
var $author$project$Shared$decodeFlags = A3(
	$dillonkearns$elm_pages$OptimizedDecoder$map2,
	$author$project$Shared$Flags,
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'x', $dillonkearns$elm_pages$OptimizedDecoder$int),
	A2($dillonkearns$elm_pages$OptimizedDecoder$field, 'y', $dillonkearns$elm_pages$OptimizedDecoder$int));
var $dillonkearns$elm_pages$OptimizedDecoder$decodeValue = function (_v0) {
	var jd = _v0.a;
	return $elm$json$Json$Decode$decodeValue(jd);
};
var $elm$core$Result$toMaybe = function (result) {
	if (result.$ === 'Ok') {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Shared$init = F3(
	function (navigationKey, flags, maybePagePath) {
		return _Utils_Tuple2(
			{
				device: function () {
					if (flags.$ === 'BrowserFlags') {
						var browserFlags = flags.a;
						return $author$project$Shared$classifyDeviceFromFlags(
							A2(
								$elm$core$Maybe$withDefault,
								{x: 1200, y: 1200},
								$elm$core$Result$toMaybe(
									A2($dillonkearns$elm_pages$OptimizedDecoder$decodeValue, $author$project$Shared$decodeFlags, browserFlags))));
					} else {
						return {_class: $author$project$Shared$Desktop, orientation: $author$project$Shared$Portrait};
					}
				}(),
				isMobileMenuOpen: false
			},
			$elm$core$Platform$Cmd$none);
	});
var $author$project$Shared$GotNewWidth = function (a) {
	return {$: 'GotNewWidth', a: a};
};
var $elm$browser$Browser$Events$Window = {$: 'Window'};
var $elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var $elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var $elm$browser$Browser$Events$init = $elm$core$Task$succeed(
	A2($elm$browser$Browser$Events$State, _List_Nil, $elm$core$Dict$empty));
var $elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var $elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			$elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$browser$Debugger$Expando$ArraySeq = {$: 'ArraySeq'};
var $elm$browser$Debugger$Overlay$BlockMost = {$: 'BlockMost'};
var $elm$browser$Debugger$Overlay$BlockNone = {$: 'BlockNone'};
var $elm$browser$Debugger$Expando$Constructor = F3(
	function (a, b, c) {
		return {$: 'Constructor', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Dictionary = F2(
	function (a, b) {
		return {$: 'Dictionary', a: a, b: b};
	});
var $elm$browser$Debugger$Main$Down = {$: 'Down'};
var $elm$browser$Debugger$Expando$ListSeq = {$: 'ListSeq'};
var $elm$browser$Debugger$Main$NoOp = {$: 'NoOp'};
var $elm$browser$Debugger$Expando$Primitive = function (a) {
	return {$: 'Primitive', a: a};
};
var $elm$browser$Debugger$Expando$Record = F2(
	function (a, b) {
		return {$: 'Record', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$S = function (a) {
	return {$: 'S', a: a};
};
var $elm$browser$Debugger$Expando$Sequence = F3(
	function (a, b, c) {
		return {$: 'Sequence', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$SetSeq = {$: 'SetSeq'};
var $elm$browser$Debugger$Main$Up = {$: 'Up'};
var $elm$browser$Debugger$Main$UserMsg = function (a) {
	return {$: 'UserMsg', a: a};
};
var $elm$browser$Debugger$Main$Export = {$: 'Export'};
var $elm$browser$Debugger$Main$Import = {$: 'Import'};
var $elm$browser$Debugger$Main$Open = {$: 'Open'};
var $elm$browser$Debugger$Main$OverlayMsg = function (a) {
	return {$: 'OverlayMsg', a: a};
};
var $elm$browser$Debugger$Main$Resume = {$: 'Resume'};
var $elm$browser$Debugger$Main$isPaused = function (state) {
	if (state.$ === 'Running') {
		return false;
	} else {
		return true;
	}
};
var $elm$browser$Debugger$History$size = function (history) {
	return history.numMessages;
};
var $elm$browser$Debugger$Overlay$Accept = function (a) {
	return {$: 'Accept', a: a};
};
var $elm$browser$Debugger$Overlay$Choose = F2(
	function (a, b) {
		return {$: 'Choose', a: a, b: b};
	});
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$a = _VirtualDom_node('a');
var $elm$browser$Debugger$Overlay$goodNews1 = '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n';
var $elm$browser$Debugger$Overlay$goodNews2 = '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n';
var $elm$browser$Debugger$Overlay$viewCode = function (name) {
	return A2(
		$elm$html$Html$code,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(name)
			]));
};
var $elm$browser$Debugger$Overlay$addCommas = function (items) {
	if (!items.b) {
		return '';
	} else {
		if (!items.b.b) {
			var item = items.a;
			return item;
		} else {
			if (!items.b.b.b) {
				var item1 = items.a;
				var _v1 = items.b;
				var item2 = _v1.a;
				return item1 + (' and ' + item2);
			} else {
				var lastItem = items.a;
				var otherItems = items.b;
				return A2(
					$elm$core$String$join,
					', ',
					_Utils_ap(
						otherItems,
						_List_fromArray(
							[' and ' + lastItem])));
			}
		}
	}
};
var $elm$browser$Debugger$Overlay$problemToString = function (problem) {
	switch (problem.$) {
		case 'Function':
			return 'functions';
		case 'Decoder':
			return 'JSON decoders';
		case 'Task':
			return 'tasks';
		case 'Process':
			return 'processes';
		case 'Socket':
			return 'web sockets';
		case 'Request':
			return 'HTTP requests';
		case 'Program':
			return 'programs';
		default:
			return 'virtual DOM values';
	}
};
var $elm$browser$Debugger$Overlay$viewProblemType = function (_v0) {
	var name = _v0.name;
	var problems = _v0.problems;
	return A2(
		$elm$html$Html$li,
		_List_Nil,
		_List_fromArray(
			[
				$elm$browser$Debugger$Overlay$viewCode(name),
				$elm$html$Html$text(
				' can contain ' + ($elm$browser$Debugger$Overlay$addCommas(
					A2($elm$core$List$map, $elm$browser$Debugger$Overlay$problemToString, problems)) + '.'))
			]));
};
var $elm$browser$Debugger$Overlay$viewBadMetadata = function (_v0) {
	var message = _v0.message;
	var problems = _v0.problems;
	return _List_fromArray(
		[
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('The '),
					$elm$browser$Debugger$Overlay$viewCode(message),
					$elm$html$Html$text(' type of your program cannot be reliably serialized for history files.')
				])),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:')
				])),
			A2(
			$elm$html$Html$ul,
			_List_Nil,
			A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewProblemType, problems)),
			A2(
			$elm$html$Html$p,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews1),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('https://guide.elm-lang.org/types/custom_types.html')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('custom types')
						])),
					$elm$html$Html$text(', in your messages. From there, your '),
					$elm$browser$Debugger$Overlay$viewCode('update'),
					$elm$html$Html$text($elm$browser$Debugger$Overlay$goodNews2)
				]))
		]);
};
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $elm$browser$Debugger$Overlay$Cancel = {$: 'Cancel'};
var $elm$browser$Debugger$Overlay$Proceed = {$: 'Proceed'};
var $elm$html$Html$button = _VirtualDom_node('button');
var $elm$browser$Debugger$Overlay$viewButtons = function (buttons) {
	var btn = F2(
		function (msg, string) {
			return A2(
				$elm$html$Html$button,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-right', '20px'),
						$elm$html$Html$Events$onClick(msg)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(string)
					]));
		});
	var buttonNodes = function () {
		if (buttons.$ === 'Accept') {
			var proceed = buttons.a;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		} else {
			var cancel = buttons.a;
			var proceed = buttons.b;
			return _List_fromArray(
				[
					A2(btn, $elm$browser$Debugger$Overlay$Cancel, cancel),
					A2(btn, $elm$browser$Debugger$Overlay$Proceed, proceed)
				]);
		}
	}();
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '60px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '60px'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'right'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		buttonNodes);
};
var $elm$browser$Debugger$Overlay$viewMessage = F4(
	function (config, title, details, buttons) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-overlay'),
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100vw'),
					A2($elm$html$Html$Attributes$style, 'height', '100vh'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'none'),
					A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
							A2($elm$html$Html$Attributes$style, 'width', '600px'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', 'calc(50% - 300px)'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '36px'),
									A2($elm$html$Html$Attributes$style, 'height', '80px'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)'),
									A2($elm$html$Html$Attributes$style, 'padding-left', '22px'),
									A2($elm$html$Html$Attributes$style, 'vertical-align', 'middle'),
									A2($elm$html$Html$Attributes$style, 'line-height', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(title)
								])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id('elm-debugger-details'),
									A2($elm$html$Html$Attributes$style, 'padding', ' 8px 20px'),
									A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
									A2($elm$html$Html$Attributes$style, 'max-height', 'calc(100vh - 156px)'),
									A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)')
								]),
							details),
							A2(
							$elm$html$Html$map,
							config.wrap,
							$elm$browser$Debugger$Overlay$viewButtons(buttons))
						]))
				]));
	});
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm$browser$Debugger$Overlay$viewShape = F4(
	function (x, y, angle, coordinates) {
		return A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'polygon',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'points', coordinates),
					A2(
					$elm$virtual_dom$VirtualDom$attribute,
					'transform',
					'translate(' + ($elm$core$String$fromFloat(x) + (' ' + ($elm$core$String$fromFloat(y) + (') rotate(' + ($elm$core$String$fromFloat(-angle) + ')'))))))
				]),
			_List_Nil);
	});
var $elm$browser$Debugger$Overlay$elmLogo = A4(
	$elm$virtual_dom$VirtualDom$nodeNS,
	'http://www.w3.org/2000/svg',
	'svg',
	_List_fromArray(
		[
			A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '-300 -300 600 600'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'width', '24px'),
			A2($elm$virtual_dom$VirtualDom$attribute, 'height', '24px')
		]),
	_List_fromArray(
		[
			A4(
			$elm$virtual_dom$VirtualDom$nodeNS,
			'http://www.w3.org/2000/svg',
			'g',
			_List_fromArray(
				[
					A2($elm$virtual_dom$VirtualDom$attribute, 'transform', 'scale(1 -1)')
				]),
			_List_fromArray(
				[
					A4($elm$browser$Debugger$Overlay$viewShape, 0, -210, 0, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, -210, 0, 90, '-280,-90 0,190 280,-90'),
					A4($elm$browser$Debugger$Overlay$viewShape, 207, 207, 45, '-198,-66 0,132 198,-66'),
					A4($elm$browser$Debugger$Overlay$viewShape, 150, 0, 0, '-130,0 0,-130 130,0 0,130'),
					A4($elm$browser$Debugger$Overlay$viewShape, -89, 239, 0, '-191,61 69,61 191,-61 -69,-61'),
					A4($elm$browser$Debugger$Overlay$viewShape, 0, 106, 180, '-130,-44 0,86  130,-44'),
					A4($elm$browser$Debugger$Overlay$viewShape, 256, -150, 270, '-130,-44 0,86  130,-44')
				]))
		]));
var $elm$browser$Debugger$Overlay$viewMiniControls = F2(
	function (config, numMsgs) {
		var string = $elm$core$String$fromInt(numMsgs);
		var width = $elm$core$String$fromInt(
			2 + $elm$core$String$length(string));
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
					A2($elm$html$Html$Attributes$style, 'bottom', '2em'),
					A2($elm$html$Html$Attributes$style, 'right', '2em'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(42px + ' + (width + 'ch)')),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#1293D8'),
					A2($elm$html$Html$Attributes$style, 'color', 'white'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
					A2($elm$html$Html$Attributes$style, 'z-index', '2147483647'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(config.open)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Overlay$elmLogo,
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', 'calc(1ch + 6px)'),
							A2($elm$html$Html$Attributes$style, 'padding-right', '1ch')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(string)
						]))
				]));
	});
var $elm$browser$Debugger$Overlay$explanationBad = '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n';
var $elm$browser$Debugger$Overlay$explanationRisky = '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n';
var $elm$browser$Debugger$Overlay$viewMention = F2(
	function (tags, verbed) {
		var _v0 = A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Overlay$viewCode,
			$elm$core$List$reverse(tags));
		if (!_v0.b) {
			return $elm$html$Html$text('');
		} else {
			if (!_v0.b.b) {
				var tag = _v0.a;
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(verbed),
							tag,
							$elm$html$Html$text('.')
						]));
			} else {
				if (!_v0.b.b.b) {
					var tag2 = _v0.a;
					var _v1 = _v0.b;
					var tag1 = _v1.a;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(verbed),
								tag1,
								$elm$html$Html$text(' and '),
								tag2,
								$elm$html$Html$text('.')
							]));
				} else {
					var lastTag = _v0.a;
					var otherTags = _v0.b;
					return A2(
						$elm$html$Html$li,
						_List_Nil,
						A2(
							$elm$core$List$cons,
							$elm$html$Html$text(verbed),
							_Utils_ap(
								A2(
									$elm$core$List$intersperse,
									$elm$html$Html$text(', '),
									$elm$core$List$reverse(otherTags)),
								_List_fromArray(
									[
										$elm$html$Html$text(', and '),
										lastTag,
										$elm$html$Html$text('.')
									]))));
				}
			}
		}
	});
var $elm$browser$Debugger$Overlay$viewChange = function (change) {
	return A2(
		$elm$html$Html$li,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'margin', '8px 0')
			]),
		function () {
			if (change.$ === 'AliasChange') {
				var name = change.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							]))
					]);
			} else {
				var name = change.a;
				var removed = change.b.removed;
				var changed = change.b.changed;
				var added = change.b.added;
				var argsMatch = change.b.argsMatch;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'font-size', '1.5em')
							]),
						_List_fromArray(
							[
								$elm$browser$Debugger$Overlay$viewCode(name)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'disc'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '2em')
							]),
						_List_fromArray(
							[
								A2($elm$browser$Debugger$Overlay$viewMention, removed, 'Removed '),
								A2($elm$browser$Debugger$Overlay$viewMention, changed, 'Changed '),
								A2($elm$browser$Debugger$Overlay$viewMention, added, 'Added ')
							])),
						argsMatch ? $elm$html$Html$text('') : $elm$html$Html$text('This may be due to the fact that the type variable names changed.')
					]);
			}
		}());
};
var $elm$browser$Debugger$Overlay$viewReport = F2(
	function (isBad, report) {
		switch (report.$) {
			case 'CorruptHistory':
				return _List_fromArray(
					[
						$elm$html$Html$text('Looks like this history file is corrupt. I cannot understand it.')
					]);
			case 'VersionChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('This history was created with Elm ' + (old + (', but you are using Elm ' + (_new + ' right now.'))))
					]);
			case 'MessageChanged':
				var old = report.a;
				var _new = report.b;
				return _List_fromArray(
					[
						$elm$html$Html$text('To import some other history, the overall message type must' + ' be the same. The old history has '),
						$elm$browser$Debugger$Overlay$viewCode(old),
						$elm$html$Html$text(' messages, but the new program works with '),
						$elm$browser$Debugger$Overlay$viewCode(_new),
						$elm$html$Html$text(' messages.')
					]);
			default:
				var changes = report.a;
				return _List_fromArray(
					[
						A2(
						$elm$html$Html$p,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(
								isBad ? $elm$browser$Debugger$Overlay$explanationBad : $elm$browser$Debugger$Overlay$explanationRisky)
							])),
						A2(
						$elm$html$Html$ul,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'list-style-type', 'none'),
								A2($elm$html$Html$Attributes$style, 'padding-left', '20px')
							]),
						A2($elm$core$List$map, $elm$browser$Debugger$Overlay$viewChange, changes))
					]);
		}
	});
var $elm$browser$Debugger$Overlay$view = F5(
	function (config, isPaused, isOpen, numMsgs, state) {
		switch (state.$) {
			case 'None':
				return isOpen ? $elm$html$Html$text('') : (isPaused ? A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id('elm-debugger-overlay'),
							A2($elm$html$Html$Attributes$style, 'position', 'fixed'),
							A2($elm$html$Html$Attributes$style, 'top', '0'),
							A2($elm$html$Html$Attributes$style, 'left', '0'),
							A2($elm$html$Html$Attributes$style, 'width', '100vw'),
							A2($elm$html$Html$Attributes$style, 'height', '100vh'),
							A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
							A2($elm$html$Html$Attributes$style, 'display', 'flex'),
							A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
							A2($elm$html$Html$Attributes$style, 'justify-content', 'center'),
							A2($elm$html$Html$Attributes$style, 'pointer-events', 'auto'),
							A2($elm$html$Html$Attributes$style, 'background-color', 'rgba(200, 200, 200, 0.7)'),
							A2($elm$html$Html$Attributes$style, 'color', 'white'),
							A2($elm$html$Html$Attributes$style, 'font-family', '\'Trebuchet MS\', \'Lucida Grande\', \'Bitstream Vera Sans\', \'Helvetica Neue\', sans-serif'),
							A2($elm$html$Html$Attributes$style, 'z-index', '2147483646'),
							$elm$html$Html$Events$onClick(config.resume)
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'font-size', '80px')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('Click to Resume')
								])),
							A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs)
						])) : A2($elm$browser$Debugger$Overlay$viewMiniControls, config, numMsgs));
			case 'BadMetadata':
				var badMetadata_ = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot use Import or Export',
					$elm$browser$Debugger$Overlay$viewBadMetadata(badMetadata_),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			case 'BadImport':
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Cannot Import History',
					A2($elm$browser$Debugger$Overlay$viewReport, true, report),
					$elm$browser$Debugger$Overlay$Accept('Ok'));
			default:
				var report = state.a;
				return A4(
					$elm$browser$Debugger$Overlay$viewMessage,
					config,
					'Warning',
					A2($elm$browser$Debugger$Overlay$viewReport, false, report),
					A2($elm$browser$Debugger$Overlay$Choose, 'Cancel', 'Import Anyway'));
		}
	});
var $elm$browser$Debugger$Main$cornerView = function (model) {
	return A5(
		$elm$browser$Debugger$Overlay$view,
		{exportHistory: $elm$browser$Debugger$Main$Export, importHistory: $elm$browser$Debugger$Main$Import, open: $elm$browser$Debugger$Main$Open, resume: $elm$browser$Debugger$Main$Resume, wrap: $elm$browser$Debugger$Main$OverlayMsg},
		$elm$browser$Debugger$Main$isPaused(model.state),
		_Debugger_isOpen(model.popout),
		$elm$browser$Debugger$History$size(model.history),
		model.overlay);
};
var $elm$core$Set$foldr = F3(
	function (func, initialState, _v0) {
		var dict = _v0.a;
		return A3(
			$elm$core$Dict$foldr,
			F3(
				function (key, _v1, state) {
					return A2(func, key, state);
				}),
			initialState,
			dict);
	});
var $elm$browser$Debugger$Main$getCurrentModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.b;
		return model;
	}
};
var $elm$browser$Debugger$Main$getUserModel = function (model) {
	return $elm$browser$Debugger$Main$getCurrentModel(model.state);
};
var $elm$browser$Debugger$Main$initialWindowHeight = 420;
var $elm$browser$Debugger$Main$initialWindowWidth = 900;
var $elm$browser$Debugger$Main$cachedHistory = function (model) {
	var _v0 = model.state;
	if (_v0.$ === 'Running') {
		return model.history;
	} else {
		var history = _v0.e;
		return history;
	}
};
var $elm$browser$Debugger$Main$DragEnd = {$: 'DragEnd'};
var $elm$browser$Debugger$Main$getDragStatus = function (layout) {
	if (layout.$ === 'Horizontal') {
		var status = layout.a;
		return status;
	} else {
		var status = layout.a;
		return status;
	}
};
var $elm$browser$Debugger$Main$Drag = function (a) {
	return {$: 'Drag', a: a};
};
var $elm$browser$Debugger$Main$DragInfo = F5(
	function (x, y, down, width, height) {
		return {down: down, height: height, width: width, x: x, y: y};
	});
var $elm$browser$Debugger$Main$decodeDimension = function (field) {
	return A2(
		$elm$json$Json$Decode$at,
		_List_fromArray(
			['currentTarget', 'ownerDocument', 'defaultView', field]),
		$elm$json$Json$Decode$float);
};
var $elm$browser$Debugger$Main$onMouseMove = A2(
	$elm$html$Html$Events$on,
	'mousemove',
	A2(
		$elm$json$Json$Decode$map,
		$elm$browser$Debugger$Main$Drag,
		A6(
			$elm$json$Json$Decode$map5,
			$elm$browser$Debugger$Main$DragInfo,
			A2($elm$json$Json$Decode$field, 'pageX', $elm$json$Json$Decode$float),
			A2($elm$json$Json$Decode$field, 'pageY', $elm$json$Json$Decode$float),
			A2(
				$elm$json$Json$Decode$field,
				'buttons',
				A2(
					$elm$json$Json$Decode$map,
					function (v) {
						return v === 1;
					},
					$elm$json$Json$Decode$int)),
			$elm$browser$Debugger$Main$decodeDimension('innerWidth'),
			$elm$browser$Debugger$Main$decodeDimension('innerHeight'))));
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toDragListeners = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				$elm$browser$Debugger$Main$onMouseMove,
				$elm$html$Html$Events$onMouseUp($elm$browser$Debugger$Main$DragEnd)
			]);
	}
};
var $elm$browser$Debugger$Main$toFlexDirection = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'row';
	} else {
		return 'column-reverse';
	}
};
var $elm$browser$Debugger$Main$DragStart = {$: 'DragStart'};
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$browser$Debugger$Main$toPercent = function (fraction) {
	return $elm$core$String$fromFloat(100 * fraction) + '%';
};
var $elm$browser$Debugger$Main$viewDragZone = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'top', '0'),
					A2(
					$elm$html$Html$Attributes$style,
					'left',
					$elm$browser$Debugger$Main$toPercent(x)),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '10px'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'col-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	} else {
		var y = layout.c;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$elm$browser$Debugger$Main$toPercent(y)),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '-5px'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '10px'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'row-resize'),
					$elm$html$Html$Events$onMouseDown($elm$browser$Debugger$Main$DragStart)
				]),
			_List_Nil);
	}
};
var $elm$browser$Debugger$Main$TweakExpandoModel = function (a) {
	return {$: 'TweakExpandoModel', a: a};
};
var $elm$browser$Debugger$Main$TweakExpandoMsg = function (a) {
	return {$: 'TweakExpandoMsg', a: a};
};
var $elm$browser$Debugger$Main$toExpandoPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(1 - x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(y));
	}
};
var $elm$browser$Debugger$Main$toMouseBlocker = function (layout) {
	var _v0 = $elm$browser$Debugger$Main$getDragStatus(layout);
	if (_v0.$ === 'Static') {
		return 'auto';
	} else {
		return 'none';
	}
};
var $elm$browser$Debugger$Expando$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var $elm$browser$Debugger$Expando$Index = F3(
	function (a, b, c) {
		return {$: 'Index', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Expando$Key = {$: 'Key'};
var $elm$browser$Debugger$Expando$None = {$: 'None'};
var $elm$browser$Debugger$Expando$Toggle = {$: 'Toggle'};
var $elm$browser$Debugger$Expando$Value = {$: 'Value'};
var $elm$browser$Debugger$Expando$blue = A2($elm$html$Html$Attributes$style, 'color', 'rgb(28, 0, 207)');
var $elm$browser$Debugger$Expando$leftPad = function (maybeKey) {
	if (maybeKey.$ === 'Nothing') {
		return _List_Nil;
	} else {
		return _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'padding-left', '4ch')
			]);
	}
};
var $elm$browser$Debugger$Expando$makeArrow = function (arrow) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'color', '#777'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '2ch'),
				A2($elm$html$Html$Attributes$style, 'width', '2ch'),
				A2($elm$html$Html$Attributes$style, 'display', 'inline-block')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(arrow)
			]));
};
var $elm$browser$Debugger$Expando$purple = A2($elm$html$Html$Attributes$style, 'color', 'rgb(136, 19, 145)');
var $elm$browser$Debugger$Expando$lineStarter = F3(
	function (maybeKey, maybeIsClosed, description) {
		var arrow = function () {
			if (maybeIsClosed.$ === 'Nothing') {
				return $elm$browser$Debugger$Expando$makeArrow('');
			} else {
				if (maybeIsClosed.a) {
					return $elm$browser$Debugger$Expando$makeArrow('▸');
				} else {
					return $elm$browser$Debugger$Expando$makeArrow('▾');
				}
			}
		}();
		if (maybeKey.$ === 'Nothing') {
			return A2($elm$core$List$cons, arrow, description);
		} else {
			var key = maybeKey.a;
			return A2(
				$elm$core$List$cons,
				arrow,
				A2(
					$elm$core$List$cons,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$purple]),
						_List_fromArray(
							[
								$elm$html$Html$text(key)
							])),
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(' = '),
						description)));
		}
	});
var $elm$browser$Debugger$Expando$red = A2($elm$html$Html$Attributes$style, 'color', 'rgb(196, 26, 22)');
var $elm$browser$Debugger$Expando$seqTypeToString = F2(
	function (n, seqType) {
		switch (seqType.$) {
			case 'ListSeq':
				return 'List(' + ($elm$core$String$fromInt(n) + ')');
			case 'SetSeq':
				return 'Set(' + ($elm$core$String$fromInt(n) + ')');
			default:
				return 'Array(' + ($elm$core$String$fromInt(n) + ')');
		}
	});
var $elm$browser$Debugger$Expando$elideMiddle = function (str) {
	return ($elm$core$String$length(str) <= 18) ? str : (A2($elm$core$String$left, 8, str) + ('...' + A2($elm$core$String$right, 8, str)));
};
var $elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 1,
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					]));
		} else {
			var field = entries.a;
			var rest = entries.b;
			var nextLength = (length + $elm$core$String$length(field)) + 1;
			if (nextLength > 18) {
				return _Utils_Tuple2(
					length + 2,
					_List_fromArray(
						[
							$elm$html$Html$text('…}')
						]));
			} else {
				var _v1 = A3($elm$browser$Debugger$Expando$viewExtraTinyRecord, nextLength, ',', rest);
				var finalLength = _v1.a;
				var otherHtmls = _v1.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							otherHtmls)));
			}
		}
	});
var $elm$browser$Debugger$Expando$viewTinyHelp = function (str) {
	return _Utils_Tuple2(
		$elm$core$String$length(str),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $elm$browser$Debugger$Expando$viewExtraTiny = function (value) {
	if (value.$ === 'Record') {
		var record = value.b;
		return A3(
			$elm$browser$Debugger$Expando$viewExtraTinyRecord,
			0,
			'{',
			$elm$core$Dict$keys(record));
	} else {
		return $elm$browser$Debugger$Expando$viewTiny(value);
	}
};
var $elm$browser$Debugger$Expando$viewTiny = function (value) {
	switch (value.$) {
		case 'S':
			var stringRep = value.a;
			var str = $elm$browser$Debugger$Expando$elideMiddle(stringRep);
			return _Utils_Tuple2(
				$elm$core$String$length(str),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$red]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]))
					]));
		case 'Primitive':
			var stringRep = value.a;
			return _Utils_Tuple2(
				$elm$core$String$length(stringRep),
				_List_fromArray(
					[
						A2(
						$elm$html$Html$span,
						_List_fromArray(
							[$elm$browser$Debugger$Expando$blue]),
						_List_fromArray(
							[
								$elm$html$Html$text(stringRep)
							]))
					]));
		case 'Sequence':
			var seqType = value.a;
			var valueList = value.c;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				A2(
					$elm$browser$Debugger$Expando$seqTypeToString,
					$elm$core$List$length(valueList),
					seqType));
		case 'Dictionary':
			var keyValuePairs = value.b;
			return $elm$browser$Debugger$Expando$viewTinyHelp(
				'Dict(' + ($elm$core$String$fromInt(
					$elm$core$List$length(keyValuePairs)) + ')'));
		case 'Record':
			var record = value.b;
			return $elm$browser$Debugger$Expando$viewTinyRecord(record);
		default:
			if (!value.c.b) {
				var maybeName = value.a;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					A2($elm$core$Maybe$withDefault, 'Unit', maybeName));
			} else {
				var maybeName = value.a;
				var valueList = value.c;
				return $elm$browser$Debugger$Expando$viewTinyHelp(
					function () {
						if (maybeName.$ === 'Nothing') {
							return 'Tuple(' + ($elm$core$String$fromInt(
								$elm$core$List$length(valueList)) + ')');
						} else {
							var name = maybeName.a;
							return name + ' …';
						}
					}());
			}
	}
};
var $elm$browser$Debugger$Expando$viewTinyRecord = function (record) {
	return $elm$core$Dict$isEmpty(record) ? _Utils_Tuple2(
		2,
		_List_fromArray(
			[
				$elm$html$Html$text('{}')
			])) : A3(
		$elm$browser$Debugger$Expando$viewTinyRecordHelp,
		0,
		'{ ',
		$elm$core$Dict$toList(record));
};
var $elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
	function (length, starter, entries) {
		if (!entries.b) {
			return _Utils_Tuple2(
				length + 2,
				_List_fromArray(
					[
						$elm$html$Html$text(' }')
					]));
		} else {
			var _v1 = entries.a;
			var field = _v1.a;
			var value = _v1.b;
			var rest = entries.b;
			var fieldLen = $elm$core$String$length(field);
			var _v2 = $elm$browser$Debugger$Expando$viewExtraTiny(value);
			var valueLen = _v2.a;
			var valueHtmls = _v2.b;
			var newLength = ((length + fieldLen) + valueLen) + 5;
			if (newLength > 60) {
				return _Utils_Tuple2(
					length + 4,
					_List_fromArray(
						[
							$elm$html$Html$text(', … }')
						]));
			} else {
				var _v3 = A3($elm$browser$Debugger$Expando$viewTinyRecordHelp, newLength, ', ', rest);
				var finalLength = _v3.a;
				var otherHtmls = _v3.b;
				return _Utils_Tuple2(
					finalLength,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$text(starter),
						A2(
							$elm$core$List$cons,
							A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$purple]),
								_List_fromArray(
									[
										$elm$html$Html$text(field)
									])),
							A2(
								$elm$core$List$cons,
								$elm$html$Html$text(' = '),
								A2(
									$elm$core$List$cons,
									A2($elm$html$Html$span, _List_Nil, valueHtmls),
									otherHtmls)))));
			}
		}
	});
var $elm$browser$Debugger$Expando$view = F2(
	function (maybeKey, expando) {
		switch (expando.$) {
			case 'S':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$red]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Primitive':
				var stringRep = expando.a;
				return A2(
					$elm$html$Html$div,
					$elm$browser$Debugger$Expando$leftPad(maybeKey),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Nothing,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$span,
								_List_fromArray(
									[$elm$browser$Debugger$Expando$blue]),
								_List_fromArray(
									[
										$elm$html$Html$text(stringRep)
									]))
							])));
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewSequence, maybeKey, seqType, isClosed, valueList);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return A3($elm$browser$Debugger$Expando$viewDictionary, maybeKey, isClosed, keyValuePairs);
			case 'Record':
				var isClosed = expando.a;
				var valueDict = expando.b;
				return A3($elm$browser$Debugger$Expando$viewRecord, maybeKey, isClosed, valueDict);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var valueList = expando.c;
				return A4($elm$browser$Debugger$Expando$viewConstructor, maybeKey, maybeName, isClosed, valueList);
		}
	});
var $elm$browser$Debugger$Expando$viewConstructor = F4(
	function (maybeKey, maybeName, isClosed, valueList) {
		var tinyArgs = A2(
			$elm$core$List$map,
			A2($elm$core$Basics$composeL, $elm$core$Tuple$second, $elm$browser$Debugger$Expando$viewExtraTiny),
			valueList);
		var description = function () {
			var _v7 = _Utils_Tuple2(maybeName, tinyArgs);
			if (_v7.a.$ === 'Nothing') {
				if (!_v7.b.b) {
					var _v8 = _v7.a;
					return _List_fromArray(
						[
							$elm$html$Html$text('()')
						]);
				} else {
					var _v9 = _v7.a;
					var _v10 = _v7.b;
					var x = _v10.a;
					var xs = _v10.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text('( '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(', '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_fromArray(
									[
										$elm$html$Html$text(' )')
									]),
								xs)));
				}
			} else {
				if (!_v7.b.b) {
					var name = _v7.a.a;
					return _List_fromArray(
						[
							$elm$html$Html$text(name)
						]);
				} else {
					var name = _v7.a.a;
					var _v11 = _v7.b;
					var x = _v11.a;
					var xs = _v11.b;
					return A2(
						$elm$core$List$cons,
						$elm$html$Html$text(name + ' '),
						A2(
							$elm$core$List$cons,
							A2($elm$html$Html$span, _List_Nil, x),
							A3(
								$elm$core$List$foldr,
								F2(
									function (args, rest) {
										return A2(
											$elm$core$List$cons,
											$elm$html$Html$text(' '),
											A2(
												$elm$core$List$cons,
												A2($elm$html$Html$span, _List_Nil, args),
												rest));
									}),
								_List_Nil,
								xs)));
				}
			}
		}();
		var _v4 = function () {
			if (!valueList.b) {
				return _Utils_Tuple2(
					$elm$core$Maybe$Nothing,
					A2($elm$html$Html$div, _List_Nil, _List_Nil));
			} else {
				if (!valueList.b.b) {
					var entry = valueList.a;
					switch (entry.$) {
						case 'S':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Primitive':
							return _Utils_Tuple2(
								$elm$core$Maybe$Nothing,
								A2($elm$html$Html$div, _List_Nil, _List_Nil));
						case 'Sequence':
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewSequenceOpen(subValueList)));
						case 'Dictionary':
							var keyValuePairs = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)));
						case 'Record':
							var record = entry.b;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewRecordOpen(record)));
						default:
							var subValueList = entry.c;
							return _Utils_Tuple2(
								$elm$core$Maybe$Just(isClosed),
								isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : A2(
									$elm$html$Html$map,
									A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, 0),
									$elm$browser$Debugger$Expando$viewConstructorOpen(subValueList)));
					}
				} else {
					return _Utils_Tuple2(
						$elm$core$Maybe$Just(isClosed),
						isClosed ? A2($elm$html$Html$div, _List_Nil, _List_Nil) : $elm$browser$Debugger$Expando$viewConstructorOpen(valueList));
				}
			}
		}();
		var maybeIsClosed = _v4.a;
		var openHtml = _v4.b;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3($elm$browser$Debugger$Expando$lineStarter, maybeKey, maybeIsClosed, description)),
					openHtml
				]));
	});
var $elm$browser$Debugger$Expando$viewConstructorEntry = F2(
	function (index, value) {
		return A2(
			$elm$html$Html$map,
			A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$None, index),
			A2(
				$elm$browser$Debugger$Expando$view,
				$elm$core$Maybe$Just(
					$elm$core$String$fromInt(index)),
				value));
	});
var $elm$browser$Debugger$Expando$viewConstructorOpen = function (valueList) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, valueList));
};
var $elm$browser$Debugger$Expando$viewDictionary = F3(
	function (maybeKey, isClosed, keyValuePairs) {
		var starter = 'Dict(' + ($elm$core$String$fromInt(
			$elm$core$List$length(keyValuePairs)) + ')');
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewDictionaryOpen(keyValuePairs)
				]));
	});
var $elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
	function (index, _v2) {
		var key = _v2.a;
		var value = _v2.b;
		switch (key.$) {
			case 'S':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			case 'Primitive':
				var stringRep = key.a;
				return A2(
					$elm$html$Html$map,
					A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
					A2(
						$elm$browser$Debugger$Expando$view,
						$elm$core$Maybe$Just(stringRep),
						value));
			default:
				return A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Key, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('key'),
								key)),
							A2(
							$elm$html$Html$map,
							A2($elm$browser$Debugger$Expando$Index, $elm$browser$Debugger$Expando$Value, index),
							A2(
								$elm$browser$Debugger$Expando$view,
								$elm$core$Maybe$Just('value'),
								value))
						]));
		}
	});
var $elm$browser$Debugger$Expando$viewDictionaryOpen = function (keyValuePairs) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewDictionaryEntry, keyValuePairs));
};
var $elm$browser$Debugger$Expando$viewRecord = F3(
	function (maybeKey, isClosed, record) {
		var _v1 = isClosed ? _Utils_Tuple3(
			$elm$browser$Debugger$Expando$viewTinyRecord(record).b,
			$elm$html$Html$text(''),
			$elm$html$Html$text('')) : _Utils_Tuple3(
			_List_fromArray(
				[
					$elm$html$Html$text('{')
				]),
			$elm$browser$Debugger$Expando$viewRecordOpen(record),
			A2(
				$elm$html$Html$div,
				$elm$browser$Debugger$Expando$leftPad(
					$elm$core$Maybe$Just(_Utils_Tuple0)),
				_List_fromArray(
					[
						$elm$html$Html$text('}')
					])));
		var start = _v1.a;
		var middle = _v1.b;
		var end = _v1.c;
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						start)),
					middle,
					end
				]));
	});
var $elm$browser$Debugger$Expando$viewRecordEntry = function (_v0) {
	var field = _v0.a;
	var value = _v0.b;
	return A2(
		$elm$html$Html$map,
		$elm$browser$Debugger$Expando$Field(field),
		A2(
			$elm$browser$Debugger$Expando$view,
			$elm$core$Maybe$Just(field),
			value));
};
var $elm$browser$Debugger$Expando$viewRecordOpen = function (record) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$elm$browser$Debugger$Expando$viewRecordEntry,
			$elm$core$Dict$toList(record)));
};
var $elm$browser$Debugger$Expando$viewSequence = F4(
	function (maybeKey, seqType, isClosed, valueList) {
		var starter = A2(
			$elm$browser$Debugger$Expando$seqTypeToString,
			$elm$core$List$length(valueList),
			seqType);
		return A2(
			$elm$html$Html$div,
			$elm$browser$Debugger$Expando$leftPad(maybeKey),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Events$onClick($elm$browser$Debugger$Expando$Toggle)
						]),
					A3(
						$elm$browser$Debugger$Expando$lineStarter,
						maybeKey,
						$elm$core$Maybe$Just(isClosed),
						_List_fromArray(
							[
								$elm$html$Html$text(starter)
							]))),
					isClosed ? $elm$html$Html$text('') : $elm$browser$Debugger$Expando$viewSequenceOpen(valueList)
				]));
	});
var $elm$browser$Debugger$Expando$viewSequenceOpen = function (values) {
	return A2(
		$elm$html$Html$div,
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$browser$Debugger$Expando$viewConstructorEntry, values));
};
var $elm$browser$Debugger$Main$viewExpando = F3(
	function (expandoMsg, expandoModel, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toExpandoPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'block'),
					A2($elm$html$Html$Attributes$style, 'width', 'calc(' + (w + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(' + (h + ' - 4em)')),
					A2($elm$html$Html$Attributes$style, 'padding', '2em'),
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'overflow', 'auto'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, '-webkit-user-select', block),
					A2($elm$html$Html$Attributes$style, '-moz-user-select', block),
					A2($elm$html$Html$Attributes$style, '-ms-user-select', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '0 0 1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MESSAGE')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoMsg,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoMsg)),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', '#ccc'),
							A2($elm$html$Html$Attributes$style, 'padding', '1em 0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('-- MODEL')
						])),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$TweakExpandoModel,
					A2($elm$browser$Debugger$Expando$view, $elm$core$Maybe$Nothing, expandoModel))
				]));
	});
var $elm$browser$Debugger$Main$Jump = function (a) {
	return {$: 'Jump', a: a};
};
var $elm$virtual_dom$VirtualDom$lazy = _VirtualDom_lazy;
var $elm$html$Html$Lazy$lazy = $elm$virtual_dom$VirtualDom$lazy;
var $elm$browser$Debugger$Main$toHistoryPercents = function (layout) {
	if (layout.$ === 'Horizontal') {
		var x = layout.b;
		return _Utils_Tuple2(
			$elm$browser$Debugger$Main$toPercent(x),
			'100%');
	} else {
		var y = layout.c;
		return _Utils_Tuple2(
			'100%',
			$elm$browser$Debugger$Main$toPercent(1 - y));
	}
};
var $elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3;
var $elm$html$Html$Lazy$lazy3 = $elm$virtual_dom$VirtualDom$lazy3;
var $elm$browser$Debugger$History$idForMessageIndex = function (index) {
	return 'msg-' + $elm$core$String$fromInt(index);
};
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $elm$browser$Debugger$History$viewMessage = F3(
	function (currentIndex, index, msg) {
		var messageName = _Debugger_messageToString(msg);
		var className = _Utils_eq(currentIndex, index) ? 'elm-debugger-entry elm-debugger-entry-selected' : 'elm-debugger-entry';
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(
					$elm$browser$Debugger$History$idForMessageIndex(index)),
					$elm$html$Html$Attributes$class(className),
					$elm$html$Html$Events$onClick(index)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$title(messageName),
							$elm$html$Html$Attributes$class('elm-debugger-entry-content')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(messageName)
						])),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('elm-debugger-entry-index')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							$elm$core$String$fromInt(index))
						]))
				]));
	});
var $elm$browser$Debugger$History$consMsg = F3(
	function (currentIndex, msg, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		return _Utils_Tuple2(
			index + 1,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$elm$core$String$fromInt(index),
					A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewMessage, currentIndex, index, msg)),
				rest));
	});
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$browser$Debugger$History$maxSnapshotSize = 31;
var $elm$browser$Debugger$History$showMoreButton = function (numMessages) {
	var nextIndex = (numMessages - 1) - ($elm$browser$Debugger$History$maxSnapshotSize * 2);
	var labelText = 'View more messages';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elm-debugger-entry'),
				$elm$html$Html$Events$onClick(nextIndex)
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$title(labelText),
						$elm$html$Html$Attributes$class('elm-debugger-entry-content')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(labelText)
					])),
				A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elm-debugger-entry-index')
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$History$styles = A3(
	$elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			$elm$html$Html$text('\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n  box-sizing: border-box;\n  padding: 8px;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 40px);\n  padding: 0 5px;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 40px;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n')
		]));
var $elm$browser$Debugger$History$viewSnapshot = F3(
	function (selectedIndex, index, _v0) {
		var messages = _v0.messages;
		return A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$Array$foldr,
				$elm$browser$Debugger$History$consMsg(selectedIndex),
				_Utils_Tuple2(index, _List_Nil),
				messages).b);
	});
var $elm$browser$Debugger$History$consSnapshot = F3(
	function (selectedIndex, snapshot, _v0) {
		var index = _v0.a;
		var rest = _v0.b;
		var nextIndex = index + $elm$core$Array$length(snapshot.messages);
		var selectedIndexHelp = ((_Utils_cmp(nextIndex, selectedIndex) > 0) && (_Utils_cmp(selectedIndex, index) > -1)) ? selectedIndex : (-1);
		return _Utils_Tuple2(
			nextIndex,
			A2(
				$elm$core$List$cons,
				A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewSnapshot, selectedIndexHelp, index, snapshot),
				rest));
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$foldl = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldl, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldl,
			func,
			A3($elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
			tail);
	});
var $elm$browser$Debugger$History$viewAllSnapshots = F3(
	function (selectedIndex, startIndex, snapshots) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A3(
				$elm$core$Array$foldl,
				$elm$browser$Debugger$History$consSnapshot(selectedIndex),
				_Utils_Tuple2(startIndex, _List_Nil),
				snapshots).b);
	});
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.tail)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.tail, tail);
		return (notAppended < 0) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			nodeList: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.nodeList),
			nodeListSize: builder.nodeListSize + 1,
			tail: $elm$core$Elm$JsArray$empty
		} : {nodeList: builder.nodeList, nodeListSize: builder.nodeListSize, tail: appended});
	});
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (node.$ === 'SubTree') {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						nodeList: _List_Nil,
						nodeListSize: 0,
						tail: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_v0.$ === 'SubTree') {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (_v0.$ === 'SubTree') {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (_v0.$ === 'SubTree') {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$browser$Debugger$History$viewRecentSnapshots = F3(
	function (selectedIndex, recentMessagesNum, snapshots) {
		var messagesToFill = $elm$browser$Debugger$History$maxSnapshotSize - recentMessagesNum;
		var arrayLength = $elm$core$Array$length(snapshots);
		var snapshotsToRender = function () {
			var _v0 = _Utils_Tuple2(
				A2($elm$core$Array$get, arrayLength - 2, snapshots),
				A2($elm$core$Array$get, arrayLength - 1, snapshots));
			if ((_v0.a.$ === 'Just') && (_v0.b.$ === 'Just')) {
				var fillerSnapshot = _v0.a.a;
				var recentSnapshot = _v0.b.a;
				return $elm$core$Array$fromList(
					_List_fromArray(
						[
							{
							messages: A3($elm$core$Array$slice, 0, messagesToFill, fillerSnapshot.messages),
							model: fillerSnapshot.model
						},
							recentSnapshot
						]));
			} else {
				return snapshots;
			}
		}();
		var startingIndex = ((arrayLength * $elm$browser$Debugger$History$maxSnapshotSize) - $elm$browser$Debugger$History$maxSnapshotSize) - messagesToFill;
		return A3($elm$browser$Debugger$History$viewAllSnapshots, selectedIndex, startingIndex, snapshotsToRender);
	});
var $elm$browser$Debugger$History$view = F2(
	function (maybeIndex, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var recentMessageStartIndex = numMessages - recent.numMessages;
		var index = A2($elm$core$Maybe$withDefault, -1, maybeIndex);
		var newStuff = A3(
			$elm$html$Html$Keyed$node,
			'div',
			_List_Nil,
			A3(
				$elm$core$List$foldr,
				$elm$browser$Debugger$History$consMsg(index),
				_Utils_Tuple2(recentMessageStartIndex, _List_Nil),
				recent.messages).b);
		var onlyRenderRecentMessages = (!_Utils_eq(index, -1)) || ($elm$core$Array$length(snapshots) < 2);
		var oldStuff = onlyRenderRecentMessages ? A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewAllSnapshots, index, 0, snapshots) : A4($elm$html$Html$Lazy$lazy3, $elm$browser$Debugger$History$viewRecentSnapshots, index, recent.numMessages, snapshots);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id('elm-debugger-sidebar'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
					A2($elm$html$Html$Attributes$style, 'height', 'calc(100% - 72px)')
				]),
			A2(
				$elm$core$List$cons,
				$elm$browser$Debugger$History$styles,
				A2(
					$elm$core$List$cons,
					newStuff,
					A2(
						$elm$core$List$cons,
						oldStuff,
						onlyRenderRecentMessages ? _List_Nil : _List_fromArray(
							[
								$elm$browser$Debugger$History$showMoreButton(numMessages)
							])))));
	});
var $elm$browser$Debugger$Main$SwapLayout = {$: 'SwapLayout'};
var $elm$browser$Debugger$Main$toHistoryIcon = function (layout) {
	if (layout.$ === 'Horizontal') {
		return 'M13 1a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M13 3h-10a1 1 0 0 0-1 1v5h12v-5a1 1 0 0 0-1-1z M14 10h-12v2a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1z';
	} else {
		return 'M0 4a3 3 0 0 1 3-3h10a3 3 0 0 1 3 3v8a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3z M2 4v8a1 1 0 0 0 1 1h2v-10h-2a1 1 0 0 0-1 1z M6 3v10h7a1 1 0 0 0 1-1v-8a1 1 0 0 0-1-1z';
	}
};
var $elm$browser$Debugger$Main$icon = function (path) {
	return A4(
		$elm$virtual_dom$VirtualDom$nodeNS,
		'http://www.w3.org/2000/svg',
		'svg',
		_List_fromArray(
			[
				A2($elm$virtual_dom$VirtualDom$attribute, 'viewBox', '0 0 16 16'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'xmlns', 'http://www.w3.org/2000/svg'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'fill', 'currentColor'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'width', '16px'),
				A2($elm$virtual_dom$VirtualDom$attribute, 'height', '16px')
			]),
		_List_fromArray(
			[
				A4(
				$elm$virtual_dom$VirtualDom$nodeNS,
				'http://www.w3.org/2000/svg',
				'path',
				_List_fromArray(
					[
						A2($elm$virtual_dom$VirtualDom$attribute, 'd', path)
					]),
				_List_Nil)
			]));
};
var $elm$browser$Debugger$Main$viewHistoryButton = F3(
	function (label, msg, path) {
		return A2(
			$elm$html$Html$button,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'background', 'none'),
					A2($elm$html$Html$Attributes$style, 'border', 'none'),
					A2($elm$html$Html$Attributes$style, 'color', 'inherit'),
					A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
					$elm$html$Html$Events$onClick(msg)
				]),
			_List_fromArray(
				[
					$elm$browser$Debugger$Main$icon(path),
					A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'padding-left', '6px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]));
	});
var $elm$browser$Debugger$Main$viewHistoryOptions = function (layout) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '100%'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between'),
				A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
			]),
		_List_fromArray(
			[
				A3(
				$elm$browser$Debugger$Main$viewHistoryButton,
				'Swap Layout',
				$elm$browser$Debugger$Main$SwapLayout,
				$elm$browser$Debugger$Main$toHistoryIcon(layout)),
				A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'display', 'flex'),
						A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
						A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
						A2($elm$html$Html$Attributes$style, 'justify-content', 'space-between')
					]),
				_List_fromArray(
					[
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Import', $elm$browser$Debugger$Main$Import, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M10 2a1 1 0 0 0 -2 0v6a1 1 0 0 0 1 1h6a1 1 0 0 0 0-2h-3.586l4.293-4.293a1 1 0 0 0-1.414-1.414l-4.293 4.293z'),
						A3($elm$browser$Debugger$Main$viewHistoryButton, 'Export', $elm$browser$Debugger$Main$Export, 'M5 1a1 1 0 0 1 0 2h-2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1 a1 1 0 0 1 2 0a3 3 0 0 1-3 3h-10a3 3 0 0 1-3-3v-8a3 3 0 0 1 3-3z M9 3a1 1 0 1 1 0-2h6a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0v-3.586l-5.293 5.293 a1 1 0 0 1-1.414-1.414l5.293 -5.293z')
					]))
			]));
};
var $elm$browser$Debugger$Main$SliderJump = function (a) {
	return {$: 'SliderJump', a: a};
};
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$browser$Debugger$Main$isPlaying = function (maybeIndex) {
	if (maybeIndex.$ === 'Nothing') {
		return true;
	} else {
		return false;
	}
};
var $elm$html$Html$Attributes$max = $elm$html$Html$Attributes$stringProperty('max');
var $elm$html$Html$Attributes$min = $elm$html$Html$Attributes$stringProperty('min');
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $elm$browser$Debugger$Main$viewPlayButton = function (playing) {
	return A2(
		$elm$html$Html$button,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background', '#1293D8'),
				A2($elm$html$Html$Attributes$style, 'border', 'none'),
				A2($elm$html$Html$Attributes$style, 'color', 'white'),
				A2($elm$html$Html$Attributes$style, 'cursor', 'pointer'),
				A2($elm$html$Html$Attributes$style, 'width', '36px'),
				A2($elm$html$Html$Attributes$style, 'height', '36px'),
				$elm$html$Html$Events$onClick($elm$browser$Debugger$Main$Resume)
			]),
		_List_fromArray(
			[
				playing ? $elm$browser$Debugger$Main$icon('M2 2h4v12h-4v-12z M10 2h4v12h-4v-12z') : $elm$browser$Debugger$Main$icon('M2 2l12 7l-12 7z')
			]));
};
var $elm$browser$Debugger$Main$viewHistorySlider = F2(
	function (history, maybeIndex) {
		var lastIndex = $elm$browser$Debugger$History$size(history) - 1;
		var selectedIndex = A2($elm$core$Maybe$withDefault, lastIndex, maybeIndex);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'align-items', 'center'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '36px'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(50, 50, 50)')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Lazy$lazy,
					$elm$browser$Debugger$Main$viewPlayButton,
					$elm$browser$Debugger$Main$isPlaying(maybeIndex)),
					A2(
					$elm$html$Html$input,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$type_('range'),
							A2($elm$html$Html$Attributes$style, 'width', 'calc(100% - 56px)'),
							A2($elm$html$Html$Attributes$style, 'height', '36px'),
							A2($elm$html$Html$Attributes$style, 'margin', '0 10px'),
							$elm$html$Html$Attributes$min('0'),
							$elm$html$Html$Attributes$max(
							$elm$core$String$fromInt(lastIndex)),
							$elm$html$Html$Attributes$value(
							$elm$core$String$fromInt(selectedIndex)),
							$elm$html$Html$Events$onInput(
							A2(
								$elm$core$Basics$composeR,
								$elm$core$String$toInt,
								A2(
									$elm$core$Basics$composeR,
									$elm$core$Maybe$withDefault(lastIndex),
									$elm$browser$Debugger$Main$SliderJump)))
						]),
					_List_Nil)
				]));
	});
var $elm$browser$Debugger$Main$viewHistory = F3(
	function (maybeIndex, history, layout) {
		var block = $elm$browser$Debugger$Main$toMouseBlocker(layout);
		var _v0 = $elm$browser$Debugger$Main$toHistoryPercents(layout);
		var w = _v0.a;
		var h = _v0.b;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'width', w),
					A2($elm$html$Html$Attributes$style, 'height', h),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
					A2($elm$html$Html$Attributes$style, 'color', '#DDDDDD'),
					A2($elm$html$Html$Attributes$style, 'background-color', 'rgb(61, 61, 61)'),
					A2($elm$html$Html$Attributes$style, 'pointer-events', block),
					A2($elm$html$Html$Attributes$style, 'user-select', block)
				]),
			_List_fromArray(
				[
					A2($elm$browser$Debugger$Main$viewHistorySlider, history, maybeIndex),
					A2(
					$elm$html$Html$map,
					$elm$browser$Debugger$Main$Jump,
					A2($elm$browser$Debugger$History$view, maybeIndex, history)),
					A2($elm$html$Html$Lazy$lazy, $elm$browser$Debugger$Main$viewHistoryOptions, layout)
				]));
	});
var $elm$browser$Debugger$Main$popoutView = function (model) {
	var maybeIndex = function () {
		var _v0 = model.state;
		if (_v0.$ === 'Running') {
			return $elm$core$Maybe$Nothing;
		} else {
			var index = _v0.a;
			return $elm$core$Maybe$Just(index);
		}
	}();
	var historyToRender = $elm$browser$Debugger$Main$cachedHistory(model);
	return A3(
		$elm$html$Html$node,
		'body',
		_Utils_ap(
			$elm$browser$Debugger$Main$toDragListeners(model.layout),
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin', '0'),
					A2($elm$html$Html$Attributes$style, 'padding', '0'),
					A2($elm$html$Html$Attributes$style, 'width', '100%'),
					A2($elm$html$Html$Attributes$style, 'height', '100%'),
					A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2(
					$elm$html$Html$Attributes$style,
					'flex-direction',
					$elm$browser$Debugger$Main$toFlexDirection(model.layout))
				])),
		_List_fromArray(
			[
				A3($elm$browser$Debugger$Main$viewHistory, maybeIndex, historyToRender, model.layout),
				$elm$browser$Debugger$Main$viewDragZone(model.layout),
				A3($elm$browser$Debugger$Main$viewExpando, model.expandoMsg, model.expandoModel, model.layout)
			]));
};
var $elm$browser$Debugger$Overlay$BlockAll = {$: 'BlockAll'};
var $elm$browser$Debugger$Overlay$toBlockerType = F2(
	function (isPaused, state) {
		switch (state.$) {
			case 'None':
				return isPaused ? $elm$browser$Debugger$Overlay$BlockAll : $elm$browser$Debugger$Overlay$BlockNone;
			case 'BadMetadata':
				return $elm$browser$Debugger$Overlay$BlockMost;
			case 'BadImport':
				return $elm$browser$Debugger$Overlay$BlockMost;
			default:
				return $elm$browser$Debugger$Overlay$BlockMost;
		}
	});
var $elm$browser$Debugger$Main$toBlockerType = function (model) {
	return A2(
		$elm$browser$Debugger$Overlay$toBlockerType,
		$elm$browser$Debugger$Main$isPaused(model.state),
		model.overlay);
};
var $elm$browser$Debugger$Main$Horizontal = F3(
	function (a, b, c) {
		return {$: 'Horizontal', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$Running = function (a) {
	return {$: 'Running', a: a};
};
var $elm$browser$Debugger$Main$Static = {$: 'Static'};
var $elm$browser$Debugger$Metadata$Error = F2(
	function (message, problems) {
		return {message: message, problems: problems};
	});
var $elm$browser$Debugger$Metadata$Metadata = F2(
	function (versions, types) {
		return {types: types, versions: versions};
	});
var $elm$browser$Debugger$Metadata$Types = F3(
	function (message, aliases, unions) {
		return {aliases: aliases, message: message, unions: unions};
	});
var $elm$browser$Debugger$Metadata$Alias = F2(
	function (args, tipe) {
		return {args: args, tipe: tipe};
	});
var $elm$browser$Debugger$Metadata$decodeAlias = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Alias,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2($elm$json$Json$Decode$field, 'type', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$Union = F2(
	function (args, tags) {
		return {args: args, tags: tags};
	});
var $elm$browser$Debugger$Metadata$decodeUnion = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Union,
	A2(
		$elm$json$Json$Decode$field,
		'args',
		$elm$json$Json$Decode$list($elm$json$Json$Decode$string)),
	A2(
		$elm$json$Json$Decode$field,
		'tags',
		$elm$json$Json$Decode$dict(
			$elm$json$Json$Decode$list($elm$json$Json$Decode$string))));
var $elm$browser$Debugger$Metadata$decodeTypes = A4(
	$elm$json$Json$Decode$map3,
	$elm$browser$Debugger$Metadata$Types,
	A2($elm$json$Json$Decode$field, 'message', $elm$json$Json$Decode$string),
	A2(
		$elm$json$Json$Decode$field,
		'aliases',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeAlias)),
	A2(
		$elm$json$Json$Decode$field,
		'unions',
		$elm$json$Json$Decode$dict($elm$browser$Debugger$Metadata$decodeUnion)));
var $elm$browser$Debugger$Metadata$Versions = function (elm) {
	return {elm: elm};
};
var $elm$browser$Debugger$Metadata$decodeVersions = A2(
	$elm$json$Json$Decode$map,
	$elm$browser$Debugger$Metadata$Versions,
	A2($elm$json$Json$Decode$field, 'elm', $elm$json$Json$Decode$string));
var $elm$browser$Debugger$Metadata$decoder = A3(
	$elm$json$Json$Decode$map2,
	$elm$browser$Debugger$Metadata$Metadata,
	A2($elm$json$Json$Decode$field, 'versions', $elm$browser$Debugger$Metadata$decodeVersions),
	A2($elm$json$Json$Decode$field, 'types', $elm$browser$Debugger$Metadata$decodeTypes));
var $elm$browser$Debugger$Metadata$ProblemType = F2(
	function (name, problems) {
		return {name: name, problems: problems};
	});
var $elm$browser$Debugger$Metadata$hasProblem = F2(
	function (tipe, _v0) {
		var problem = _v0.a;
		var token = _v0.b;
		return A2($elm$core$String$contains, token, tipe) ? $elm$core$Maybe$Just(problem) : $elm$core$Maybe$Nothing;
	});
var $elm$browser$Debugger$Metadata$Decoder = {$: 'Decoder'};
var $elm$browser$Debugger$Metadata$Function = {$: 'Function'};
var $elm$browser$Debugger$Metadata$Process = {$: 'Process'};
var $elm$browser$Debugger$Metadata$Program = {$: 'Program'};
var $elm$browser$Debugger$Metadata$Request = {$: 'Request'};
var $elm$browser$Debugger$Metadata$Socket = {$: 'Socket'};
var $elm$browser$Debugger$Metadata$Task = {$: 'Task'};
var $elm$browser$Debugger$Metadata$VirtualDom = {$: 'VirtualDom'};
var $elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
	[
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Function, '->'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Decoder, 'Json.Decode.Decoder'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Task, 'Task.Task'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Process, 'Process.Id'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Socket, 'WebSocket.LowLevel.WebSocket'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Request, 'Http.Request'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$Program, 'Platform.Program'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Node'),
		_Utils_Tuple2($elm$browser$Debugger$Metadata$VirtualDom, 'VirtualDom.Attribute')
	]);
var $elm$browser$Debugger$Metadata$findProblems = function (tipe) {
	return A2(
		$elm$core$List$filterMap,
		$elm$browser$Debugger$Metadata$hasProblem(tipe),
		$elm$browser$Debugger$Metadata$problemTable);
};
var $elm$browser$Debugger$Metadata$collectBadAliases = F3(
	function (name, _v0, list) {
		var tipe = _v0.tipe;
		var _v1 = $elm$browser$Debugger$Metadata$findProblems(tipe);
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$browser$Debugger$Metadata$collectBadUnions = F3(
	function (name, _v0, list) {
		var tags = _v0.tags;
		var _v1 = A2(
			$elm$core$List$concatMap,
			$elm$browser$Debugger$Metadata$findProblems,
			$elm$core$List$concat(
				$elm$core$Dict$values(tags)));
		if (!_v1.b) {
			return list;
		} else {
			var problems = _v1;
			return A2(
				$elm$core$List$cons,
				A2($elm$browser$Debugger$Metadata$ProblemType, name, problems),
				list);
		}
	});
var $elm$browser$Debugger$Metadata$isPortable = function (_v0) {
	var types = _v0.types;
	var badAliases = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadAliases, _List_Nil, types.aliases);
	var _v1 = A3($elm$core$Dict$foldl, $elm$browser$Debugger$Metadata$collectBadUnions, badAliases, types.unions);
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var problems = _v1;
		return $elm$core$Maybe$Just(
			A2($elm$browser$Debugger$Metadata$Error, types.message, problems));
	}
};
var $elm$browser$Debugger$Metadata$decode = function (value) {
	var _v0 = A2($elm$json$Json$Decode$decodeValue, $elm$browser$Debugger$Metadata$decoder, value);
	if (_v0.$ === 'Err') {
		return $elm$core$Result$Err(
			A2($elm$browser$Debugger$Metadata$Error, 'The compiler is generating bad metadata. This is a compiler bug!', _List_Nil));
	} else {
		var metadata = _v0.a;
		var _v1 = $elm$browser$Debugger$Metadata$isPortable(metadata);
		if (_v1.$ === 'Nothing') {
			return $elm$core$Result$Ok(metadata);
		} else {
			var error = _v1.a;
			return $elm$core$Result$Err(error);
		}
	}
};
var $elm$browser$Debugger$History$History = F3(
	function (snapshots, recent, numMessages) {
		return {numMessages: numMessages, recent: recent, snapshots: snapshots};
	});
var $elm$browser$Debugger$History$RecentHistory = F3(
	function (model, messages, numMessages) {
		return {messages: messages, model: model, numMessages: numMessages};
	});
var $elm$browser$Debugger$History$empty = function (model) {
	return A3(
		$elm$browser$Debugger$History$History,
		$elm$core$Array$empty,
		A3($elm$browser$Debugger$History$RecentHistory, model, _List_Nil, 0),
		0);
};
var $elm$browser$Debugger$Expando$initHelp = F2(
	function (isOuter, expando) {
		switch (expando.$) {
			case 'S':
				return expando;
			case 'Primitive':
				return expando;
			case 'Sequence':
				var seqType = expando.a;
				var isClosed = expando.b;
				var items = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Sequence,
					seqType,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						items)) : (($elm$core$List$length(items) <= 8) ? A3($elm$browser$Debugger$Expando$Sequence, seqType, false, items) : expando);
			case 'Dictionary':
				var isClosed = expando.a;
				var keyValuePairs = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Dictionary,
					false,
					A2(
						$elm$core$List$map,
						function (_v1) {
							var k = _v1.a;
							var v = _v1.b;
							return _Utils_Tuple2(
								k,
								A2($elm$browser$Debugger$Expando$initHelp, false, v));
						},
						keyValuePairs)) : (($elm$core$List$length(keyValuePairs) <= 8) ? A2($elm$browser$Debugger$Expando$Dictionary, false, keyValuePairs) : expando);
			case 'Record':
				var isClosed = expando.a;
				var entries = expando.b;
				return isOuter ? A2(
					$elm$browser$Debugger$Expando$Record,
					false,
					A2(
						$elm$core$Dict$map,
						F2(
							function (_v2, v) {
								return A2($elm$browser$Debugger$Expando$initHelp, false, v);
							}),
						entries)) : (($elm$core$Dict$size(entries) <= 4) ? A2($elm$browser$Debugger$Expando$Record, false, entries) : expando);
			default:
				var maybeName = expando.a;
				var isClosed = expando.b;
				var args = expando.c;
				return isOuter ? A3(
					$elm$browser$Debugger$Expando$Constructor,
					maybeName,
					false,
					A2(
						$elm$core$List$map,
						$elm$browser$Debugger$Expando$initHelp(false),
						args)) : (($elm$core$List$length(args) <= 4) ? A3($elm$browser$Debugger$Expando$Constructor, maybeName, false, args) : expando);
		}
	});
var $elm$browser$Debugger$Expando$init = function (value) {
	return A2(
		$elm$browser$Debugger$Expando$initHelp,
		true,
		_Debugger_init(value));
};
var $elm$browser$Debugger$Overlay$None = {$: 'None'};
var $elm$browser$Debugger$Overlay$none = $elm$browser$Debugger$Overlay$None;
var $elm$browser$Debugger$Main$wrapInit = F4(
	function (metadata, popout, init, flags) {
		var _v0 = init(flags);
		var userModel = _v0.a;
		var userCommands = _v0.b;
		return _Utils_Tuple2(
			{
				expandoModel: $elm$browser$Debugger$Expando$init(userModel),
				expandoMsg: $elm$browser$Debugger$Expando$init(_Utils_Tuple0),
				history: $elm$browser$Debugger$History$empty(userModel),
				layout: A3($elm$browser$Debugger$Main$Horizontal, $elm$browser$Debugger$Main$Static, 0.3, 0.5),
				metadata: $elm$browser$Debugger$Metadata$decode(metadata),
				overlay: $elm$browser$Debugger$Overlay$none,
				popout: popout,
				state: $elm$browser$Debugger$Main$Running(userModel)
			},
			A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCommands));
	});
var $elm$browser$Debugger$Main$getLatestModel = function (state) {
	if (state.$ === 'Running') {
		var model = state.a;
		return model;
	} else {
		var model = state.c;
		return model;
	}
};
var $elm$browser$Debugger$Main$wrapSubs = F2(
	function (subscriptions, model) {
		return A2(
			$elm$core$Platform$Sub$map,
			$elm$browser$Debugger$Main$UserMsg,
			subscriptions(
				$elm$browser$Debugger$Main$getLatestModel(model.state)));
	});
var $elm$browser$Debugger$Main$Moving = {$: 'Moving'};
var $elm$browser$Debugger$Main$Paused = F5(
	function (a, b, c, d, e) {
		return {$: 'Paused', a: a, b: b, c: c, d: d, e: e};
	});
var $elm$browser$Debugger$History$Snapshot = F2(
	function (model, messages) {
		return {messages: messages, model: model};
	});
var $elm$browser$Debugger$History$addRecent = F3(
	function (msg, newModel, _v0) {
		var model = _v0.model;
		var messages = _v0.messages;
		var numMessages = _v0.numMessages;
		return _Utils_eq(numMessages, $elm$browser$Debugger$History$maxSnapshotSize) ? _Utils_Tuple2(
			$elm$core$Maybe$Just(
				A2(
					$elm$browser$Debugger$History$Snapshot,
					model,
					$elm$core$Array$fromList(messages))),
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				newModel,
				_List_fromArray(
					[msg]),
				1)) : _Utils_Tuple2(
			$elm$core$Maybe$Nothing,
			A3(
				$elm$browser$Debugger$History$RecentHistory,
				model,
				A2($elm$core$List$cons, msg, messages),
				numMessages + 1));
	});
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (value.$ === 'SubTree') {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $elm$browser$Debugger$History$add = F3(
	function (msg, model, _v0) {
		var snapshots = _v0.snapshots;
		var recent = _v0.recent;
		var numMessages = _v0.numMessages;
		var _v1 = A3($elm$browser$Debugger$History$addRecent, msg, model, recent);
		if (_v1.a.$ === 'Just') {
			var snapshot = _v1.a.a;
			var newRecent = _v1.b;
			return A3(
				$elm$browser$Debugger$History$History,
				A2($elm$core$Array$push, snapshot, snapshots),
				newRecent,
				numMessages + 1);
		} else {
			var _v2 = _v1.a;
			var newRecent = _v1.b;
			return A3($elm$browser$Debugger$History$History, snapshots, newRecent, numMessages + 1);
		}
	});
var $elm$browser$Debugger$Overlay$BadImport = function (a) {
	return {$: 'BadImport', a: a};
};
var $elm$browser$Debugger$Overlay$RiskyImport = F2(
	function (a, b) {
		return {$: 'RiskyImport', a: a, b: b};
	});
var $elm$browser$Debugger$Report$VersionChanged = F2(
	function (a, b) {
		return {$: 'VersionChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$MessageChanged = F2(
	function (a, b) {
		return {$: 'MessageChanged', a: a, b: b};
	});
var $elm$browser$Debugger$Report$SomethingChanged = function (a) {
	return {$: 'SomethingChanged', a: a};
};
var $elm$browser$Debugger$Report$AliasChange = function (a) {
	return {$: 'AliasChange', a: a};
};
var $elm$browser$Debugger$Metadata$checkAlias = F4(
	function (name, old, _new, changes) {
		return (_Utils_eq(old.tipe, _new.tipe) && _Utils_eq(old.args, _new.args)) ? changes : A2(
			$elm$core$List$cons,
			$elm$browser$Debugger$Report$AliasChange(name),
			changes);
	});
var $elm$browser$Debugger$Report$UnionChange = F2(
	function (a, b) {
		return {$: 'UnionChange', a: a, b: b};
	});
var $elm$browser$Debugger$Metadata$addTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				added: A2($elm$core$List$cons, tag, changes.added)
			});
	});
var $elm$browser$Debugger$Metadata$checkTag = F4(
	function (tag, old, _new, changes) {
		return _Utils_eq(old, _new) ? changes : _Utils_update(
			changes,
			{
				changed: A2($elm$core$List$cons, tag, changes.changed)
			});
	});
var $elm$browser$Debugger$Report$TagChanges = F4(
	function (removed, changed, added, argsMatch) {
		return {added: added, argsMatch: argsMatch, changed: changed, removed: removed};
	});
var $elm$browser$Debugger$Report$emptyTagChanges = function (argsMatch) {
	return A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, argsMatch);
};
var $elm$browser$Debugger$Report$hasTagChanges = function (tagChanges) {
	return _Utils_eq(
		tagChanges,
		A4($elm$browser$Debugger$Report$TagChanges, _List_Nil, _List_Nil, _List_Nil, true));
};
var $elm$browser$Debugger$Metadata$removeTag = F3(
	function (tag, _v0, changes) {
		return _Utils_update(
			changes,
			{
				removed: A2($elm$core$List$cons, tag, changes.removed)
			});
	});
var $elm$browser$Debugger$Metadata$checkUnion = F4(
	function (name, old, _new, changes) {
		var tagChanges = A6(
			$elm$core$Dict$merge,
			$elm$browser$Debugger$Metadata$removeTag,
			$elm$browser$Debugger$Metadata$checkTag,
			$elm$browser$Debugger$Metadata$addTag,
			old.tags,
			_new.tags,
			$elm$browser$Debugger$Report$emptyTagChanges(
				_Utils_eq(old.args, _new.args)));
		return $elm$browser$Debugger$Report$hasTagChanges(tagChanges) ? changes : A2(
			$elm$core$List$cons,
			A2($elm$browser$Debugger$Report$UnionChange, name, tagChanges),
			changes);
	});
var $elm$browser$Debugger$Metadata$ignore = F3(
	function (key, value, report) {
		return report;
	});
var $elm$browser$Debugger$Metadata$checkTypes = F2(
	function (old, _new) {
		return (!_Utils_eq(old.message, _new.message)) ? A2($elm$browser$Debugger$Report$MessageChanged, old.message, _new.message) : $elm$browser$Debugger$Report$SomethingChanged(
			A6(
				$elm$core$Dict$merge,
				$elm$browser$Debugger$Metadata$ignore,
				$elm$browser$Debugger$Metadata$checkUnion,
				$elm$browser$Debugger$Metadata$ignore,
				old.unions,
				_new.unions,
				A6($elm$core$Dict$merge, $elm$browser$Debugger$Metadata$ignore, $elm$browser$Debugger$Metadata$checkAlias, $elm$browser$Debugger$Metadata$ignore, old.aliases, _new.aliases, _List_Nil)));
	});
var $elm$browser$Debugger$Metadata$check = F2(
	function (old, _new) {
		return (!_Utils_eq(old.versions.elm, _new.versions.elm)) ? A2($elm$browser$Debugger$Report$VersionChanged, old.versions.elm, _new.versions.elm) : A2($elm$browser$Debugger$Metadata$checkTypes, old.types, _new.types);
	});
var $elm$browser$Debugger$Report$CorruptHistory = {$: 'CorruptHistory'};
var $elm$browser$Debugger$Overlay$corruptImport = $elm$browser$Debugger$Overlay$BadImport($elm$browser$Debugger$Report$CorruptHistory);
var $elm$browser$Debugger$Report$Fine = {$: 'Fine'};
var $elm$browser$Debugger$Report$Impossible = {$: 'Impossible'};
var $elm$browser$Debugger$Report$Risky = {$: 'Risky'};
var $elm$browser$Debugger$Report$some = function (list) {
	return !$elm$core$List$isEmpty(list);
};
var $elm$browser$Debugger$Report$evaluateChange = function (change) {
	if (change.$ === 'AliasChange') {
		return $elm$browser$Debugger$Report$Impossible;
	} else {
		var removed = change.b.removed;
		var changed = change.b.changed;
		var added = change.b.added;
		var argsMatch = change.b.argsMatch;
		return ((!argsMatch) || ($elm$browser$Debugger$Report$some(changed) || $elm$browser$Debugger$Report$some(removed))) ? $elm$browser$Debugger$Report$Impossible : ($elm$browser$Debugger$Report$some(added) ? $elm$browser$Debugger$Report$Risky : $elm$browser$Debugger$Report$Fine);
	}
};
var $elm$browser$Debugger$Report$worstCase = F2(
	function (status, statusList) {
		worstCase:
		while (true) {
			if (!statusList.b) {
				return status;
			} else {
				switch (statusList.a.$) {
					case 'Impossible':
						var _v1 = statusList.a;
						return $elm$browser$Debugger$Report$Impossible;
					case 'Risky':
						var _v2 = statusList.a;
						var rest = statusList.b;
						var $temp$status = $elm$browser$Debugger$Report$Risky,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
					default:
						var _v3 = statusList.a;
						var rest = statusList.b;
						var $temp$status = status,
							$temp$statusList = rest;
						status = $temp$status;
						statusList = $temp$statusList;
						continue worstCase;
				}
			}
		}
	});
var $elm$browser$Debugger$Report$evaluate = function (report) {
	switch (report.$) {
		case 'CorruptHistory':
			return $elm$browser$Debugger$Report$Impossible;
		case 'VersionChanged':
			return $elm$browser$Debugger$Report$Impossible;
		case 'MessageChanged':
			return $elm$browser$Debugger$Report$Impossible;
		default:
			var changes = report.a;
			return A2(
				$elm$browser$Debugger$Report$worstCase,
				$elm$browser$Debugger$Report$Fine,
				A2($elm$core$List$map, $elm$browser$Debugger$Report$evaluateChange, changes));
	}
};
var $elm$browser$Debugger$Overlay$uploadDecoder = A3(
	$elm$json$Json$Decode$map2,
	F2(
		function (x, y) {
			return _Utils_Tuple2(x, y);
		}),
	A2($elm$json$Json$Decode$field, 'metadata', $elm$browser$Debugger$Metadata$decoder),
	A2($elm$json$Json$Decode$field, 'history', $elm$json$Json$Decode$value));
var $elm$browser$Debugger$Overlay$assessImport = F2(
	function (metadata, jsonString) {
		var _v0 = A2($elm$json$Json$Decode$decodeString, $elm$browser$Debugger$Overlay$uploadDecoder, jsonString);
		if (_v0.$ === 'Err') {
			return $elm$core$Result$Err($elm$browser$Debugger$Overlay$corruptImport);
		} else {
			var _v1 = _v0.a;
			var foreignMetadata = _v1.a;
			var rawHistory = _v1.b;
			var report = A2($elm$browser$Debugger$Metadata$check, foreignMetadata, metadata);
			var _v2 = $elm$browser$Debugger$Report$evaluate(report);
			switch (_v2.$) {
				case 'Impossible':
					return $elm$core$Result$Err(
						$elm$browser$Debugger$Overlay$BadImport(report));
				case 'Risky':
					return $elm$core$Result$Err(
						A2($elm$browser$Debugger$Overlay$RiskyImport, report, rawHistory));
				default:
					return $elm$core$Result$Ok(rawHistory);
			}
		}
	});
var $elm$browser$Debugger$Overlay$close = F2(
	function (msg, state) {
		switch (state.$) {
			case 'None':
				return $elm$core$Maybe$Nothing;
			case 'BadMetadata':
				return $elm$core$Maybe$Nothing;
			case 'BadImport':
				return $elm$core$Maybe$Nothing;
			default:
				var rawHistory = state.b;
				if (msg.$ === 'Cancel') {
					return $elm$core$Maybe$Nothing;
				} else {
					return $elm$core$Maybe$Just(rawHistory);
				}
		}
	});
var $elm$browser$Debugger$History$elmToJs = A2($elm$core$Basics$composeR, _Json_wrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$encodeHelp = F2(
	function (snapshot, allMessages) {
		return A3($elm$core$Array$foldl, $elm$core$List$cons, allMessages, snapshot.messages);
	});
var $elm$browser$Debugger$History$encode = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	return A2(
		$elm$json$Json$Encode$list,
		$elm$browser$Debugger$History$elmToJs,
		A3(
			$elm$core$Array$foldr,
			$elm$browser$Debugger$History$encodeHelp,
			$elm$core$List$reverse(recent.messages),
			snapshots));
};
var $elm$browser$Debugger$Metadata$encodeAlias = function (_v0) {
	var args = _v0.args;
	var tipe = _v0.tipe;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'type',
				$elm$json$Json$Encode$string(tipe))
			]));
};
var $elm$browser$Debugger$Metadata$encodeDict = F2(
	function (f, dict) {
		return $elm$json$Json$Encode$object(
			$elm$core$Dict$toList(
				A2(
					$elm$core$Dict$map,
					F2(
						function (key, value) {
							return f(value);
						}),
					dict)));
	});
var $elm$browser$Debugger$Metadata$encodeUnion = function (_v0) {
	var args = _v0.args;
	var tags = _v0.tags;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'args',
				A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, args)),
				_Utils_Tuple2(
				'tags',
				A2(
					$elm$browser$Debugger$Metadata$encodeDict,
					$elm$json$Json$Encode$list($elm$json$Json$Encode$string),
					tags))
			]));
};
var $elm$browser$Debugger$Metadata$encodeTypes = function (_v0) {
	var message = _v0.message;
	var unions = _v0.unions;
	var aliases = _v0.aliases;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'message',
				$elm$json$Json$Encode$string(message)),
				_Utils_Tuple2(
				'aliases',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeAlias, aliases)),
				_Utils_Tuple2(
				'unions',
				A2($elm$browser$Debugger$Metadata$encodeDict, $elm$browser$Debugger$Metadata$encodeUnion, unions))
			]));
};
var $elm$browser$Debugger$Metadata$encodeVersions = function (_v0) {
	var elm = _v0.elm;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'elm',
				$elm$json$Json$Encode$string(elm))
			]));
};
var $elm$browser$Debugger$Metadata$encode = function (_v0) {
	var versions = _v0.versions;
	var types = _v0.types;
	return $elm$json$Json$Encode$object(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'versions',
				$elm$browser$Debugger$Metadata$encodeVersions(versions)),
				_Utils_Tuple2(
				'types',
				$elm$browser$Debugger$Metadata$encodeTypes(types))
			]));
};
var $elm$browser$Debugger$Main$download = F2(
	function (metadata, history) {
		var historyLength = $elm$browser$Debugger$History$size(history);
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return $elm$browser$Debugger$Main$NoOp;
			},
			A2(
				_Debugger_download,
				historyLength,
				_Json_unwrap(
					$elm$json$Json$Encode$object(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'metadata',
								$elm$browser$Debugger$Metadata$encode(metadata)),
								_Utils_Tuple2(
								'history',
								$elm$browser$Debugger$History$encode(history))
							])))));
	});
var $elm$browser$Debugger$Main$Vertical = F3(
	function (a, b, c) {
		return {$: 'Vertical', a: a, b: b, c: c};
	});
var $elm$browser$Debugger$Main$drag = F2(
	function (info, layout) {
		if (layout.$ === 'Horizontal') {
			var status = layout.a;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, info.x / info.width, y);
		} else {
			var status = layout.a;
			var x = layout.b;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, info.y / info.height);
		}
	});
var $elm$browser$Debugger$History$Stepping = F2(
	function (a, b) {
		return {$: 'Stepping', a: a, b: b};
	});
var $elm$browser$Debugger$History$Done = F2(
	function (a, b) {
		return {$: 'Done', a: a, b: b};
	});
var $elm$browser$Debugger$History$getHelp = F3(
	function (update, msg, getResult) {
		if (getResult.$ === 'Done') {
			return getResult;
		} else {
			var n = getResult.a;
			var model = getResult.b;
			return (!n) ? A2(
				$elm$browser$Debugger$History$Done,
				msg,
				A2(update, msg, model).a) : A2(
				$elm$browser$Debugger$History$Stepping,
				n - 1,
				A2(update, msg, model).a);
		}
	});
var $elm$browser$Debugger$History$undone = function (getResult) {
	undone:
	while (true) {
		if (getResult.$ === 'Done') {
			var msg = getResult.a;
			var model = getResult.b;
			return _Utils_Tuple2(model, msg);
		} else {
			var $temp$getResult = getResult;
			getResult = $temp$getResult;
			continue undone;
		}
	}
};
var $elm$browser$Debugger$History$get = F3(
	function (update, index, history) {
		get:
		while (true) {
			var recent = history.recent;
			var snapshotMax = history.numMessages - recent.numMessages;
			if (_Utils_cmp(index, snapshotMax) > -1) {
				return $elm$browser$Debugger$History$undone(
					A3(
						$elm$core$List$foldr,
						$elm$browser$Debugger$History$getHelp(update),
						A2($elm$browser$Debugger$History$Stepping, index - snapshotMax, recent.model),
						recent.messages));
			} else {
				var _v0 = A2($elm$core$Array$get, (index / $elm$browser$Debugger$History$maxSnapshotSize) | 0, history.snapshots);
				if (_v0.$ === 'Nothing') {
					var $temp$update = update,
						$temp$index = index,
						$temp$history = history;
					update = $temp$update;
					index = $temp$index;
					history = $temp$history;
					continue get;
				} else {
					var model = _v0.a.model;
					var messages = _v0.a.messages;
					return $elm$browser$Debugger$History$undone(
						A3(
							$elm$core$Array$foldr,
							$elm$browser$Debugger$History$getHelp(update),
							A2($elm$browser$Debugger$History$Stepping, index % $elm$browser$Debugger$History$maxSnapshotSize, model),
							messages));
				}
			}
		}
	});
var $elm$browser$Debugger$History$getRecentMsg = function (history) {
	getRecentMsg:
	while (true) {
		var _v0 = history.recent.messages;
		if (!_v0.b) {
			var $temp$history = history;
			history = $temp$history;
			continue getRecentMsg;
		} else {
			var first = _v0.a;
			return first;
		}
	}
};
var $elm$browser$Debugger$Expando$mergeDictHelp = F3(
	function (oldDict, key, value) {
		var _v12 = A2($elm$core$Dict$get, key, oldDict);
		if (_v12.$ === 'Nothing') {
			return value;
		} else {
			var oldValue = _v12.a;
			return A2($elm$browser$Debugger$Expando$mergeHelp, oldValue, value);
		}
	});
var $elm$browser$Debugger$Expando$mergeHelp = F2(
	function (old, _new) {
		var _v3 = _Utils_Tuple2(old, _new);
		_v3$6:
		while (true) {
			switch (_v3.b.$) {
				case 'S':
					return _new;
				case 'Primitive':
					return _new;
				case 'Sequence':
					if (_v3.a.$ === 'Sequence') {
						var _v4 = _v3.a;
						var isClosed = _v4.b;
						var oldValues = _v4.c;
						var _v5 = _v3.b;
						var seqType = _v5.a;
						var newValues = _v5.c;
						return A3(
							$elm$browser$Debugger$Expando$Sequence,
							seqType,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
				case 'Dictionary':
					if (_v3.a.$ === 'Dictionary') {
						var _v6 = _v3.a;
						var isClosed = _v6.a;
						var _v7 = _v3.b;
						var keyValuePairs = _v7.b;
						return A2($elm$browser$Debugger$Expando$Dictionary, isClosed, keyValuePairs);
					} else {
						break _v3$6;
					}
				case 'Record':
					if (_v3.a.$ === 'Record') {
						var _v8 = _v3.a;
						var isClosed = _v8.a;
						var oldDict = _v8.b;
						var _v9 = _v3.b;
						var newDict = _v9.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A2(
								$elm$core$Dict$map,
								$elm$browser$Debugger$Expando$mergeDictHelp(oldDict),
								newDict));
					} else {
						break _v3$6;
					}
				default:
					if (_v3.a.$ === 'Constructor') {
						var _v10 = _v3.a;
						var isClosed = _v10.b;
						var oldValues = _v10.c;
						var _v11 = _v3.b;
						var maybeName = _v11.a;
						var newValues = _v11.c;
						return A3(
							$elm$browser$Debugger$Expando$Constructor,
							maybeName,
							isClosed,
							A2($elm$browser$Debugger$Expando$mergeListHelp, oldValues, newValues));
					} else {
						break _v3$6;
					}
			}
		}
		return _new;
	});
var $elm$browser$Debugger$Expando$mergeListHelp = F2(
	function (olds, news) {
		var _v0 = _Utils_Tuple2(olds, news);
		if (!_v0.a.b) {
			return news;
		} else {
			if (!_v0.b.b) {
				return news;
			} else {
				var _v1 = _v0.a;
				var x = _v1.a;
				var xs = _v1.b;
				var _v2 = _v0.b;
				var y = _v2.a;
				var ys = _v2.b;
				return A2(
					$elm$core$List$cons,
					A2($elm$browser$Debugger$Expando$mergeHelp, x, y),
					A2($elm$browser$Debugger$Expando$mergeListHelp, xs, ys));
			}
		}
	});
var $elm$browser$Debugger$Expando$merge = F2(
	function (value, expando) {
		return A2(
			$elm$browser$Debugger$Expando$mergeHelp,
			expando,
			_Debugger_init(value));
	});
var $elm$browser$Debugger$Main$jumpUpdate = F3(
	function (update, index, model) {
		var history = $elm$browser$Debugger$Main$cachedHistory(model);
		var currentMsg = $elm$browser$Debugger$History$getRecentMsg(history);
		var currentModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
		var _v0 = A3($elm$browser$Debugger$History$get, update, index, history);
		var indexModel = _v0.a;
		var indexMsg = _v0.b;
		return _Utils_update(
			model,
			{
				expandoModel: A2($elm$browser$Debugger$Expando$merge, indexModel, model.expandoModel),
				expandoMsg: A2($elm$browser$Debugger$Expando$merge, indexMsg, model.expandoMsg),
				state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, currentModel, currentMsg, history)
			});
	});
var $elm$browser$Debugger$History$jsToElm = A2($elm$core$Basics$composeR, _Json_unwrap, _Debugger_unsafeCoerce);
var $elm$browser$Debugger$History$decoder = F2(
	function (initialModel, update) {
		var addMessage = F2(
			function (rawMsg, _v0) {
				var model = _v0.a;
				var history = _v0.b;
				var msg = $elm$browser$Debugger$History$jsToElm(rawMsg);
				return _Utils_Tuple2(
					A2(update, msg, model),
					A3($elm$browser$Debugger$History$add, msg, model, history));
			});
		var updateModel = function (rawMsgs) {
			return A3(
				$elm$core$List$foldl,
				addMessage,
				_Utils_Tuple2(
					initialModel,
					$elm$browser$Debugger$History$empty(initialModel)),
				rawMsgs);
		};
		return A2(
			$elm$json$Json$Decode$map,
			updateModel,
			$elm$json$Json$Decode$list($elm$json$Json$Decode$value));
	});
var $elm$browser$Debugger$History$getInitialModel = function (_v0) {
	var snapshots = _v0.snapshots;
	var recent = _v0.recent;
	var _v1 = A2($elm$core$Array$get, 0, snapshots);
	if (_v1.$ === 'Just') {
		var model = _v1.a.model;
		return model;
	} else {
		return recent.model;
	}
};
var $elm$browser$Debugger$Main$loadNewHistory = F3(
	function (rawHistory, update, model) {
		var pureUserUpdate = F2(
			function (msg, userModel) {
				return A2(update, msg, userModel).a;
			});
		var initialUserModel = $elm$browser$Debugger$History$getInitialModel(model.history);
		var decoder = A2($elm$browser$Debugger$History$decoder, initialUserModel, pureUserUpdate);
		var _v0 = A2($elm$json$Json$Decode$decodeValue, decoder, rawHistory);
		if (_v0.$ === 'Err') {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{overlay: $elm$browser$Debugger$Overlay$corruptImport}),
				$elm$core$Platform$Cmd$none);
		} else {
			var _v1 = _v0.a;
			var latestUserModel = _v1.a;
			var newHistory = _v1.b;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						expandoModel: $elm$browser$Debugger$Expando$init(latestUserModel),
						expandoMsg: $elm$browser$Debugger$Expando$init(
							$elm$browser$Debugger$History$getRecentMsg(newHistory)),
						history: newHistory,
						overlay: $elm$browser$Debugger$Overlay$none,
						state: $elm$browser$Debugger$Main$Running(latestUserModel)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$scroll = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
		_Debugger_scroll(popout));
};
var $elm$browser$Debugger$Main$scrollTo = F2(
	function (id, popout) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
			A2(_Debugger_scrollTo, id, popout));
	});
var $elm$browser$Debugger$Main$setDragStatus = F2(
	function (status, layout) {
		if (layout.$ === 'Horizontal') {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Horizontal, status, x, y);
		} else {
			var x = layout.b;
			var y = layout.c;
			return A3($elm$browser$Debugger$Main$Vertical, status, x, y);
		}
	});
var $elm$browser$Debugger$Main$swapLayout = function (layout) {
	if (layout.$ === 'Horizontal') {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Vertical, s, x, y);
	} else {
		var s = layout.a;
		var x = layout.b;
		var y = layout.c;
		return A3($elm$browser$Debugger$Main$Horizontal, s, x, y);
	}
};
var $elm$browser$Debugger$Expando$updateIndex = F3(
	function (n, func, list) {
		if (!list.b) {
			return _List_Nil;
		} else {
			var x = list.a;
			var xs = list.b;
			return (n <= 0) ? A2(
				$elm$core$List$cons,
				func(x),
				xs) : A2(
				$elm$core$List$cons,
				x,
				A3($elm$browser$Debugger$Expando$updateIndex, n - 1, func, xs));
		}
	});
var $elm$browser$Debugger$Expando$update = F2(
	function (msg, value) {
		switch (value.$) {
			case 'S':
				return value;
			case 'Primitive':
				return value;
			case 'Sequence':
				var seqType = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Sequence, seqType, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v3 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Sequence,
								seqType,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
			case 'Dictionary':
				var isClosed = value.a;
				var keyValuePairs = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Dictionary, !isClosed, keyValuePairs);
					case 'Index':
						var redirect = msg.a;
						var index = msg.b;
						var subMsg = msg.c;
						switch (redirect.$) {
							case 'None':
								return value;
							case 'Key':
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v6) {
											var k = _v6.a;
											var v = _v6.b;
											return _Utils_Tuple2(
												A2($elm$browser$Debugger$Expando$update, subMsg, k),
												v);
										},
										keyValuePairs));
							default:
								return A2(
									$elm$browser$Debugger$Expando$Dictionary,
									isClosed,
									A3(
										$elm$browser$Debugger$Expando$updateIndex,
										index,
										function (_v7) {
											var k = _v7.a;
											var v = _v7.b;
											return _Utils_Tuple2(
												k,
												A2($elm$browser$Debugger$Expando$update, subMsg, v));
										},
										keyValuePairs));
						}
					default:
						return value;
				}
			case 'Record':
				var isClosed = value.a;
				var valueDict = value.b;
				switch (msg.$) {
					case 'Toggle':
						return A2($elm$browser$Debugger$Expando$Record, !isClosed, valueDict);
					case 'Index':
						return value;
					default:
						var field = msg.a;
						var subMsg = msg.b;
						return A2(
							$elm$browser$Debugger$Expando$Record,
							isClosed,
							A3(
								$elm$core$Dict$update,
								field,
								$elm$browser$Debugger$Expando$updateField(subMsg),
								valueDict));
				}
			default:
				var maybeName = value.a;
				var isClosed = value.b;
				var valueList = value.c;
				switch (msg.$) {
					case 'Toggle':
						return A3($elm$browser$Debugger$Expando$Constructor, maybeName, !isClosed, valueList);
					case 'Index':
						if (msg.a.$ === 'None') {
							var _v10 = msg.a;
							var index = msg.b;
							var subMsg = msg.c;
							return A3(
								$elm$browser$Debugger$Expando$Constructor,
								maybeName,
								isClosed,
								A3(
									$elm$browser$Debugger$Expando$updateIndex,
									index,
									$elm$browser$Debugger$Expando$update(subMsg),
									valueList));
						} else {
							return value;
						}
					default:
						return value;
				}
		}
	});
var $elm$browser$Debugger$Expando$updateField = F2(
	function (msg, maybeExpando) {
		if (maybeExpando.$ === 'Nothing') {
			return maybeExpando;
		} else {
			var expando = maybeExpando.a;
			return $elm$core$Maybe$Just(
				A2($elm$browser$Debugger$Expando$update, msg, expando));
		}
	});
var $elm$browser$Debugger$Main$Upload = function (a) {
	return {$: 'Upload', a: a};
};
var $elm$browser$Debugger$Main$upload = function (popout) {
	return A2(
		$elm$core$Task$perform,
		$elm$browser$Debugger$Main$Upload,
		_Debugger_upload(popout));
};
var $elm$browser$Debugger$Overlay$BadMetadata = function (a) {
	return {$: 'BadMetadata', a: a};
};
var $elm$browser$Debugger$Overlay$badMetadata = $elm$browser$Debugger$Overlay$BadMetadata;
var $elm$browser$Debugger$Main$withGoodMetadata = F2(
	function (model, func) {
		var _v0 = model.metadata;
		if (_v0.$ === 'Ok') {
			var metadata = _v0.a;
			return func(metadata);
		} else {
			var error = _v0.a;
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						overlay: $elm$browser$Debugger$Overlay$badMetadata(error)
					}),
				$elm$core$Platform$Cmd$none);
		}
	});
var $elm$browser$Debugger$Main$wrapUpdate = F3(
	function (update, msg, model) {
		wrapUpdate:
		while (true) {
			switch (msg.$) {
				case 'NoOp':
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 'UserMsg':
					var userMsg = msg.a;
					var userModel = $elm$browser$Debugger$Main$getLatestModel(model.state);
					var newHistory = A3($elm$browser$Debugger$History$add, userMsg, userModel, model.history);
					var _v1 = A2(update, userMsg, userModel);
					var newUserModel = _v1.a;
					var userCmds = _v1.b;
					var commands = A2($elm$core$Platform$Cmd$map, $elm$browser$Debugger$Main$UserMsg, userCmds);
					var _v2 = model.state;
					if (_v2.$ === 'Running') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, newUserModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									history: newHistory,
									state: $elm$browser$Debugger$Main$Running(newUserModel)
								}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										commands,
										$elm$browser$Debugger$Main$scroll(model.popout)
									])));
					} else {
						var index = _v2.a;
						var indexModel = _v2.b;
						var history = _v2.e;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									history: newHistory,
									state: A5($elm$browser$Debugger$Main$Paused, index, indexModel, newUserModel, userMsg, history)
								}),
							commands);
					}
				case 'TweakExpandoMsg':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoMsg: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoMsg)
							}),
						$elm$core$Platform$Cmd$none);
				case 'TweakExpandoModel':
					var eMsg = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								expandoModel: A2($elm$browser$Debugger$Expando$update, eMsg, model.expandoModel)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Resume':
					var _v3 = model.state;
					if (_v3.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var userModel = _v3.c;
						var userMsg = _v3.d;
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									expandoModel: A2($elm$browser$Debugger$Expando$merge, userModel, model.expandoModel),
									expandoMsg: A2($elm$browser$Debugger$Expando$merge, userMsg, model.expandoMsg),
									state: $elm$browser$Debugger$Main$Running(userModel)
								}),
							$elm$browser$Debugger$Main$scroll(model.popout));
					}
				case 'Jump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						$elm$core$Platform$Cmd$none);
				case 'SliderJump':
					var index = msg.a;
					return _Utils_Tuple2(
						A3($elm$browser$Debugger$Main$jumpUpdate, update, index, model),
						A2(
							$elm$browser$Debugger$Main$scrollTo,
							$elm$browser$Debugger$History$idForMessageIndex(index),
							model.popout));
				case 'Open':
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always($elm$browser$Debugger$Main$NoOp),
							_Debugger_open(model.popout)));
				case 'Up':
					var _v4 = model.state;
					if (_v4.$ === 'Running') {
						return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
					} else {
						var i = _v4.a;
						var history = _v4.e;
						var targetIndex = i + 1;
						if (_Utils_cmp(
							targetIndex,
							$elm$browser$Debugger$History$size(history)) < 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(targetIndex),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$Resume,
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						}
					}
				case 'Down':
					var _v5 = model.state;
					if (_v5.$ === 'Running') {
						var $temp$update = update,
							$temp$msg = $elm$browser$Debugger$Main$Jump(
							$elm$browser$Debugger$History$size(model.history) - 1),
							$temp$model = model;
						update = $temp$update;
						msg = $temp$msg;
						model = $temp$model;
						continue wrapUpdate;
					} else {
						var index = _v5.a;
						if (index > 0) {
							var $temp$update = update,
								$temp$msg = $elm$browser$Debugger$Main$SliderJump(index - 1),
								$temp$model = model;
							update = $temp$update;
							msg = $temp$msg;
							model = $temp$model;
							continue wrapUpdate;
						} else {
							return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
						}
					}
				case 'Import':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (_v6) {
							return _Utils_Tuple2(
								model,
								$elm$browser$Debugger$Main$upload(model.popout));
						});
				case 'Export':
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							return _Utils_Tuple2(
								model,
								A2($elm$browser$Debugger$Main$download, metadata, model.history));
						});
				case 'Upload':
					var jsonString = msg.a;
					return A2(
						$elm$browser$Debugger$Main$withGoodMetadata,
						model,
						function (metadata) {
							var _v7 = A2($elm$browser$Debugger$Overlay$assessImport, metadata, jsonString);
							if (_v7.$ === 'Err') {
								var newOverlay = _v7.a;
								return _Utils_Tuple2(
									_Utils_update(
										model,
										{overlay: newOverlay}),
									$elm$core$Platform$Cmd$none);
							} else {
								var rawHistory = _v7.a;
								return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
							}
						});
				case 'OverlayMsg':
					var overlayMsg = msg.a;
					var _v8 = A2($elm$browser$Debugger$Overlay$close, overlayMsg, model.overlay);
					if (_v8.$ === 'Nothing') {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{overlay: $elm$browser$Debugger$Overlay$none}),
							$elm$core$Platform$Cmd$none);
					} else {
						var rawHistory = _v8.a;
						return A3($elm$browser$Debugger$Main$loadNewHistory, rawHistory, update, model);
					}
				case 'SwapLayout':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: $elm$browser$Debugger$Main$swapLayout(model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'DragStart':
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Moving, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				case 'Drag':
					var info = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$drag, info, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								layout: A2($elm$browser$Debugger$Main$setDragStatus, $elm$browser$Debugger$Main$Static, model.layout)
							}),
						$elm$core$Platform$Cmd$none);
			}
		}
	});
var $elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var $elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var $elm$url$Url$Http = {$: 'Http'};
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 'Nothing') {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Http,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		$elm$url$Url$Https,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$browser$Browser$Events$spawn = F3(
	function (router, key, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			$elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						$elm$core$Platform$sendToSelf,
						router,
						A2($elm$browser$Browser$Events$Event, key, event));
				}));
	});
var $elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _v6) {
				var deads = _v6.a;
				var lives = _v6.b;
				var news = _v6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						$elm$core$List$cons,
						A3($elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_v4, pid, _v5) {
				var deads = _v5.a;
				var lives = _v5.b;
				var news = _v5.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _v2, _v3) {
				var deads = _v3.a;
				var lives = _v3.b;
				var news = _v3.c;
				return _Utils_Tuple3(
					deads,
					A3($elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2($elm$core$List$map, $elm$browser$Browser$Events$addKey, subs);
		var _v0 = A6(
			$elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			$elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, $elm$core$Dict$empty, _List_Nil));
		var deadPids = _v0.a;
		var livePids = _v0.b;
		var makeNewPids = _v0.c;
		return A2(
			$elm$core$Task$andThen,
			function (pids) {
				return $elm$core$Task$succeed(
					A2(
						$elm$browser$Browser$Events$State,
						newSubs,
						A2(
							$elm$core$Dict$union,
							livePids,
							$elm$core$Dict$fromList(pids))));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$sequence(makeNewPids);
				},
				$elm$core$Task$sequence(
					A2($elm$core$List$map, $elm$core$Process$kill, deadPids))));
	});
var $elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _v0, state) {
		var key = _v0.key;
		var event = _v0.event;
		var toMessage = function (_v2) {
			var subKey = _v2.a;
			var _v3 = _v2.b;
			var node = _v3.a;
			var name = _v3.b;
			var decoder = _v3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : $elm$core$Maybe$Nothing;
		};
		var messages = A2($elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Platform$sendToApp(router),
					messages)));
	});
var $elm$browser$Browser$Events$subMap = F2(
	function (func, _v0) {
		var node = _v0.a;
		var name = _v0.b;
		var decoder = _v0.c;
		return A3(
			$elm$browser$Browser$Events$MySub,
			node,
			name,
			A2($elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager($elm$browser$Browser$Events$init, $elm$browser$Browser$Events$onEffects, $elm$browser$Browser$Events$onSelfMsg, 0, $elm$browser$Browser$Events$subMap);
var $elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var $elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return $elm$browser$Browser$Events$subscription(
			A3($elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var $elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		$elm$browser$Browser$Events$on,
		$elm$browser$Browser$Events$Window,
		'resize',
		A2(
			$elm$json$Json$Decode$field,
			'target',
			A3(
				$elm$json$Json$Decode$map2,
				func,
				A2($elm$json$Json$Decode$field, 'innerWidth', $elm$json$Json$Decode$int),
				A2($elm$json$Json$Decode$field, 'innerHeight', $elm$json$Json$Decode$int))));
};
var $author$project$Shared$subscriptions = F2(
	function (_v0, _v1) {
		return $elm$browser$Browser$Events$onResize(
			F2(
				function (w, h) {
					return $author$project$Shared$GotNewWidth(
						_Utils_Tuple2(w, h));
				}));
	});
var $author$project$Shared$Ignored = {$: 'Ignored'};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			$elm$core$Task$Perform(
				A2(
					$elm$core$Task$onError,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Err),
					A2(
						$elm$core$Task$andThen,
						A2(
							$elm$core$Basics$composeL,
							A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
							$elm$core$Result$Ok),
						task))));
	});
var $elm$browser$Browser$Dom$setViewport = _Browser_setViewport;
var $author$project$Shared$scrollToTop = A2(
	$elm$core$Task$attempt,
	$elm$core$Basics$always($author$project$Shared$Ignored),
	A2($elm$browser$Browser$Dom$setViewport, 0, 0));
var $author$project$Shared$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 'OnPageChange':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isMobileMenuOpen: false}),
					$elm$core$Platform$Cmd$none);
			case 'SharedMsg':
				var globalMsg = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ScrollToTop':
				return _Utils_Tuple2(model, $author$project$Shared$scrollToTop);
			case 'Ignored':
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 'ToggleMobileMenu':
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{isMobileMenuOpen: !model.isMobileMenuOpen}),
					$elm$core$Platform$Cmd$none);
			default:
				var _v1 = msg.a;
				var width = _v1.a;
				var height = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							device: $author$project$Shared$classifyDevice(
								{height: height, width: width})
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Right = {$: 'Right'};
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX($mdgriffith$elm_ui$Internal$Model$Right);
var $author$project$Shared$ScrollToTop = {$: 'ScrollToTop'};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 'Button'};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 'StyleClass') && (attr.b.$ === 'PseudoSelector')) && (attr.b.a.$ === 'Focus')) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 'MayPreventDefault', a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 'Nothing') {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.cursorPointer);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var onPress = _v0.onPress;
		var label = _v0.label;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.contentCenterX + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.contentCenterY + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.seButton + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.noTextSelection)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 'Nothing') {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$circleChevronUp = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'circle-chevron-up',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M256 0C114.6 0 0 114.6 0 256c0 141.4 114.6 256 256 256s256-114.6 256-256C512 114.6 397.4 0 256 0zM390.6 310.6c-12.5 12.5-32.75 12.5-45.25 0L256 221.3L166.6 310.6c-12.5 12.5-32.75 12.5-45.25 0s-12.5-32.75 0-45.25l112-112C239.6 147.1 247.8 144 256 144s16.38 3.125 22.62 9.375l112 112C403.1 277.9 403.1 298.1 390.6 310.6z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$circleChevronUp = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$circleChevronUp);
var $lattyware$elm_fontawesome$FontAwesome$Solid$chevronCircleUp = $lattyware$elm_fontawesome$FontAwesome$Solid$circleChevronUp;
var $author$project$Shared$viewBackToTop = function (toMsg) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_Nil,
		{
			label: A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$chevronCircleUp, 30),
			onPress: $elm$core$Maybe$Just(
				toMsg($author$project$Shared$ScrollToTop))
		});
};
var $author$project$Shared$defaultStyles = function (toMsg) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.bgColor),
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$external(
					{name: 'Ubuntu', url: 'assets/fonts/Ubuntu-R.ttf'})
				])),
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop._default),
			$mdgriffith$elm_ui$Element$Font$regular,
			$mdgriffith$elm_ui$Element$Font$justify,
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.bgColor),
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: 20, left: 0, right: 0, top: 20}),
			$mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$alignBottom,
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$alpha(0.5)
					]),
				$author$project$Shared$viewBackToTop(toMsg)))
		]);
};
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 'OnlyDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 'StaticRootAndDynamic', a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = {$: 'AllowHover'};
var $mdgriffith$elm_ui$Internal$Model$Layout = {$: 'Layout'};
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	backgroundColor: $elm$core$Maybe$Nothing,
	borderColor: $elm$core$Maybe$Nothing,
	shadow: $elm$core$Maybe$Just(
		{
			blur: 0,
			color: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			offset: _Utils_Tuple2(0, 0),
			size: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 'HoverOption':
					var hoverable = opt.a;
					var _v4 = record.hover;
					if (_v4.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								hover: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var focusStyle = opt.a;
					var _v5 = record.focus;
					if (_v5.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								focus: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.mode;
					if (_v6.$ === 'Nothing') {
						return _Utils_update(
							record,
							{
								mode: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			focus: function () {
				var _v0 = record.focus;
				if (_v0.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			hover: function () {
				var _v1 = record.hover;
				if (_v1.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$AllowHover;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			mode: function () {
				var _v2 = record.mode;
				if (_v2.$ === 'Nothing') {
					return $mdgriffith$elm_ui$Internal$Model$Layout;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{focus: $elm$core$Maybe$Nothing, hover: $elm$core$Maybe$Nothing, mode: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 'Unstyled':
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Styled':
				var styles = el.a.styles;
				var html = el.a.html;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 'Text':
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.mode;
			if (_v0.$ === 'NoStaticStyleSheet') {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 'SansSerif'};
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.options;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.root, $mdgriffith$elm_ui$Internal$Style$classes.any, $mdgriffith$elm_ui$Internal$Style$classes.single]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $mdgriffith$elm_ui$Element$layout = $mdgriffith$elm_ui$Element$layoutWith(
	{options: _List_Nil});
var $author$project$Shared$phoneStyles = function (toMsg) {
	return _List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.bgColor),
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Font$family(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$external(
					{name: 'Ubuntu', url: 'assets/fonts/Ubuntu-R.ttf'})
				])),
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone._default),
			$mdgriffith$elm_ui$Element$Font$regular,
			$mdgriffith$elm_ui$Element$Font$justify,
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.bgColor),
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: 20, left: 0, right: 0, top: 20}),
			$mdgriffith$elm_ui$Element$inFront(
			A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$padding(10),
						$mdgriffith$elm_ui$Element$alignBottom,
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$alpha(0.5)
					]),
				$author$project$Shared$viewBackToTop(toMsg)))
		]);
};
var $author$project$Shared$viewNavLink = F2(
	function (label, url) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.navLink),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkColor),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor)
						]))
				]),
			{label: label, url: url});
	});
var $lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$envelope = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fas',
	'envelope',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M464 64C490.5 64 512 85.49 512 112C512 127.1 504.9 141.3 492.8 150.4L275.2 313.6C263.8 322.1 248.2 322.1 236.8 313.6L19.2 150.4C7.113 141.3 0 127.1 0 112C0 85.49 21.49 64 48 64H464zM217.6 339.2C240.4 356.3 271.6 356.3 294.4 339.2L512 176V384C512 419.3 483.3 448 448 448H64C28.65 448 0 419.3 0 384V176L217.6 339.2z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Solid$envelope = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Solid$Definitions$envelope);
var $lattyware$elm_fontawesome$FontAwesome$Brands$Definitions$twitter = A4(
	$lattyware$elm_fontawesome$FontAwesome$IconDef,
	'fab',
	'twitter',
	_Utils_Tuple2(512, 512),
	_Utils_Tuple2('M459.4 151.7c.325 4.548 .325 9.097 .325 13.65 0 138.7-105.6 298.6-298.6 298.6-59.45 0-114.7-17.22-161.1-47.11 8.447 .974 16.57 1.299 25.34 1.299 49.06 0 94.21-16.57 130.3-44.83-46.13-.975-84.79-31.19-98.11-72.77 6.498 .974 12.99 1.624 19.82 1.624 9.421 0 18.84-1.3 27.61-3.573-48.08-9.747-84.14-51.98-84.14-102.1v-1.299c13.97 7.797 30.21 12.67 47.43 13.32-28.26-18.84-46.78-51.01-46.78-87.39 0-19.49 5.197-37.36 14.29-52.95 51.65 63.67 129.3 105.3 216.4 109.8-1.624-7.797-2.599-15.92-2.599-24.04 0-57.83 46.78-104.9 104.9-104.9 30.21 0 57.5 12.67 76.67 33.14 23.72-4.548 46.46-13.32 66.6-25.34-7.798 24.37-24.37 44.83-46.13 57.83 21.12-2.273 41.58-8.122 60.43-16.24-14.29 20.79-32.16 39.31-52.63 54.25z', $elm$core$Maybe$Nothing));
var $lattyware$elm_fontawesome$FontAwesome$Brands$twitter = $lattyware$elm_fontawesome$FontAwesome$present($lattyware$elm_fontawesome$FontAwesome$Brands$Definitions$twitter);
var $author$project$Shared$viewSocialLinks = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.navLink),
			$mdgriffith$elm_ui$Element$spacing(40),
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: 0, left: 20, right: 0, top: 0})
		]),
	_List_fromArray(
		[
			A2(
			$author$project$Shared$viewNavLink,
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Brands$github, 25),
			'https://github.com/sashinexists'),
			A2(
			$author$project$Shared$viewNavLink,
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Brands$twitter, 25),
			'https://twitter.com/sashintweets'),
			A2(
			$author$project$Shared$viewNavLink,
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$envelope, 25),
			'mailto://myself@sashinexists.com')
		]));
var $author$project$Shared$viewNavigation = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$spacing(50)
		]),
	_List_fromArray(
		[
			A2(
			$author$project$Shared$viewNavLink,
			$mdgriffith$elm_ui$Element$text('Past Work'),
			'/projects'),
			A2(
			$author$project$Shared$viewNavLink,
			$mdgriffith$elm_ui$Element$text('Testimonials'),
			'/testimonials'),
			A2(
			$author$project$Shared$viewNavLink,
			$mdgriffith$elm_ui$Element$text('Skills'),
			'/skills'),
			A2(
			$author$project$Shared$viewNavLink,
			$mdgriffith$elm_ui$Element$text('Writing'),
			'/writing'),
			A2(
			$author$project$Shared$viewNavLink,
			$mdgriffith$elm_ui$Element$text('Now'),
			'/now'),
			$author$project$Shared$viewSocialLinks
		]));
var $author$project$Shared$viewSiteTitle = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.siteTitleColor),
			$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.desktop.siteTitle),
			$mdgriffith$elm_ui$Element$Font$light
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$link,
			_List_Nil,
			{
				label: $mdgriffith$elm_ui$Element$text('Sashin Dev'),
				url: '/'
			})
		]));
var $author$project$Shared$viewHeader = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Font$center,
			$mdgriffith$elm_ui$Element$centerX,
			$mdgriffith$elm_ui$Element$spaceEvenly,
			$mdgriffith$elm_ui$Element$paddingEach(
			{bottom: 20, left: 20, right: 20, top: 10})
		]),
	_List_fromArray(
		[$author$project$Shared$viewSiteTitle, $author$project$Shared$viewNavigation]));
var $author$project$Shared$viewPage = function (page) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
			]),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
					]),
				page)
			]));
};
var $author$project$Shared$viewDefault = function (page) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$spacing(10),
				$mdgriffith$elm_ui$Element$Font$center
			]),
		_List_fromArray(
			[
				$author$project$Shared$viewHeader,
				$author$project$Shared$viewPage(page)
			]));
};
var $author$project$Shared$ToggleMobileMenu = {$: 'ToggleMobileMenu'};
var $author$project$Shared$viewPhoneCloseMenuButton = function (toMsg) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.menuOpenClose),
				$mdgriffith$elm_ui$Element$Font$light
			]),
		{
			label: $mdgriffith$elm_ui$Element$text('⮾'),
			onPress: $elm$core$Maybe$Just(
				toMsg($author$project$Shared$ToggleMobileMenu))
		});
};
var $author$project$Shared$viewPhoneOpenMenuButton = function (toMsg) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.menuOpenClose),
				$mdgriffith$elm_ui$Element$Font$light
			]),
		{
			label: $mdgriffith$elm_ui$Element$text('☰'),
			onPress: $elm$core$Maybe$Just(
				toMsg($author$project$Shared$ToggleMobileMenu))
		});
};
var $author$project$Shared$viewPhoneMenuButton = F2(
	function (isMenuOpen, toMsg) {
		return isMenuOpen ? $author$project$Shared$viewPhoneCloseMenuButton(toMsg) : $author$project$Shared$viewPhoneOpenMenuButton(toMsg);
	});
var $author$project$Shared$viewPhoneSiteTitle = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.siteTitleColor),
			$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.siteTitle),
			$mdgriffith$elm_ui$Element$Font$light
		]),
	_List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Element$link,
			_List_Nil,
			{
				label: $mdgriffith$elm_ui$Element$text('Sashin Dev'),
				url: '/'
			})
		]));
var $author$project$Shared$viewPhoneHeader = F2(
	function (isMenuOpen, toMsg) {
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Font$center,
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$spaceEvenly,
					$mdgriffith$elm_ui$Element$height(
					$mdgriffith$elm_ui$Element$px(30)),
					$mdgriffith$elm_ui$Element$paddingEach(
					{bottom: 0, left: 20, right: 20, top: 0})
				]),
			_List_fromArray(
				[
					$author$project$Shared$viewPhoneSiteTitle,
					A2($author$project$Shared$viewPhoneMenuButton, isMenuOpen, toMsg)
				]));
	});
var $mdgriffith$elm_ui$Internal$Flag$borderStyle = $mdgriffith$elm_ui$Internal$Flag$flag(11);
var $mdgriffith$elm_ui$Element$Border$solid = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$borderStyle, $mdgriffith$elm_ui$Internal$Style$classes.borderSolid);
var $author$project$Shared$viewPhoneNavLink = F2(
	function (label, url) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.navLink),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkColor),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor)
						])),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
					A2($mdgriffith$elm_ui$Element$paddingXY, 80, 20)
				]),
			{label: label, url: url});
	});
var $author$project$Shared$viewPhoneSocialLink = F2(
	function (label, url) {
		return A2(
			$mdgriffith$elm_ui$Element$link,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$centerY,
					$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.navLink),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkColor),
					$mdgriffith$elm_ui$Element$mouseOver(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.navLinkHoverColor)
						])),
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighter),
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
				]),
			{label: label, url: url});
	});
var $author$project$Shared$viewPhoneSocialLinks = A2(
	$mdgriffith$elm_ui$Element$row,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
			$mdgriffith$elm_ui$Element$Font$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Font$size($author$project$Theme$theme.textSizes.phone.navLink),
			$mdgriffith$elm_ui$Element$spacing(40),
			A2($mdgriffith$elm_ui$Element$paddingXY, 20, 20)
		]),
	_List_fromArray(
		[
			A2(
			$author$project$Shared$viewPhoneSocialLink,
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Brands$github, 25),
			'https://github.com/sashinexists'),
			A2(
			$author$project$Shared$viewPhoneSocialLink,
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Brands$twitter, 25),
			'https://twitter.com/sashintweets'),
			A2(
			$author$project$Shared$viewPhoneSocialLink,
			A2($author$project$Components$icon, $lattyware$elm_fontawesome$FontAwesome$Solid$envelope, 25),
			'mailto://myself@sashinexists.com')
		]));
var $author$project$Shared$viewPhoneNavigation = A2(
	$mdgriffith$elm_ui$Element$column,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$alignRight,
			$mdgriffith$elm_ui$Element$Background$color($author$project$Theme$theme.contentBgColorLighterTransparent),
			A2($mdgriffith$elm_ui$Element$paddingXY, 0, 20),
			$mdgriffith$elm_ui$Element$Border$roundEach(
			{bottomLeft: 10, bottomRight: 0, topLeft: 0, topRight: 0}),
			$mdgriffith$elm_ui$Element$Border$solid,
			$mdgriffith$elm_ui$Element$Border$color($author$project$Theme$theme.fontColor),
			$mdgriffith$elm_ui$Element$Border$shadow(
			{
				blur: 10.0,
				color: $author$project$Theme$theme.contentBgColorDarkerTransparent,
				offset: _Utils_Tuple2(-1, -1),
				size: 2
			})
		]),
	_List_fromArray(
		[
			A2(
			$author$project$Shared$viewPhoneNavLink,
			$mdgriffith$elm_ui$Element$text('Past Work'),
			'/projects'),
			A2(
			$author$project$Shared$viewPhoneNavLink,
			$mdgriffith$elm_ui$Element$text('Testimonials'),
			'/testimonials'),
			A2(
			$author$project$Shared$viewPhoneNavLink,
			$mdgriffith$elm_ui$Element$text('Skills'),
			'/skills'),
			A2(
			$author$project$Shared$viewPhoneNavLink,
			$mdgriffith$elm_ui$Element$text('Writing'),
			'/writing'),
			A2(
			$author$project$Shared$viewPhoneNavLink,
			$mdgriffith$elm_ui$Element$text('Now'),
			'/now'),
			$author$project$Shared$viewPhoneSocialLinks
		]));
var $author$project$Shared$viewPhoneDefault = F3(
	function (page, isMenuOpen, toMsg) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$centerX,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					$mdgriffith$elm_ui$Element$spacing(10),
					$mdgriffith$elm_ui$Element$Font$center
				]),
			_List_fromArray(
				[
					A2($author$project$Shared$viewPhoneHeader, isMenuOpen, toMsg),
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$inFront(
							isMenuOpen ? $author$project$Shared$viewPhoneNavigation : $mdgriffith$elm_ui$Element$text(''))
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							page)
						]))
				]));
	});
var $author$project$Shared$view = F5(
	function (sharedData, page, model, toMsg, pageView) {
		return {
			body: function () {
				var _v0 = model.device._class;
				switch (_v0.$) {
					case 'Desktop':
						return A2(
							$mdgriffith$elm_ui$Element$layout,
							$author$project$Shared$defaultStyles(toMsg),
							$author$project$Shared$viewDefault(pageView.body));
					case 'Phone':
						return A2(
							$mdgriffith$elm_ui$Element$layout,
							$author$project$Shared$phoneStyles(toMsg),
							A3($author$project$Shared$viewPhoneDefault, pageView.body, model.isMobileMenuOpen, toMsg));
					default:
						return A2(
							$mdgriffith$elm_ui$Element$layout,
							$author$project$Shared$defaultStyles(toMsg),
							$author$project$Shared$viewDefault(pageView.body));
				}
			}(),
			title: pageView.title
		};
	});
var $author$project$Shared$template = {
	data: $author$project$Shared$data,
	init: $author$project$Shared$init,
	onPageChange: $elm$core$Maybe$Just($author$project$Shared$OnPageChange),
	subscriptions: $author$project$Shared$subscriptions,
	update: $author$project$Shared$update,
	view: $author$project$Shared$view
};
var $author$project$TemplateModulesBeta$init = F6(
	function (currentGlobalModel, userFlags, sharedData, pageData, navigationKey, maybePagePath) {
		var _v0 = A2(
			$elm$core$Maybe$withDefault,
			A3($author$project$Shared$template.init, navigationKey, userFlags, maybePagePath),
			A2(
				$elm$core$Maybe$map,
				function (m) {
					return _Utils_Tuple2(m, $elm$core$Platform$Cmd$none);
				},
				currentGlobalModel));
		var sharedModel = _v0.a;
		var globalCmd = _v0.b;
		var _v1 = function () {
			var _v2 = _Utils_Tuple2(
				A3(
					$elm$core$Maybe$map2,
					$elm$core$Tuple$pair,
					A2(
						$elm$core$Maybe$andThen,
						function ($) {
							return $.metadata;
						},
						maybePagePath),
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.path;
						},
						maybePagePath)),
				pageData);
			_v2$11:
			while (true) {
				if (_v2.a.$ === 'Just') {
					switch (_v2.a.a.a.$) {
						case 'Index':
							if (_v2.b.$ === 'DataIndex') {
								var _v3 = _v2.a.a;
								var _v4 = _v3.a;
								var justPath = _v3.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelIndex,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgIndex),
									A3(
										$author$project$Page$Index$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$11;
							}
						case 'Now':
							if (_v2.b.$ === 'DataNow') {
								var _v5 = _v2.a.a;
								var _v6 = _v5.a;
								var justPath = _v5.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelNow,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgNow),
									A3(
										$author$project$Page$Now$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$11;
							}
						case 'Projects':
							if (_v2.b.$ === 'DataProjects') {
								var _v7 = _v2.a.a;
								var _v8 = _v7.a;
								var justPath = _v7.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelProjects,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgProjects),
									A3(
										$author$project$Page$Projects$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$11;
							}
						case 'Skills':
							if (_v2.b.$ === 'DataSkills') {
								var _v9 = _v2.a.a;
								var _v10 = _v9.a;
								var justPath = _v9.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelSkills,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgSkills),
									A3(
										$author$project$Page$Skills$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$11;
							}
						case 'Testimonials':
							if (_v2.b.$ === 'DataTestimonials') {
								var _v11 = _v2.a.a;
								var _v12 = _v11.a;
								var justPath = _v11.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelTestimonials,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgTestimonials),
									A3(
										$author$project$Page$Testimonials$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$11;
							}
						case 'Writing':
							if (_v2.b.$ === 'DataWriting') {
								var _v13 = _v2.a.a;
								var _v14 = _v13.a;
								var justPath = _v13.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelWriting,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgWriting),
									A3(
										$author$project$Page$Writing$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{
											data: thisPageData,
											path: justPath.path,
											routeParams: {},
											sharedData: sharedData
										}));
							} else {
								break _v2$11;
							}
						case 'Blog__Name_':
							if (_v2.b.$ === 'DataBlog__Name_') {
								var _v15 = _v2.a.a;
								var routeParams = _v15.a.a;
								var justPath = _v15.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelBlog__Name_,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgBlog__Name_),
									A3(
										$author$project$Page$Blog$Name_$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{data: thisPageData, path: justPath.path, routeParams: routeParams, sharedData: sharedData}));
							} else {
								break _v2$11;
							}
						case 'Project__Name_':
							if (_v2.b.$ === 'DataProject__Name_') {
								var _v16 = _v2.a.a;
								var routeParams = _v16.a.a;
								var justPath = _v16.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelProject__Name_,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgProject__Name_),
									A3(
										$author$project$Page$Project$Name_$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{data: thisPageData, path: justPath.path, routeParams: routeParams, sharedData: sharedData}));
							} else {
								break _v2$11;
							}
						case 'Skill__Name_':
							if (_v2.b.$ === 'DataSkill__Name_') {
								var _v17 = _v2.a.a;
								var routeParams = _v17.a.a;
								var justPath = _v17.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelSkill__Name_,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgSkill__Name_),
									A3(
										$author$project$Page$Skill$Name_$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{data: thisPageData, path: justPath.path, routeParams: routeParams, sharedData: sharedData}));
							} else {
								break _v2$11;
							}
						case 'Tag__Name_':
							if (_v2.b.$ === 'DataTag__Name_') {
								var _v18 = _v2.a.a;
								var routeParams = _v18.a.a;
								var justPath = _v18.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelTag__Name_,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgTag__Name_),
									A3(
										$author$project$Page$Tag$Name_$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{data: thisPageData, path: justPath.path, routeParams: routeParams, sharedData: sharedData}));
							} else {
								break _v2$11;
							}
						default:
							if (_v2.b.$ === 'DataTestimonial__Name_') {
								var _v19 = _v2.a.a;
								var routeParams = _v19.a.a;
								var justPath = _v19.b;
								var thisPageData = _v2.b.a;
								return A3(
									$elm$core$Tuple$mapBoth,
									$author$project$TemplateModulesBeta$ModelTestimonial__Name_,
									$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgTestimonial__Name_),
									A3(
										$author$project$Page$Testimonial$Name_$page.init,
										A2(
											$elm$core$Maybe$andThen,
											function ($) {
												return $.pageUrl;
											},
											maybePagePath),
										sharedModel,
										{data: thisPageData, path: justPath.path, routeParams: routeParams, sharedData: sharedData}));
							} else {
								break _v2$11;
							}
					}
				} else {
					break _v2$11;
				}
			}
			return _Utils_Tuple2($author$project$TemplateModulesBeta$NotFound, $elm$core$Platform$Cmd$none);
		}();
		var templateModel = _v1.a;
		var templateCmd = _v1.b;
		return _Utils_Tuple2(
			{current: maybePagePath, global: sharedModel, page: templateModel},
			$elm$core$Platform$Cmd$batch(
				_List_fromArray(
					[
						templateCmd,
						A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, globalCmd)
					])));
	});
var $dillonkearns$elm_pages$Internal$ApiRoute$ApiRouteBuilder = F4(
	function (a, b, c, d) {
		return {$: 'ApiRouteBuilder', a: a, b: b, c: c, d: d};
	});
var $dillonkearns$elm_pages$ApiRoute$literal = F2(
	function (segment, _v0) {
		var pattern = _v0.a;
		var handler = _v0.b;
		var toString = _v0.c;
		var constructor = _v0.d;
		return A4(
			$dillonkearns$elm_pages$Internal$ApiRoute$ApiRouteBuilder,
			_Utils_ap(pattern, segment),
			handler,
			function (values) {
				return _Utils_ap(
					toString(values),
					segment);
			},
			constructor);
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $noahzgordon$elm_color_extra$Color$Convert$toRadix = function (n) {
	var getChr = function (c) {
		return (c < 10) ? $elm$core$String$fromInt(c) : $elm$core$String$fromChar(
			$elm$core$Char$fromCode(87 + c));
	};
	return (n < 16) ? getChr(n) : _Utils_ap(
		$noahzgordon$elm_color_extra$Color$Convert$toRadix((n / 16) | 0),
		getChr(
			A2($elm$core$Basics$modBy, 16, n)));
};
var $noahzgordon$elm_color_extra$Color$Convert$toHex = A2(
	$elm$core$Basics$composeR,
	$noahzgordon$elm_color_extra$Color$Convert$toRadix,
	A2(
		$elm$core$String$padLeft,
		2,
		_Utils_chr('0')));
var $avh4$elm_color$Color$toRgba = function (_v0) {
	var r = _v0.a;
	var g = _v0.b;
	var b = _v0.c;
	var a = _v0.d;
	return {alpha: a, blue: b, green: g, red: r};
};
var $noahzgordon$elm_color_extra$Color$Convert$colorToHex = function (cl) {
	var _v0 = $avh4$elm_color$Color$toRgba(cl);
	var red = _v0.red;
	var green = _v0.green;
	var blue = _v0.blue;
	return A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$cons,
			'#',
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $elm$core$Basics$round, $noahzgordon$elm_color_extra$Color$Convert$toHex),
				_List_fromArray(
					[red * 255, green * 255, blue * 255]))));
};
var $dillonkearns$elm_pages$Pages$Manifest$displayModeToAttribute = function (displayMode) {
	switch (displayMode.$) {
		case 'Fullscreen':
			return 'fullscreen';
		case 'Standalone':
			return 'standalone';
		case 'MinimalUi':
			return 'minimal-ui';
		default:
			return 'browser';
	}
};
var $danyx23$elm_mimetype$MimeType$Image = function (a) {
	return {$: 'Image', a: a};
};
var $dillonkearns$elm_pages$Pages$Manifest$encodeMaybeObject = function (list) {
	return $elm$json$Json$Encode$object(
		A2(
			$elm$core$List$filterMap,
			function (_v0) {
				var key = _v0.a;
				var maybeValue = _v0.b;
				if (maybeValue.$ === 'Just') {
					var value = maybeValue.a;
					return $elm$core$Maybe$Just(
						_Utils_Tuple2(key, value));
				} else {
					return $elm$core$Maybe$Nothing;
				}
			},
			list));
};
var $dillonkearns$elm_pages$Pages$Manifest$nonEmptyList = function (list) {
	return $elm$core$List$isEmpty(list) ? $elm$core$Maybe$Nothing : $elm$core$Maybe$Just(list);
};
var $dillonkearns$elm_pages$Pages$Manifest$purposeToString = function (purpose) {
	switch (purpose.$) {
		case 'IconPurposeMonochrome':
			return 'monochrome';
		case 'IconPurposeMaskable':
			return 'maskable';
		default:
			return 'any';
	}
};
var $dillonkearns$elm_pages$Pages$Manifest$purposesString = function (purposes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2($elm$core$List$map, $dillonkearns$elm_pages$Pages$Manifest$purposeToString, purposes));
};
var $dillonkearns$elm_pages$Pages$Manifest$sizesString = function (sizes) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				var y = _v0.b;
				return $elm$core$String$fromInt(x) + ('x' + $elm$core$String$fromInt(y));
			},
			sizes));
};
var $danyx23$elm_mimetype$MimeType$toString = function (mimeType) {
	switch (mimeType.$) {
		case 'Image':
			var img = mimeType.a;
			switch (img.$) {
				case 'Jpeg':
					return 'image/jpeg';
				case 'Png':
					return 'image/png';
				case 'Gif':
					return 'image/gif';
				default:
					var type_ = img.a;
					return 'image/' + type_;
			}
		case 'Audio':
			var audio = mimeType.a;
			switch (audio.$) {
				case 'Mp3':
					return 'audio/mp3';
				case 'Wav':
					return 'audio/wav';
				case 'Ogg':
					return 'audio/ogg';
				default:
					var type_ = audio.a;
					return 'audio/' + type_;
			}
		case 'Video':
			var video = mimeType.a;
			switch (video.$) {
				case 'Mp4':
					return 'video/mp4';
				case 'Mpeg':
					return 'video/mpeg';
				case 'Quicktime':
					return 'video/quicktime';
				case 'Avi':
					return 'video/avi';
				case 'Webm':
					return 'video/webm';
				default:
					var type_ = video.a;
					return 'video/' + type_;
			}
		case 'Text':
			var text = mimeType.a;
			switch (text.$) {
				case 'PlainText':
					return 'text/plain';
				case 'Html':
					return 'text/html';
				case 'Css':
					return 'text/css';
				case 'Xml':
					return 'text/xml';
				case 'Json':
					return 'application/json';
				default:
					var type_ = text.a;
					return 'text/' + type_;
			}
		case 'App':
			var app = mimeType.a;
			switch (app.$) {
				case 'Word':
					return 'application/msword';
				case 'WordXml':
					return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
				case 'Excel':
					return 'application/vnd.ms-excel';
				case 'ExcelXml':
					return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
				case 'PowerPoint':
					return 'application/vnd.ms-powerpoint';
				case 'PowerPointXml':
					return 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
				case 'Pdf':
					return 'application/pdf';
				default:
					var type_ = app.a;
					return 'application/' + type_;
			}
		default:
			var type_ = mimeType.a;
			return type_;
	}
};
var $dillonkearns$elm_pages$Pages$Manifest$encodeIcon = F2(
	function (canonicalSiteUrl, icon) {
		return $dillonkearns$elm_pages$Pages$Manifest$encodeMaybeObject(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'src',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(
							A2($dillonkearns$elm_pages$Pages$Url$toAbsoluteUrl, canonicalSiteUrl, icon.src)))),
					_Utils_Tuple2(
					'type',
					A2(
						$elm$core$Maybe$map,
						$elm$json$Json$Encode$string,
						A2(
							$elm$core$Maybe$map,
							$danyx23$elm_mimetype$MimeType$toString,
							A2($elm$core$Maybe$map, $danyx23$elm_mimetype$MimeType$Image, icon.mimeType)))),
					_Utils_Tuple2(
					'sizes',
					A2(
						$elm$core$Maybe$map,
						$elm$json$Json$Encode$string,
						A2(
							$elm$core$Maybe$map,
							$dillonkearns$elm_pages$Pages$Manifest$sizesString,
							$dillonkearns$elm_pages$Pages$Manifest$nonEmptyList(icon.sizes)))),
					_Utils_Tuple2(
					'purpose',
					A2(
						$elm$core$Maybe$map,
						$elm$json$Json$Encode$string,
						A2(
							$elm$core$Maybe$map,
							$dillonkearns$elm_pages$Pages$Manifest$purposesString,
							$dillonkearns$elm_pages$Pages$Manifest$nonEmptyList(icon.purposes))))
				]));
	});
var $dillonkearns$elm_pages$Pages$Manifest$orientationToString = function (orientation) {
	switch (orientation.$) {
		case 'Any':
			return 'any';
		case 'Natural':
			return 'natural';
		case 'Landscape':
			return 'landscape';
		case 'LandscapePrimary':
			return 'landscape-primary';
		case 'LandscapeSecondary':
			return 'landscape-secondary';
		case 'Portrait':
			return 'portrait';
		case 'PortraitPrimary':
			return 'portrait-primary';
		default:
			return 'portrait-secondary';
	}
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Country$toCodeString = function (_v0) {
	var rawCode = _v0.a;
	return rawCode;
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$ExtendedLanguage$toCodeString = function (_v0) {
	var rawCode = _v0.a;
	return rawCode;
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$toCodeString = function (_v0) {
	var rawCode = _v0.a;
	return rawCode;
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Script$toCodeString = function (_v0) {
	var rawCode = _v0.a;
	return rawCode;
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$Variant$toCodeString = function (_v0) {
	var rawCode = _v0.a;
	return rawCode;
};
var $elm_community$list_extra$List$Extra$unique = function (list) {
	return A4($elm_community$list_extra$List$Extra$uniqueHelp, $elm$core$Basics$identity, _List_Nil, list, _List_Nil);
};
var $dillonkearns$elm_bcp47_language_tag$LanguageTag$toString = function (languageTag) {
	if (languageTag.$ === 'Custom') {
		var customCode = languageTag.a;
		return customCode;
	} else {
		var language = languageTag.a;
		var options = languageTag.b;
		return A2(
			$elm$core$String$join,
			'-',
			_Utils_ap(
				$elm_community$list_extra$List$Extra$unique(
					A2(
						$elm$core$List$filterMap,
						$elm$core$Basics$identity,
						_List_fromArray(
							[
								$elm$core$Maybe$Just(
								$dillonkearns$elm_bcp47_language_tag$LanguageTag$Language$toCodeString(language)),
								A2($elm$core$Maybe$map, $dillonkearns$elm_bcp47_language_tag$LanguageTag$ExtendedLanguage$toCodeString, options.extendedLanguage),
								A2($elm$core$Maybe$map, $dillonkearns$elm_bcp47_language_tag$LanguageTag$Script$toCodeString, options.script),
								A2($elm$core$Maybe$map, $dillonkearns$elm_bcp47_language_tag$LanguageTag$Country$toCodeString, options.region)
							]))),
				A2($elm$core$List$map, $dillonkearns$elm_bcp47_language_tag$LanguageTag$Variant$toCodeString, options.variants)));
	}
};
var $dillonkearns$elm_pages$Pages$Manifest$Category$toString = function (_v0) {
	var raw = _v0.a;
	return raw;
};
var $dillonkearns$elm_pages$Pages$Manifest$toJson = F2(
	function (canonicalSiteUrl, config) {
		return $dillonkearns$elm_pages$Pages$Manifest$encodeMaybeObject(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'dir',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string('auto'))),
					_Utils_Tuple2(
					'lang',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(
							$dillonkearns$elm_bcp47_language_tag$LanguageTag$toString(config.lang)))),
					_Utils_Tuple2(
					'icons',
					$elm$core$Maybe$Just(
						A2(
							$elm$json$Json$Encode$list,
							$dillonkearns$elm_pages$Pages$Manifest$encodeIcon(canonicalSiteUrl),
							config.icons))),
					_Utils_Tuple2(
					'background_color',
					A2(
						$elm$core$Maybe$map,
						$elm$json$Json$Encode$string,
						A2($elm$core$Maybe$map, $noahzgordon$elm_color_extra$Color$Convert$colorToHex, config.backgroundColor))),
					_Utils_Tuple2(
					'orientation',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(
							$dillonkearns$elm_pages$Pages$Manifest$orientationToString(config.orientation)))),
					_Utils_Tuple2(
					'display',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(
							$dillonkearns$elm_pages$Pages$Manifest$displayModeToAttribute(config.displayMode)))),
					_Utils_Tuple2(
					'categories',
					$elm$core$Maybe$Just(
						A2(
							$elm$json$Json$Encode$list,
							$elm$json$Json$Encode$string,
							A2($elm$core$List$map, $dillonkearns$elm_pages$Pages$Manifest$Category$toString, config.categories)))),
					_Utils_Tuple2(
					'description',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(config.description))),
					_Utils_Tuple2(
					'iarc_rating_id',
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, config.iarcRatingId)),
					_Utils_Tuple2(
					'name',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(config.name))),
					_Utils_Tuple2(
					'prefer_related_applications',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$bool(false))),
					_Utils_Tuple2(
					'related_applications',
					$elm$core$Maybe$Just(
						A2(
							$elm$json$Json$Encode$list,
							function (_v0) {
								return $elm$json$Json$Encode$object(_List_Nil);
							},
							_List_Nil))),
					_Utils_Tuple2(
					'theme_color',
					A2(
						$elm$core$Maybe$map,
						$elm$json$Json$Encode$string,
						A2($elm$core$Maybe$map, $noahzgordon$elm_color_extra$Color$Convert$colorToHex, config.themeColor))),
					_Utils_Tuple2(
					'start_url',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string(
							$dillonkearns$elm_pages$Path$toAbsolute(config.startUrl)))),
					_Utils_Tuple2(
					'short_name',
					A2($elm$core$Maybe$map, $elm$json$Json$Encode$string, config.shortName)),
					_Utils_Tuple2(
					'scope',
					$elm$core$Maybe$Just(
						$elm$json$Json$Encode$string('/')))
				]));
	});
var $author$project$TemplateModulesBeta$manifestToFile = F2(
	function (resolvedCanonicalUrl, manifestConfig) {
		return function (manifestJsonValue) {
			return {
				body: A2($elm$json$Json$Encode$encode, 0, manifestJsonValue)
			};
		}(
			A2($dillonkearns$elm_pages$Pages$Manifest$toJson, resolvedCanonicalUrl, manifestConfig));
	});
var $dillonkearns$elm_pages$Internal$ApiRoute$pathToMatches = F2(
	function (path, _v0) {
		var pattern = _v0.a;
		return A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$concatMap,
				function ($) {
					return $.submatches;
				},
				A2(
					$elm$regex$Regex$find,
					A2(
						$elm$core$Maybe$withDefault,
						$elm$regex$Regex$never,
						$elm$regex$Regex$fromString(pattern)),
					path)));
	});
var $dillonkearns$elm_pages$Internal$ApiRoute$tryMatch = F2(
	function (path, _v0) {
		var pattern = _v0.a;
		var handler = _v0.b;
		var matches = A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			A2(
				$elm$core$List$concatMap,
				function ($) {
					return $.submatches;
				},
				A2(
					$elm$regex$Regex$find,
					A2(
						$elm$core$Maybe$withDefault,
						$elm$regex$Regex$never,
						$elm$regex$Regex$fromString(pattern)),
					path)));
		return $elm$core$Maybe$Just(
			handler(matches));
	});
var $dillonkearns$elm_pages$ApiRoute$buildTimeRoutes = F2(
	function (buildUrls, fullHandler) {
		var pattern = fullHandler.a;
		var toString = fullHandler.c;
		var constructor = fullHandler.d;
		var preBuiltMatches = buildUrls(
			constructor(_List_Nil));
		var buildTimeRoutes__ = A2(
			$dillonkearns$elm_pages$DataSource$map,
			$elm$core$List$map(toString),
			buildUrls(
				constructor(_List_Nil)));
		return $dillonkearns$elm_pages$Internal$ApiRoute$ApiRoute(
			{
				buildTimeRoutes: buildTimeRoutes__,
				handleRoute: function (path) {
					var matches = A2($dillonkearns$elm_pages$Internal$ApiRoute$pathToMatches, path, fullHandler);
					return A2(
						$dillonkearns$elm_pages$DataSource$map,
						$elm$core$List$member(matches),
						preBuiltMatches);
				},
				matchesToResponse: function (path) {
					var matches = A2($dillonkearns$elm_pages$Internal$ApiRoute$pathToMatches, path, fullHandler);
					var routeFound = A2(
						$dillonkearns$elm_pages$DataSource$map,
						$elm$core$List$member(matches),
						preBuiltMatches);
					return A2(
						$dillonkearns$elm_pages$DataSource$andThen,
						function (found) {
							return found ? A2(
								$elm$core$Maybe$withDefault,
								$dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing),
								A2(
									$elm$core$Maybe$map,
									$dillonkearns$elm_pages$DataSource$map($elm$core$Maybe$Just),
									A2($dillonkearns$elm_pages$Internal$ApiRoute$tryMatch, path, fullHandler))) : $dillonkearns$elm_pages$DataSource$succeed($elm$core$Maybe$Nothing);
						},
						routeFound);
				},
				regex: A2(
					$elm$core$Maybe$withDefault,
					$elm$regex$Regex$never,
					$elm$regex$Regex$fromString('^' + (pattern + '$')))
			});
	});
var $dillonkearns$elm_pages$ApiRoute$single = function (handler) {
	return A2(
		$dillonkearns$elm_pages$ApiRoute$buildTimeRoutes,
		function (constructor) {
			return $dillonkearns$elm_pages$DataSource$succeed(
				_List_fromArray(
					[constructor]));
		},
		handler);
};
var $dillonkearns$elm_pages$ApiRoute$succeed = function (a) {
	return A4(
		$dillonkearns$elm_pages$Internal$ApiRoute$ApiRouteBuilder,
		'',
		function (_v0) {
			return a;
		},
		function (_v1) {
			return '';
		},
		function (list) {
			return list;
		});
};
var $author$project$TemplateModulesBeta$manifestHandler = $dillonkearns$elm_pages$ApiRoute$single(
	A2(
		$dillonkearns$elm_pages$ApiRoute$literal,
		'manifest.json',
		$dillonkearns$elm_pages$ApiRoute$succeed(
			A2(
				$dillonkearns$elm_pages$DataSource$map,
				function (data) {
					return A2(
						$author$project$TemplateModulesBeta$manifestToFile,
						$author$project$Site$config.canonicalUrl,
						$author$project$Site$config.manifest(data));
				},
				$author$project$Site$config.data))));
var $dillonkearns$elm_pages$ApiRoute$getBuildTimeRoutes = function (_v0) {
	var handler = _v0.a;
	return handler.buildTimeRoutes;
};
var $author$project$Api$routes = F2(
	function (getStaticRoutes, htmlToString) {
		return _List_Nil;
	});
var $author$project$TemplateModulesBeta$pathsToGenerateHandler = $dillonkearns$elm_pages$ApiRoute$single(
	A2(
		$dillonkearns$elm_pages$ApiRoute$literal,
		'all-paths.json',
		$dillonkearns$elm_pages$ApiRoute$succeed(
			A3(
				$dillonkearns$elm_pages$DataSource$map2,
				F2(
					function (pageRoutes, apiRoutes) {
						return {
							body: A2(
								$elm$json$Json$Encode$encode,
								0,
								A2(
									$elm$json$Json$Encode$list,
									$elm$json$Json$Encode$string,
									_Utils_ap(
										pageRoutes,
										A2(
											$elm$core$List$map,
											function (api) {
												return '/' + api;
											},
											apiRoutes))))
						};
					}),
				A2(
					$dillonkearns$elm_pages$DataSource$map,
					$elm$core$List$map(
						function (route) {
							return $dillonkearns$elm_pages$Path$toAbsolute(
								$author$project$Route$toPath(route));
						}),
					$author$project$TemplateModulesBeta$getStaticRoutes),
				A2(
					$dillonkearns$elm_pages$DataSource$map,
					$elm$core$List$concat,
					$dillonkearns$elm_pages$DataSource$combine(
						A2(
							$elm$core$List$map,
							$dillonkearns$elm_pages$ApiRoute$getBuildTimeRoutes,
							A2(
								$elm$core$List$cons,
								$author$project$TemplateModulesBeta$manifestHandler,
								A2(
									$author$project$Api$routes,
									$author$project$TemplateModulesBeta$getStaticRoutes,
									function (_v0) {
										return '';
									})))))))));
var $author$project$TemplateModulesBeta$routePatterns = $dillonkearns$elm_pages$ApiRoute$single(
	A2(
		$dillonkearns$elm_pages$ApiRoute$literal,
		'route-patterns.json',
		$dillonkearns$elm_pages$ApiRoute$succeed(
			function (json) {
				return $dillonkearns$elm_pages$DataSource$succeed(
					{
						body: A2($elm$json$Json$Encode$encode, 0, json)
					});
			}(
				A2(
					$elm$json$Json$Encode$list,
					function (_v0) {
						var kind = _v0.kind;
						var pathPattern = _v0.pathPattern;
						return $elm$json$Json$Encode$object(
							_List_fromArray(
								[
									_Utils_Tuple2(
									'kind',
									$elm$json$Json$Encode$string(kind)),
									_Utils_Tuple2(
									'pathPattern',
									$elm$json$Json$Encode$string(pathPattern))
								]));
					},
					_List_fromArray(
						[
							{kind: $author$project$Page$Blog$Name_$page.kind, pathPattern: '/blog/:name'},
							{kind: $author$project$Page$Project$Name_$page.kind, pathPattern: '/project/:name'},
							{kind: $author$project$Page$Skill$Name_$page.kind, pathPattern: '/skill/:name'},
							{kind: $author$project$Page$Tag$Name_$page.kind, pathPattern: '/tag/:name'},
							{kind: $author$project$Page$Testimonial$Name_$page.kind, pathPattern: '/testimonial/:name'},
							{kind: $author$project$Page$Now$page.kind, pathPattern: '/now'},
							{kind: $author$project$Page$Projects$page.kind, pathPattern: '/projects'},
							{kind: $author$project$Page$Skills$page.kind, pathPattern: '/skills'},
							{kind: $author$project$Page$Testimonials$page.kind, pathPattern: '/testimonials'},
							{kind: $author$project$Page$Writing$page.kind, pathPattern: '/writing'},
							{kind: $author$project$Page$Index$page.kind, pathPattern: '/'}
						]))))));
var $author$project$TemplateModulesBeta$routePatterns3 = _List_fromArray(
	[
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('blog'),
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('project'),
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('skill'),
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('tag'),
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('testimonial'),
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$DynamicSegment('name')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('now')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('projects')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('skills')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('testimonials')
			])
	},
		{
		ending: $elm$core$Maybe$Nothing,
		segments: _List_fromArray(
			[
				$dillonkearns$elm_pages$Pages$Internal$RoutePattern$StaticSegment('writing')
			])
	},
		{ending: $elm$core$Maybe$Nothing, segments: _List_Nil}
	]);
var $author$project$TemplateModulesBeta$templateSubscriptions = F3(
	function (route, path, model) {
		var _v0 = _Utils_Tuple2(model.page, route);
		_v0$11:
		while (true) {
			if (_v0.b.$ === 'Just') {
				switch (_v0.b.a.$) {
					case 'Index':
						if (_v0.a.$ === 'ModelIndex') {
							var templateModel = _v0.a.a;
							var _v1 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgIndex,
								A5(
									$author$project$Page$Index$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$11;
						}
					case 'Now':
						if (_v0.a.$ === 'ModelNow') {
							var templateModel = _v0.a.a;
							var _v2 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgNow,
								A5(
									$author$project$Page$Now$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$11;
						}
					case 'Projects':
						if (_v0.a.$ === 'ModelProjects') {
							var templateModel = _v0.a.a;
							var _v3 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgProjects,
								A5(
									$author$project$Page$Projects$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$11;
						}
					case 'Skills':
						if (_v0.a.$ === 'ModelSkills') {
							var templateModel = _v0.a.a;
							var _v4 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgSkills,
								A5(
									$author$project$Page$Skills$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$11;
						}
					case 'Testimonials':
						if (_v0.a.$ === 'ModelTestimonials') {
							var templateModel = _v0.a.a;
							var _v5 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgTestimonials,
								A5(
									$author$project$Page$Testimonials$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$11;
						}
					case 'Writing':
						if (_v0.a.$ === 'ModelWriting') {
							var templateModel = _v0.a.a;
							var _v6 = _v0.b.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgWriting,
								A5(
									$author$project$Page$Writing$page.subscriptions,
									$elm$core$Maybe$Nothing,
									{},
									path,
									templateModel,
									model.global));
						} else {
							break _v0$11;
						}
					case 'Blog__Name_':
						if (_v0.a.$ === 'ModelBlog__Name_') {
							var templateModel = _v0.a.a;
							var routeParams = _v0.b.a.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgBlog__Name_,
								A5($author$project$Page$Blog$Name_$page.subscriptions, $elm$core$Maybe$Nothing, routeParams, path, templateModel, model.global));
						} else {
							break _v0$11;
						}
					case 'Project__Name_':
						if (_v0.a.$ === 'ModelProject__Name_') {
							var templateModel = _v0.a.a;
							var routeParams = _v0.b.a.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgProject__Name_,
								A5($author$project$Page$Project$Name_$page.subscriptions, $elm$core$Maybe$Nothing, routeParams, path, templateModel, model.global));
						} else {
							break _v0$11;
						}
					case 'Skill__Name_':
						if (_v0.a.$ === 'ModelSkill__Name_') {
							var templateModel = _v0.a.a;
							var routeParams = _v0.b.a.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgSkill__Name_,
								A5($author$project$Page$Skill$Name_$page.subscriptions, $elm$core$Maybe$Nothing, routeParams, path, templateModel, model.global));
						} else {
							break _v0$11;
						}
					case 'Tag__Name_':
						if (_v0.a.$ === 'ModelTag__Name_') {
							var templateModel = _v0.a.a;
							var routeParams = _v0.b.a.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgTag__Name_,
								A5($author$project$Page$Tag$Name_$page.subscriptions, $elm$core$Maybe$Nothing, routeParams, path, templateModel, model.global));
						} else {
							break _v0$11;
						}
					default:
						if (_v0.a.$ === 'ModelTestimonial__Name_') {
							var templateModel = _v0.a.a;
							var routeParams = _v0.b.a.a;
							return A2(
								$elm$core$Platform$Sub$map,
								$author$project$TemplateModulesBeta$MsgTestimonial__Name_,
								A5($author$project$Page$Testimonial$Name_$page.subscriptions, $elm$core$Maybe$Nothing, routeParams, path, templateModel, model.global));
						} else {
							break _v0$11;
						}
				}
			} else {
				break _v0$11;
			}
		}
		return $elm$core$Platform$Sub$none;
	});
var $author$project$TemplateModulesBeta$toJsPort = _Platform_outgoingPort('toJsPort', $elm$core$Basics$identity);
var $dillonkearns$elm_pages$QueryParams$QueryParams = function (a) {
	return {$: 'QueryParams', a: a};
};
var $dillonkearns$elm_pages$QueryParams$fromString = $dillonkearns$elm_pages$QueryParams$QueryParams;
var $elm$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		if (ma.$ === 'Nothing') {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 'Nothing') {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				if (mc.$ === 'Nothing') {
					return $elm$core$Maybe$Nothing;
				} else {
					var c = mc.a;
					return $elm$core$Maybe$Just(
						A3(func, a, b, c));
				}
			}
		}
	});
var $author$project$TemplateModulesBeta$mapBoth = F3(
	function (fnA, fnB, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		return _Utils_Tuple3(
			fnA(a),
			fnB(b),
			c);
	});
var $author$project$TemplateModulesBeta$update = F5(
	function (sharedData, pageData, navigationKey, msg, model) {
		switch (msg.$) {
			case 'MsgGlobal':
				var msg_ = msg.a;
				var _v1 = A2($author$project$Shared$template.update, msg_, model.global);
				var sharedModel = _v1.a;
				var globalCmd = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: sharedModel}),
					A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, globalCmd));
			case 'OnPageChange':
				var record = msg.a;
				return function (_v2) {
					var updatedModel = _v2.a;
					var cmd = _v2.b;
					var _v3 = $author$project$Shared$template.onPageChange;
					if (_v3.$ === 'Nothing') {
						return _Utils_Tuple2(updatedModel, cmd);
					} else {
						var thingy = _v3.a;
						var _v4 = A2(
							$author$project$Shared$template.update,
							thingy(
								{fragment: record.fragment, path: record.path, query: record.query}),
							model.global);
						var updatedGlobalModel = _v4.a;
						var globalCmd = _v4.b;
						return _Utils_Tuple2(
							_Utils_update(
								updatedModel,
								{global: updatedGlobalModel}),
							$elm$core$Platform$Cmd$batch(
								_List_fromArray(
									[
										cmd,
										A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, globalCmd)
									])));
					}
				}(
					A6(
						$author$project$TemplateModulesBeta$init,
						$elm$core$Maybe$Just(model.global),
						$dillonkearns$elm_pages$Pages$Flags$PreRenderFlags,
						sharedData,
						pageData,
						navigationKey,
						$elm$core$Maybe$Just(
							{
								metadata: record.metadata,
								pageUrl: $elm$core$Maybe$Just(
									{
										fragment: record.fragment,
										host: record.host,
										path: record.path,
										port_: record.port_,
										protocol: record.protocol,
										query: A2($elm$core$Maybe$map, $dillonkearns$elm_pages$QueryParams$fromString, record.query)
									}),
								path: {fragment: record.fragment, path: record.path, query: record.query}
							})));
			case 'MsgIndex':
				var msg_ = msg.a;
				var _v5 = function () {
					var _v7 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v7.a.$ === 'ModelIndex') && (_v7.b.$ === 'DataIndex')) && (_v7.c.$ === 'Just')) && (_v7.c.a.a.$ === 'Index')) {
						var pageModel = _v7.a.a;
						var thisPageData = _v7.b.a;
						var _v8 = _v7.c.a;
						var _v9 = _v8.a;
						var pageUrl = _v8.b;
						var justPage = _v8.c;
						return function (_v10) {
							var a = _v10.a;
							var b = _v10.b;
							var c = _v10.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelIndex,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgIndex),
								A6(
									$author$project$Page$Index$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v5.a;
				var pageCmd = _v5.b;
				var _v6 = _v5.c;
				var newGlobalModel = _v6.a;
				var newGlobalCmd = _v6.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgNow':
				var msg_ = msg.a;
				var _v12 = function () {
					var _v14 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v14.a.$ === 'ModelNow') && (_v14.b.$ === 'DataNow')) && (_v14.c.$ === 'Just')) && (_v14.c.a.a.$ === 'Now')) {
						var pageModel = _v14.a.a;
						var thisPageData = _v14.b.a;
						var _v15 = _v14.c.a;
						var _v16 = _v15.a;
						var pageUrl = _v15.b;
						var justPage = _v15.c;
						return function (_v17) {
							var a = _v17.a;
							var b = _v17.b;
							var c = _v17.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelNow,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgNow),
								A6(
									$author$project$Page$Now$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v12.a;
				var pageCmd = _v12.b;
				var _v13 = _v12.c;
				var newGlobalModel = _v13.a;
				var newGlobalCmd = _v13.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgProjects':
				var msg_ = msg.a;
				var _v19 = function () {
					var _v21 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v21.a.$ === 'ModelProjects') && (_v21.b.$ === 'DataProjects')) && (_v21.c.$ === 'Just')) && (_v21.c.a.a.$ === 'Projects')) {
						var pageModel = _v21.a.a;
						var thisPageData = _v21.b.a;
						var _v22 = _v21.c.a;
						var _v23 = _v22.a;
						var pageUrl = _v22.b;
						var justPage = _v22.c;
						return function (_v24) {
							var a = _v24.a;
							var b = _v24.b;
							var c = _v24.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelProjects,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgProjects),
								A6(
									$author$project$Page$Projects$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v19.a;
				var pageCmd = _v19.b;
				var _v20 = _v19.c;
				var newGlobalModel = _v20.a;
				var newGlobalCmd = _v20.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgSkills':
				var msg_ = msg.a;
				var _v26 = function () {
					var _v28 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v28.a.$ === 'ModelSkills') && (_v28.b.$ === 'DataSkills')) && (_v28.c.$ === 'Just')) && (_v28.c.a.a.$ === 'Skills')) {
						var pageModel = _v28.a.a;
						var thisPageData = _v28.b.a;
						var _v29 = _v28.c.a;
						var _v30 = _v29.a;
						var pageUrl = _v29.b;
						var justPage = _v29.c;
						return function (_v31) {
							var a = _v31.a;
							var b = _v31.b;
							var c = _v31.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelSkills,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgSkills),
								A6(
									$author$project$Page$Skills$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v26.a;
				var pageCmd = _v26.b;
				var _v27 = _v26.c;
				var newGlobalModel = _v27.a;
				var newGlobalCmd = _v27.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgTestimonials':
				var msg_ = msg.a;
				var _v33 = function () {
					var _v35 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v35.a.$ === 'ModelTestimonials') && (_v35.b.$ === 'DataTestimonials')) && (_v35.c.$ === 'Just')) && (_v35.c.a.a.$ === 'Testimonials')) {
						var pageModel = _v35.a.a;
						var thisPageData = _v35.b.a;
						var _v36 = _v35.c.a;
						var _v37 = _v36.a;
						var pageUrl = _v36.b;
						var justPage = _v36.c;
						return function (_v38) {
							var a = _v38.a;
							var b = _v38.b;
							var c = _v38.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelTestimonials,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgTestimonials),
								A6(
									$author$project$Page$Testimonials$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v33.a;
				var pageCmd = _v33.b;
				var _v34 = _v33.c;
				var newGlobalModel = _v34.a;
				var newGlobalCmd = _v34.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgWriting':
				var msg_ = msg.a;
				var _v40 = function () {
					var _v42 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v42.a.$ === 'ModelWriting') && (_v42.b.$ === 'DataWriting')) && (_v42.c.$ === 'Just')) && (_v42.c.a.a.$ === 'Writing')) {
						var pageModel = _v42.a.a;
						var thisPageData = _v42.b.a;
						var _v43 = _v42.c.a;
						var _v44 = _v43.a;
						var pageUrl = _v43.b;
						var justPage = _v43.c;
						return function (_v45) {
							var a = _v45.a;
							var b = _v45.b;
							var c = _v45.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelWriting,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgWriting),
								A6(
									$author$project$Page$Writing$page.update,
									pageUrl,
									{
										data: thisPageData,
										path: justPage.path,
										routeParams: {},
										sharedData: sharedData
									},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v40.a;
				var pageCmd = _v40.b;
				var _v41 = _v40.c;
				var newGlobalModel = _v41.a;
				var newGlobalCmd = _v41.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgBlog__Name_':
				var msg_ = msg.a;
				var _v47 = function () {
					var _v49 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v49.a.$ === 'ModelBlog__Name_') && (_v49.b.$ === 'DataBlog__Name_')) && (_v49.c.$ === 'Just')) && (_v49.c.a.a.$ === 'Blog__Name_')) {
						var pageModel = _v49.a.a;
						var thisPageData = _v49.b.a;
						var _v50 = _v49.c.a;
						var routeParams = _v50.a.a;
						var pageUrl = _v50.b;
						var justPage = _v50.c;
						return function (_v51) {
							var a = _v51.a;
							var b = _v51.b;
							var c = _v51.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelBlog__Name_,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgBlog__Name_),
								A6(
									$author$project$Page$Blog$Name_$page.update,
									pageUrl,
									{data: thisPageData, path: justPage.path, routeParams: routeParams, sharedData: sharedData},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v47.a;
				var pageCmd = _v47.b;
				var _v48 = _v47.c;
				var newGlobalModel = _v48.a;
				var newGlobalCmd = _v48.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgProject__Name_':
				var msg_ = msg.a;
				var _v53 = function () {
					var _v55 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v55.a.$ === 'ModelProject__Name_') && (_v55.b.$ === 'DataProject__Name_')) && (_v55.c.$ === 'Just')) && (_v55.c.a.a.$ === 'Project__Name_')) {
						var pageModel = _v55.a.a;
						var thisPageData = _v55.b.a;
						var _v56 = _v55.c.a;
						var routeParams = _v56.a.a;
						var pageUrl = _v56.b;
						var justPage = _v56.c;
						return function (_v57) {
							var a = _v57.a;
							var b = _v57.b;
							var c = _v57.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelProject__Name_,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgProject__Name_),
								A6(
									$author$project$Page$Project$Name_$page.update,
									pageUrl,
									{data: thisPageData, path: justPage.path, routeParams: routeParams, sharedData: sharedData},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v53.a;
				var pageCmd = _v53.b;
				var _v54 = _v53.c;
				var newGlobalModel = _v54.a;
				var newGlobalCmd = _v54.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgSkill__Name_':
				var msg_ = msg.a;
				var _v59 = function () {
					var _v61 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v61.a.$ === 'ModelSkill__Name_') && (_v61.b.$ === 'DataSkill__Name_')) && (_v61.c.$ === 'Just')) && (_v61.c.a.a.$ === 'Skill__Name_')) {
						var pageModel = _v61.a.a;
						var thisPageData = _v61.b.a;
						var _v62 = _v61.c.a;
						var routeParams = _v62.a.a;
						var pageUrl = _v62.b;
						var justPage = _v62.c;
						return function (_v63) {
							var a = _v63.a;
							var b = _v63.b;
							var c = _v63.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelSkill__Name_,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgSkill__Name_),
								A6(
									$author$project$Page$Skill$Name_$page.update,
									pageUrl,
									{data: thisPageData, path: justPage.path, routeParams: routeParams, sharedData: sharedData},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v59.a;
				var pageCmd = _v59.b;
				var _v60 = _v59.c;
				var newGlobalModel = _v60.a;
				var newGlobalCmd = _v60.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			case 'MsgTag__Name_':
				var msg_ = msg.a;
				var _v65 = function () {
					var _v67 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v67.a.$ === 'ModelTag__Name_') && (_v67.b.$ === 'DataTag__Name_')) && (_v67.c.$ === 'Just')) && (_v67.c.a.a.$ === 'Tag__Name_')) {
						var pageModel = _v67.a.a;
						var thisPageData = _v67.b.a;
						var _v68 = _v67.c.a;
						var routeParams = _v68.a.a;
						var pageUrl = _v68.b;
						var justPage = _v68.c;
						return function (_v69) {
							var a = _v69.a;
							var b = _v69.b;
							var c = _v69.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelTag__Name_,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgTag__Name_),
								A6(
									$author$project$Page$Tag$Name_$page.update,
									pageUrl,
									{data: thisPageData, path: justPage.path, routeParams: routeParams, sharedData: sharedData},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v65.a;
				var pageCmd = _v65.b;
				var _v66 = _v65.c;
				var newGlobalModel = _v66.a;
				var newGlobalCmd = _v66.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
			default:
				var msg_ = msg.a;
				var _v71 = function () {
					var _v73 = _Utils_Tuple3(
						model.page,
						pageData,
						A4(
							$elm$core$Maybe$map3,
							F3(
								function (a, b, c) {
									return _Utils_Tuple3(a, b, c);
								}),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.metadata;
								},
								model.current),
							A2(
								$elm$core$Maybe$andThen,
								function ($) {
									return $.pageUrl;
								},
								model.current),
							A2(
								$elm$core$Maybe$map,
								function ($) {
									return $.path;
								},
								model.current)));
					if ((((_v73.a.$ === 'ModelTestimonial__Name_') && (_v73.b.$ === 'DataTestimonial__Name_')) && (_v73.c.$ === 'Just')) && (_v73.c.a.a.$ === 'Testimonial__Name_')) {
						var pageModel = _v73.a.a;
						var thisPageData = _v73.b.a;
						var _v74 = _v73.c.a;
						var routeParams = _v74.a.a;
						var pageUrl = _v74.b;
						var justPage = _v74.c;
						return function (_v75) {
							var a = _v75.a;
							var b = _v75.b;
							var c = _v75.c;
							if (c.$ === 'Just') {
								var sharedMsg = c.a;
								return _Utils_Tuple3(
									a,
									b,
									A2($author$project$Shared$template.update, sharedMsg, model.global));
							} else {
								return _Utils_Tuple3(
									a,
									b,
									_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
							}
						}(
							A3(
								$author$project$TemplateModulesBeta$mapBoth,
								$author$project$TemplateModulesBeta$ModelTestimonial__Name_,
								$elm$core$Platform$Cmd$map($author$project$TemplateModulesBeta$MsgTestimonial__Name_),
								A6(
									$author$project$Page$Testimonial$Name_$page.update,
									pageUrl,
									{data: thisPageData, path: justPage.path, routeParams: routeParams, sharedData: sharedData},
									navigationKey,
									msg_,
									pageModel,
									model.global)));
					} else {
						return _Utils_Tuple3(
							model.page,
							$elm$core$Platform$Cmd$none,
							_Utils_Tuple2(model.global, $elm$core$Platform$Cmd$none));
					}
				}();
				var updatedPageModel = _v71.a;
				var pageCmd = _v71.b;
				var _v72 = _v71.c;
				var newGlobalModel = _v72.a;
				var newGlobalCmd = _v72.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{global: newGlobalModel, page: updatedPageModel}),
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[
								pageCmd,
								A2($elm$core$Platform$Cmd$map, $author$project$TemplateModulesBeta$MsgGlobal, newGlobalCmd)
							])));
		}
	});
var $elm_community$list_extra$List$Extra$findMap = F2(
	function (f, list) {
		findMap:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var a = list.a;
				var tail = list.b;
				var _v1 = f(a);
				if (_v1.$ === 'Just') {
					var b = _v1.a;
					return $elm$core$Maybe$Just(b);
				} else {
					var $temp$f = f,
						$temp$list = tail;
					f = $temp$f;
					list = $temp$list;
					continue findMap;
				}
			}
		}
	});
var $dillonkearns$elm_pages$Pages$Internal$Router$ensureLeadingSlash = function (path) {
	return A2($elm$core$String$startsWith, '/', path) ? path : ('/' + path);
};
var $dillonkearns$elm_pages$Pages$Internal$Router$stripTrailingSlash = function (path) {
	return (A2($elm$core$String$endsWith, '/', path) && ($elm$core$String$length(path) > 1)) ? A2($elm$core$String$dropRight, 1, path) : path;
};
var $dillonkearns$elm_pages$Pages$Internal$Router$normalizePath = function (path) {
	return $dillonkearns$elm_pages$Pages$Internal$Router$stripTrailingSlash(
		$dillonkearns$elm_pages$Pages$Internal$Router$ensureLeadingSlash(path));
};
var $dillonkearns$elm_pages$Pages$Internal$Router$toRegex = function (pattern) {
	return A2(
		$elm$core$Maybe$withDefault,
		$elm$regex$Regex$never,
		$elm$regex$Regex$fromString(pattern));
};
var $dillonkearns$elm_pages$Pages$Internal$Router$submatches = F2(
	function (pattern, path) {
		return A2(
			$elm$core$List$concatMap,
			function ($) {
				return $.submatches;
			},
			A2(
				$elm$regex$Regex$find,
				A2(
					$elm$core$Maybe$withDefault,
					$elm$regex$Regex$never,
					$elm$regex$Regex$fromString(pattern)),
				path));
	});
var $dillonkearns$elm_pages$Pages$Internal$Router$tryMatch = F2(
	function (_v0, path) {
		var pattern = _v0.pattern;
		var toRoute = _v0.toRoute;
		return toRoute(
			A2(
				$dillonkearns$elm_pages$Pages$Internal$Router$submatches,
				pattern,
				$dillonkearns$elm_pages$Pages$Internal$Router$normalizePath(path)));
	});
var $dillonkearns$elm_pages$Pages$Internal$Router$firstMatch = F2(
	function (matchers, path) {
		return A2(
			$elm_community$list_extra$List$Extra$findMap,
			function (matcher) {
				return A2(
					$elm$regex$Regex$contains,
					$dillonkearns$elm_pages$Pages$Internal$Router$toRegex(matcher.pattern),
					$dillonkearns$elm_pages$Pages$Internal$Router$normalizePath(path)) ? A2($dillonkearns$elm_pages$Pages$Internal$Router$tryMatch, matcher, path) : $elm$core$Maybe$Nothing;
			},
			matchers);
	});
var $author$project$Route$matchers = _List_fromArray(
	[
		{
		pattern: '^\\/blog\\/(?:([^/]+))$',
		toRoute: function (matches) {
			if ((matches.b && (matches.a.$ === 'Just')) && (!matches.b.b)) {
				var name = matches.a.a;
				return $elm$core$Maybe$Just(
					$author$project$Route$Blog__Name_(
						{name: name}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/project\\/(?:([^/]+))$',
		toRoute: function (matches) {
			if ((matches.b && (matches.a.$ === 'Just')) && (!matches.b.b)) {
				var name = matches.a.a;
				return $elm$core$Maybe$Just(
					$author$project$Route$Project__Name_(
						{name: name}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/skill\\/(?:([^/]+))$',
		toRoute: function (matches) {
			if ((matches.b && (matches.a.$ === 'Just')) && (!matches.b.b)) {
				var name = matches.a.a;
				return $elm$core$Maybe$Just(
					$author$project$Route$Skill__Name_(
						{name: name}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/tag\\/(?:([^/]+))$',
		toRoute: function (matches) {
			if ((matches.b && (matches.a.$ === 'Just')) && (!matches.b.b)) {
				var name = matches.a.a;
				return $elm$core$Maybe$Just(
					$author$project$Route$Tag__Name_(
						{name: name}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/testimonial\\/(?:([^/]+))$',
		toRoute: function (matches) {
			if ((matches.b && (matches.a.$ === 'Just')) && (!matches.b.b)) {
				var name = matches.a.a;
				return $elm$core$Maybe$Just(
					$author$project$Route$Testimonial__Name_(
						{name: name}));
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/now$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Now);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/projects$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Projects);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/skills$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Skills);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/testimonials$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Testimonials);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/writing$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Writing);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	},
		{
		pattern: '^\\/$',
		toRoute: function (matches) {
			if (!matches.b) {
				return $elm$core$Maybe$Just($author$project$Route$Index);
			} else {
				return $elm$core$Maybe$Nothing;
			}
		}
	}
	]);
var $author$project$Route$withoutBaseUrl = function (path) {
	return A2($elm$core$String$startsWith, $author$project$Route$baseUrl, path) ? A2(
		$elm$core$String$dropLeft,
		$elm$core$String$length($author$project$Route$baseUrl),
		path) : path;
};
var $author$project$Route$urlToRoute = function (url) {
	return A2(
		$dillonkearns$elm_pages$Pages$Internal$Router$firstMatch,
		$author$project$Route$matchers,
		$author$project$Route$withoutBaseUrl(url.path));
};
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $author$project$View$map = F2(
	function (fn, doc) {
		return {
			body: A2(
				$elm$core$List$map,
				$mdgriffith$elm_ui$Element$map(fn),
				doc.body),
			title: doc.title
		};
	});
var $author$project$TemplateModulesBeta$view = F4(
	function (page, maybePageUrl, globalData, pageData) {
		var _v0 = _Utils_Tuple2(page.route, pageData);
		_v0$11:
		while (true) {
			if (_v0.a.$ === 'Just') {
				switch (_v0.a.a.$) {
					case 'Index':
						if (_v0.b.$ === 'DataIndex') {
							var _v1 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Index$page.head(
									{
										data: data,
										path: page.path,
										routeParams: {},
										sharedData: globalData
									}),
								view: function (model) {
									var _v2 = model.page;
									if (_v2.$ === 'ModelIndex') {
										var subModel = _v2.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgIndex,
												A4(
													$author$project$Page$Index$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Now':
						if (_v0.b.$ === 'DataNow') {
							var _v3 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Now$page.head(
									{
										data: data,
										path: page.path,
										routeParams: {},
										sharedData: globalData
									}),
								view: function (model) {
									var _v4 = model.page;
									if (_v4.$ === 'ModelNow') {
										var subModel = _v4.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgNow,
												A4(
													$author$project$Page$Now$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Projects':
						if (_v0.b.$ === 'DataProjects') {
							var _v5 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Projects$page.head(
									{
										data: data,
										path: page.path,
										routeParams: {},
										sharedData: globalData
									}),
								view: function (model) {
									var _v6 = model.page;
									if (_v6.$ === 'ModelProjects') {
										var subModel = _v6.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgProjects,
												A4(
													$author$project$Page$Projects$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Skills':
						if (_v0.b.$ === 'DataSkills') {
							var _v7 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Skills$page.head(
									{
										data: data,
										path: page.path,
										routeParams: {},
										sharedData: globalData
									}),
								view: function (model) {
									var _v8 = model.page;
									if (_v8.$ === 'ModelSkills') {
										var subModel = _v8.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgSkills,
												A4(
													$author$project$Page$Skills$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Testimonials':
						if (_v0.b.$ === 'DataTestimonials') {
							var _v9 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Testimonials$page.head(
									{
										data: data,
										path: page.path,
										routeParams: {},
										sharedData: globalData
									}),
								view: function (model) {
									var _v10 = model.page;
									if (_v10.$ === 'ModelTestimonials') {
										var subModel = _v10.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgTestimonials,
												A4(
													$author$project$Page$Testimonials$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Writing':
						if (_v0.b.$ === 'DataWriting') {
							var _v11 = _v0.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Writing$page.head(
									{
										data: data,
										path: page.path,
										routeParams: {},
										sharedData: globalData
									}),
								view: function (model) {
									var _v12 = model.page;
									if (_v12.$ === 'ModelWriting') {
										var subModel = _v12.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgWriting,
												A4(
													$author$project$Page$Writing$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{
														data: data,
														path: page.path,
														routeParams: {},
														sharedData: globalData
													})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Blog__Name_':
						if (_v0.b.$ === 'DataBlog__Name_') {
							var s = _v0.a.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Blog$Name_$page.head(
									{data: data, path: page.path, routeParams: s, sharedData: globalData}),
								view: function (model) {
									var _v13 = model.page;
									if (_v13.$ === 'ModelBlog__Name_') {
										var subModel = _v13.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgBlog__Name_,
												A4(
													$author$project$Page$Blog$Name_$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{data: data, path: page.path, routeParams: s, sharedData: globalData})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Project__Name_':
						if (_v0.b.$ === 'DataProject__Name_') {
							var s = _v0.a.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Project$Name_$page.head(
									{data: data, path: page.path, routeParams: s, sharedData: globalData}),
								view: function (model) {
									var _v14 = model.page;
									if (_v14.$ === 'ModelProject__Name_') {
										var subModel = _v14.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgProject__Name_,
												A4(
													$author$project$Page$Project$Name_$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{data: data, path: page.path, routeParams: s, sharedData: globalData})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Skill__Name_':
						if (_v0.b.$ === 'DataSkill__Name_') {
							var s = _v0.a.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Skill$Name_$page.head(
									{data: data, path: page.path, routeParams: s, sharedData: globalData}),
								view: function (model) {
									var _v15 = model.page;
									if (_v15.$ === 'ModelSkill__Name_') {
										var subModel = _v15.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgSkill__Name_,
												A4(
													$author$project$Page$Skill$Name_$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{data: data, path: page.path, routeParams: s, sharedData: globalData})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					case 'Tag__Name_':
						if (_v0.b.$ === 'DataTag__Name_') {
							var s = _v0.a.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Tag$Name_$page.head(
									{data: data, path: page.path, routeParams: s, sharedData: globalData}),
								view: function (model) {
									var _v16 = model.page;
									if (_v16.$ === 'ModelTag__Name_') {
										var subModel = _v16.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgTag__Name_,
												A4(
													$author$project$Page$Tag$Name_$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{data: data, path: page.path, routeParams: s, sharedData: globalData})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
					default:
						if (_v0.b.$ === 'DataTestimonial__Name_') {
							var s = _v0.a.a.a;
							var data = _v0.b.a;
							return {
								head: $author$project$Page$Testimonial$Name_$page.head(
									{data: data, path: page.path, routeParams: s, sharedData: globalData}),
								view: function (model) {
									var _v17 = model.page;
									if (_v17.$ === 'ModelTestimonial__Name_') {
										var subModel = _v17.a;
										return A5(
											$author$project$Shared$template.view,
											globalData,
											page,
											model.global,
											$author$project$TemplateModulesBeta$MsgGlobal,
											A2(
												$author$project$View$map,
												$author$project$TemplateModulesBeta$MsgTestimonial__Name_,
												A4(
													$author$project$Page$Testimonial$Name_$page.view,
													maybePageUrl,
													model.global,
													subModel,
													{data: data, path: page.path, routeParams: s, sharedData: globalData})));
									} else {
										return {
											body: $elm$html$Html$text('Model mismatch'),
											title: 'Model mismatch'
										};
									}
								}
							};
						} else {
							break _v0$11;
						}
				}
			} else {
				break _v0$11;
			}
		}
		return {
			head: _List_Nil,
			view: function (_v18) {
				return {
					body: A2(
						$elm$html$Html$div,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text('This page could not be found.')
							])),
					title: 'Page not found'
				};
			}
		};
	});
var $author$project$TemplateModulesBeta$main = $dillonkearns$elm_pages$Pages$Internal$Platform$Cli$cliApplication(
	{
		apiRoutes: function (htmlToString) {
			return A2(
				$elm$core$List$cons,
				$author$project$TemplateModulesBeta$pathsToGenerateHandler,
				A2(
					$elm$core$List$cons,
					$author$project$TemplateModulesBeta$routePatterns,
					A2(
						$elm$core$List$cons,
						$author$project$TemplateModulesBeta$manifestHandler,
						A2($author$project$Api$routes, $author$project$TemplateModulesBeta$getStaticRoutes, htmlToString))));
		},
		basePath: _List_Nil,
		data: $author$project$TemplateModulesBeta$dataForRoute,
		fromJsPort: $author$project$TemplateModulesBeta$fromJsPort($elm$core$Basics$identity),
		getStaticRoutes: A2(
			$dillonkearns$elm_pages$DataSource$map,
			$elm$core$List$map($elm$core$Maybe$Just),
			$author$project$TemplateModulesBeta$getStaticRoutes),
		handleRoute: $author$project$TemplateModulesBeta$handleRoute,
		init: $author$project$TemplateModulesBeta$init($elm$core$Maybe$Nothing),
		onPageChange: $author$project$TemplateModulesBeta$OnPageChange,
		pathPatterns: $author$project$TemplateModulesBeta$routePatterns3,
		routeToPath: function (route) {
			return A2(
				$elm$core$Maybe$withDefault,
				_List_Nil,
				A2($elm$core$Maybe$map, $author$project$Route$routeToPath, route));
		},
		sharedData: $author$project$Shared$template.data,
		site: $elm$core$Maybe$Just($author$project$Site$config),
		subscriptions: F3(
			function (route, path, model) {
				return $elm$core$Platform$Sub$batch(
					_List_fromArray(
						[
							A2(
							$elm$core$Platform$Sub$map,
							$author$project$TemplateModulesBeta$MsgGlobal,
							A2($author$project$Shared$template.subscriptions, path, model.global)),
							A3($author$project$TemplateModulesBeta$templateSubscriptions, route, path, model)
						]));
			}),
		toJsPort: $author$project$TemplateModulesBeta$toJsPort,
		update: $author$project$TemplateModulesBeta$update,
		urlToRoute: $author$project$Route$urlToRoute,
		view: $author$project$TemplateModulesBeta$view
	});
_Platform_export({'TemplateModulesBeta':{'init':$author$project$TemplateModulesBeta$main($elm$json$Json$Decode$value)({"versions":{"elm":"0.19.1"},"types":{"message":"Pages.Internal.Platform.Cli.Msg","aliases":{"DataSource.Http.Body":{"args":[],"type":"Pages.Internal.StaticHttpBody.Body"},"BuildError.BuildError":{"args":[],"type":"{ title : String.String, path : String.String, message : List.List TerminalText.Text, fatal : Basics.Bool }"},"DataSource.Http.RequestDetails":{"args":[],"type":"{ url : String.String, method : String.String, headers : List.List ( String.String, String.String ), body : DataSource.Http.Body }"},"TerminalText.AnsiStyle":{"args":[],"type":"{ bold : Basics.Bool, underline : Basics.Bool, color : Maybe.Maybe Ansi.Color }"}},"unions":{"Pages.Internal.Platform.Cli.Msg":{"args":[],"tags":{"GotDataBatch":["List.List { request : { masked : DataSource.Http.RequestDetails, unmasked : DataSource.Http.RequestDetails }, response : String.String }"],"GotBuildError":["BuildError.BuildError"],"Continue":[]}},"Pages.Internal.StaticHttpBody.Body":{"args":[],"tags":{"EmptyBody":[],"StringBody":["String.String","String.String"],"JsonBody":["Json.Encode.Value"]}},"Basics.Bool":{"args":[],"tags":{"True":[],"False":[]}},"List.List":{"args":["a"],"tags":{}},"String.String":{"args":[],"tags":{"String":[]}},"TerminalText.Text":{"args":[],"tags":{"Style":["TerminalText.AnsiStyle","String.String"]}},"Ansi.Color":{"args":[],"tags":{"Black":[],"Red":[],"Green":[],"Yellow":[],"Blue":[],"Magenta":[],"Cyan":[],"White":[],"BrightBlack":[],"BrightRed":[],"BrightGreen":[],"BrightYellow":[],"BrightBlue":[],"BrightMagenta":[],"BrightCyan":[],"BrightWhite":[],"Custom":["Basics.Int","Basics.Int","Basics.Int"]}},"Maybe.Maybe":{"args":["a"],"tags":{"Just":["a"],"Nothing":[]}},"Json.Encode.Value":{"args":[],"tags":{"Value":[]}},"Basics.Int":{"args":[],"tags":{"Int":[]}}}}})}});}(this));